//////////////////////////////////////ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ//////////////////////////////////
&НаКлиенте
Процедура Расш1_ПриОткрытииПосле(Отказ)
	
	Если ВариантБлокировки = "Заблокировать реестр для выгрузки" Тогда
		Элементы.ВыгрузитьРеестр.Доступность = Ложь;
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура Расш1_ПриЗакрытииПосле(ЗавершениеРаботы)
	//Оповестить("РеестрПлатежейЗакрылся", АдресРеестра);
КонецПроцедуры


&После("СформироватьОтчет")
Процедура Расш1_ЗаписатьДанныеВТаблицуНаКлиенте(Options = Неопределено)
	
	КоличествоУровней = Результат.КоличествоУровнейГруппировокСтрок();
	Для Уровень = 1 По КоличествоУровней - Мин(КоличествоУровней - 1, УровеньГруппировки - 1)  Цикл
		Результат.ПоказатьУровеньГруппировокСтрок(КоличествоУровней - Уровень);
	КонецЦикла;
	
КонецПроцедуры	


&НаКлиенте
Процедура Расш1_РезультатПриАктивизацииОбластиПосле(Элемент)              
    Элементы.Итог.Заголовок = Сред(Элементы.Итог.Заголовок, 1, 3) + " " + Строка(ОбщийМодульКлиент.РасчетЯчеек(Результат, Неопределено).Сумма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////






//////////////////////////////////////ВЫГРУЗКА РЕЕСТРА//////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура Расш1_ИзменитьВБухгалтерии(Команда)
    
    Модифицированность = Истина;
    
	Оповестить("ЗаписатьДетализациюРасходов", АдресРеестра);
	//Модифицированность = Истина;
	
	
	//Остановим выполнение типовых обработчиков
	УстановитьВыполнениеОбработчиковСобытия(Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура Расш1_ВыгрузитьРеестр(Команда)
	
	Если Глоссаб Тогда
		ИмяФайла = "\\main-sql02\Документация\ДМИТРИЙ\Отчёты 1С\Глоссаб\ДДС\Контроль реестра Глоссаб";
		ПолучитьРеестрНаСервере(ИмяФайла);
	Иначе
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВводаНомераРеестра", ЭтаФорма);
		ПоказатьВводЧисла(ОповещениеОЗавершении, 1, "Введите номер реестра...");
	КонецЕсли;  		
		
КонецПроцедуры


&НаКлиенте
Процедура ПослеВводаНомераРеестра(Число, ДополнительныеПараметры) Экспорт
    
    Если Число <= 0 Тогда
      ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Некорректный номер реестра!!!");    
      Возврат;
    КонецЕсли;  
    
	ИмяФайла = "\\2x-fs01.ukritter.local\G056\БК\БК_Обработки\Выгрузки\Контроль реестра_" + Строка(Число);
	ПолучитьРеестрНаСервере(ИмяФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура Расш1_ЗагрузитьОтобранныеРасходыПосле(Команда)
	Оповестить("ЗагрузитьОтобранныеРасходы", Новый Структура("Источник, Отбор", АдресРеестра));
КонецПроцедуры


&НаСервере
Процедура ПолучитьРеестрНаСервере(ИмяФайла)

    
    //Сформируем таблицу выгрузки
    Поля = "СсылкаБухгалтерия:Ссылка;НомерПлатежа:НомерВБухгалтерии;Дата;СтатьяРасходаМод.Код:СтатьяРасходаМод;МодифицированоБУХ;
            |СчетОрганизации.НомерСчета:СчетОрганизацииНомер;СчетОрганизации.Валюта.Код:СчетОрганизацииВалютаКод;
            |Организация.ИНН;Сумма;сп_СтатьяРасхода";
    Options = Новый Соответствие;
    Options.Вставить("Поля", Поля);
    Options.Вставить("Источник", АдресРеестра); 
    //Options.Вставить("Отбор", Новый Соответствие); 
    //Options.Вставить("КорректировкаСхемы", Истина);
    
    СформироватьОтчет(Options);
    //
    СписокКолонок = УстановитьЗаголовкиПолей(Options["Результат"].Колонки);
    Группы = СтрЗаменить(СписокКолонок, "Сумма", "");
    Options["Результат"].Свернуть(Группы, "Сумма");

    
    
	//Выгрузим данные в файл
	Если ЗначениеВФайл(ИмяФайла + ".txt", Options["Результат"]) Тогда		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выгружено!!!");
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выгружено!!!" + Символы.ПС + ОписаниеОшибки());
	КонецЕсли;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////








//////////////////////////////////////ОТПРАВКА РЕЕСТРА НА БОРКИНА А.Г.//////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура Расш1_ОтправитьПисьмо(Команда)
	
    //СписокПолучателей = Новый СписокЗначений;
    //СписокПолучателей.Добавить("jhon.zemlyachev@ukritter.ru", "Евгений Землячёв");
    //СписокПолучателей.Добавить("tavlintsev@fashion-city.eu", "Константин Тавлинцев");
    //СписокПолучателей.Добавить("aleksey.peshehonov@intercontaudit.ru", "Алексей Пешехонов");
    //СписокПолучателей.Добавить("dmitriy.lobov@pochtavip.com", "Дмитрий Лобов");
    //
    //ОповещениеОЗакрытии = Новый ОписаниеОповещения("УстановитьПолучателя", ЭтаФорма);
    //ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокПолучателей, Элементы.ОтправитьПисьмо);
    
    
    ОповещениеОЗакрытии = Новый ОписаниеОповещения("УстановитьПолучателя", ЭтаФорма);
    ОткрытьФорму("Справочник.Инициаторы.ФормаВыбора",,,,,, ОповещениеОЗакрытии);
    
    
КонецПроцедуры


&НаКлиенте
Процедура УстановитьПолучателя(Получатель, ДополнительныеПараметры) Экспорт
	
	//
	Если Получатель = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Расш1_ОтправитьПисьмоНаСервере(Получатель, Результат)
	//
	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура Расш1_ОтправитьПисьмоНаСервере(Получатель, Результат)
     

	//
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("XLS");
	Результат.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLS);
	//	
	
	
	Вложения = Новый Соответствие;
	Вложения.Вставить("Реестр.XLS", Новый ДвоичныеДанные(ИмяВременногоФайла));
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Кому",  ВернутьEmailПолучателя(Получатель));
	ПараметрыПисьма.Вставить("Тема", "Реестр платежей");
	ПараметрыПисьма.Вставить("Тело", "");
	ПараметрыПисьма.Вставить("Вложения", Вложения);
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("Фабрика");
	
	//
	Попытка
		РаботаСПочтовымиСообщениями.ОтправитьСообщение(УчетнаяЗапись, ПараметрыПисьма);  
		Сообщить("Письмо отправлено!!!");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	
	//
	УдалитьФайлы(ИмяВременногоФайла);

	
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ВернутьEmailПолучателя(Знач Получатель)
    
    Перем Email, EmailИнициатора, ВидКонтИнформации;
    
    ВидКонтИнформации = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Email",, 
    Справочники.ВидыКонтактнойИнформации.СправочникИнициаторы);
    
    Email =  УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Получатель, EmailИнициатора);
    
    Если ПустаяСтрока(Email) Тогда
        ВызватьИсключение "Не заполнен EMAIL получателя!!!!!";
    КонецЕсли;
    
    Возврат Email;

КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////ДЛЯ ПОДСИСТЕМЫ ДДС////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура Расш1_ЗаполнитьДатыИзБуфера(Команда)
	
  ЗаполнитьДатыИзБуфераНаСервере(АдресРеестра, ПолучитьТекстИзБуфераОбмена(), УникальныйИдентификатор);	
  СформироватьОтчет();
    
КонецПроцедуры

&НаКлиенте
Процедура Расш1_ЗаполнитьДатыLoginom(Команда)
	
	Попытка
		Соединение = Новый HTTPСоединение("main-ts02");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Запрос = Новый HTTPЗапрос("/lgi/Service.svc/Rest/ValPereodi/Payments");
	
	Попытка
		Ответ = Соединение.Получить(Запрос);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ОтветСервиса = Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния <> 200 Тогда
		Сообщить(ОтветСервиса);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДатыLoginomНаСервере(АдресРеестра, ОтветСервиса, УникальныйИдентификатор);
	СформироватьОтчет();


КонецПроцедуры


&НаСервереБезКонтекста
Процедура ЗаполнитьДатыИзБуфераНаСервере(АдресРеестра, ТекстБуфера, ИдентификаторФормы)

	//
	ТЗ_Тавлинцев = Новый ТаблицаЗначений;
	ТЗ_Тавлинцев.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка", ,
													Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТЗ_Тавлинцев.Колонки.Добавить("Оплата", Новый ОписаниеТипов("Булево"));												
	//
	
	Строки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстБуфера, Символы.ПС);
	
	Индекс = 1;	
	Пока Индекс <= Строки.Количество() Цикл
		
		Колонки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строки[Индекс - 1], Символы.Таб);
		
		Попытка
			Номер = СтрЗаменить(Колонки[0], Символ(32), Символ(160));
			Оплата = ?(ПустаяСтрока(Колонки[Колонки.ВГраница()]), Ложь, Истина);
			//
			НоваяЗапись = ТЗ_Тавлинцев.Добавить();
			НоваяЗапись.НомерДокумента = Номер;
			НоваяЗапись.Оплата = Оплата;
			//
		Исключение
		КонецПопытки;
		Индекс = Индекс + 1;
		
	КонецЦикла;
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	
	УстановитьДатыНаСервере(АдресРеестра, ИдентификаторФормы, ТЗ_Тавлинцев);

		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДатыLoginomНаСервере(АдресРеестра, СтрокаJson, ИдентификаторФормы)

	//
	ТЗ_Тавлинцев = Новый ТаблицаЗначений;
	ТЗ_Тавлинцев.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка", ,
													Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТЗ_Тавлинцев.Колонки.Добавить("Оплата", Новый ОписаниеТипов("Булево"));												
	//
	
	ЧтениеJson = НОвый ЧтениеJSON;
	ЧтениеJson.УстановитьСтроку(СтрокаJson);
	
	Попытка
		Результат = ПрочитатьJSON(ЧтениеJson);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Для Каждого Запись Из Результат.DataSet.Rows Цикл
		НоваяЗапись = ТЗ_Тавлинцев.Добавить();
		НоваяЗапись.НомерДокумента =  СтрЗаменить(Строка(Запись.DocNumber), Символ(32), Символ(160));
		НоваяЗапись.Оплата = Запись.Payments;
	КонецЦикла;	
	
	
	
	УстановитьДатыНаСервере(АдресРеестра, ИдентификаторФормы, ТЗ_Тавлинцев);

		
КонецПроцедуры



&НаСервереБезКонтекста
Процедура УстановитьДатыНаСервере (АдресРеестра, Знач ИдентификаторФормы, Знач ТЗ_Тавлинцев)
	
	Перем Запрос, ТЗ_Реестр;
	
	ТЗ_Реестр = ПолучитьИзВременногоХранилища(АдресРеестра);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ_Тавлинцев", ТЗ_Тавлинцев);
	Запрос.УстановитьПараметр("ТЗ_Реестр", ТЗ_Реестр);
	Запрос.УстановитьПараметр("Сегодня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Завтра", НачалоДня(ТекущаяДата()) + 24*60*60);
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗ_Тавлинцев.НомерДокумента,
	|	ТЗ_Тавлинцев.Оплата
	|ПОМЕСТИТЬ ВТ_Тавлинцев
	|ИЗ
	|	&ТЗ_Тавлинцев КАК ТЗ_Тавлинцев
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_Реестр.*
	|ПОМЕСТИТЬ ВТ_Реестр
	|ИЗ
	|	&ТЗ_Реестр КАК ТЗ_Реестр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Реестр.*,
	|	ВЫБОР
	|        КОГДА ВТ_Реестр.Отправлено ТОГДА
	|          &Сегодня
	|		КОГДА ЕСТЬNULL(ВТ_Тавлинцев.Оплата, ЛОЖЬ)
	|			ТОГДА &Сегодня
	|        КОГДА ВТ_Реестр.Дата > &Сегодня
	|          ТОГДА ВТ_Реестр.Дата 
	|		ИНАЧЕ &Завтра
	|	КОНЕЦ КАК ДатаОплаты,
	|	Истина КАК Модифицировано1
	|ИЗ
	|	ВТ_Реестр КАК ВТ_Реестр
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Тавлинцев КАК ВТ_Тавлинцев
	|		ПО ВТ_Реестр.НомерВБухгалтерии = ВТ_Тавлинцев.НомерДокумента
	|ГДЕ 
	|    ВТ_Реестр.Организация.ТипОрганизации В (&Глоссаб)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Реестр.*,
	|	ВТ_Реестр.Дата КАК ДатаОплаты,
	|    ВТ_Реестр.Модифицировано КАК Модифицировано1
	|ИЗ
	|	ВТ_Реестр КАК ВТ_Реестр
	|ГДЕ
	|    ВТ_Реестр.Организация.ТипОрганизации НЕ В (&Глоссаб)";
	
	
	БазыГлоссаб = Новый СписокЗначений;
	БазыГлоссаб.Добавить(Перечисления.ТипОрганизации.Таможня);
	БазыГлоссаб.Добавить(Перечисления.ТипОрганизации.Глоссаб);
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	
	Запрос.УстановитьПараметр("Глоссаб", БазыГлоссаб);
	ТЗ_Реестр = Запрос.Выполнить().Выгрузить();
	
	//
	ТЗ_Реестр.ЗагрузитьКолонку(ТЗ_Реестр.ВыгрузитьКолонку("ДатаОплаты"), "Дата");
	ТЗ_Реестр.ЗагрузитьКолонку(ТЗ_Реестр.ВыгрузитьКолонку("Модифицировано1"), "Модифицировано");
	ТЗ_Реестр.ЗагрузитьКолонку(ТЗ_Реестр.ВыгрузитьКолонку("Модифицировано1"), "МодифицированоБУХ");
	
	//
	ТЗ_Реестр.Колонки.Удалить("ДатаОплаты");
	ТЗ_Реестр.Колонки.Удалить("Модифицировано1");
	АдресРеестра = ПоместитьВоВременноеХранилище(ТЗ_Реестр, АдресРеестра);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////


#Область ОбработкаРеестра

&НаКлиенте
Процедура Расш1_ВыбратьВариантОбработкиРеестраВместо(Команда)
	
	ПунктыМеню = Новый СписокЗначений;
	ПунктыМеню.Добавить("Второй реестр");
	ПунктыМеню.Добавить("Заблокировать реестр для выгрузки");
	ПунктыМеню.Добавить("Разблокировать реестр для выгрузки");
	ПунктыМеню.Добавить("Снять реестр с редактирования");
	ПунктыМеню.Добавить("Бюджетирование План-Факт",,, БиблиотекаКартинок.ВнешнийИсточникДанных);
	//
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ВариантОбработкиРеестра", ЭтотОбъект), ПунктыМеню, Элементы.Результат);
	//
	
КонецПроцедуры 	  


&НаКлиенте
&После("ОбработатьРеестр")
Процедура Расш1_ОбработатьРеестр(РезультатЗакрытия, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = "Бюджетирование План-Факт" Тогда
		ОткрытьФорму("Отчет.БюджетированиеПланФакт.Форма.ОсновнаяФормаОтчёта");
		Оповестить("БюджетированиеПланФакт", ?(РезультатЗакрытия = Неопределено, АдресРеестра, 
                                                                 ПолучитьАдресРеестра(РезультатЗакрытия, УникальныйИдентификатор))); 
	КонецЕсли;	
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьАдресРеестра(Реестры, УИД)

	Таблица = Новый ТаблицаЗначений;
	//
	Для Каждого БизнесПроцесс Из Реестры Цикл
		Реестр = БизнесПроцесс.ХранилищеРеестраПлатежей.Получить();
		//
		Если Таблица.Колонки.Количество() = 0 Тогда
			Таблица = Реестр.СкопироватьКолонки();
		КонецЕсли;	
		//	
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Реестр, Таблица);
	КонецЦикла;
	
	//
	Возврат ПоместитьВоВременноеХранилище(Таблица, УИД);
	
	

КонецФункции



//Меню дополнительные команды
&НаКлиенте
Процедура Расш1_РедактироватьРеестрДетальноПосле(Команда)
	
	ОткрытыеОкна = ПолучитьОкна();
	Для Каждого ОткрытоеОкно Из ОткрытыеОкна Цикл
		//
		Если ОткрытоеОкно.Заголовок = "Редактирование произвольной таблицы" Тогда
			Оповестить("ОбновитьТаблицуДляРедактирования", АдресРеестра);
			ОткрытоеОкно.Активизировать();
			Возврат;
		КонецЕсли;	
		//
	КонецЦикла;	
	
	
	ПараметрыФормыРедактирования = Новый Структура("АдресТаблицыВХ", АдресРеестра);
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения("ПриЗакрытииРедактирования", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.Расш1_РедактированиеТаблицВХ", ПараметрыФормыРедактирования,,,,, ОповещениеПриЗакрытии); 

	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииРедактирования (РезультатЗакрытия, ДополнительныеПараметры) Экспорт
  Модифицированность = Истина;	
КонецПроцедуры	


#КонецОбласти

//////////////////////////////////////ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ//////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Функция ПолучитьТекстИзБуфераОбмена()
	
	HtmlFile = Новый COMОбъект("htmlfile");
	Возврат HtmlFile.ParentWindow.ClipboardData.Getdata("Text");
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////


