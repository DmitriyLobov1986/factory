#Область ПроцедурыИФункцииФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Параметры для расшифровки
	Если Параметры.Свойство("РежимРедактирования") Тогда
		Элементы.ФормаРедактироватьДанные.Пометка = Параметры.РежимРедактирования;
		//Элементы.ФормаРедактироватьДанные.Доступность = Ложь;
		Элементы.КомпоновщикНастроекПользовательскиеНастройки.Доступность = НЕ Параметры.РежимРедактирования;
	КонецЕсли; 
	
	
	
	Если Параметры.Свойство("АдресТаблицыРедактирования") Тогда
		АдресТаблицыРедактирования = Параметры.АдресТаблицыРедактирования;
	КонецЕсли;
	
	
	
	//Установим текущий вариант
	Если ПустаяСтрока(Параметры.КлючВарианта) Тогда
		ВариантПоУмолчанию = Истина;
	КонецЕсли;
	
	
	
	//Подключим обработку корректировки
	ВнешниеОбработки.Создать("\\main-sql02\Документация\Дмитрий\Отчёты 1С\Фабрика\Бюджетирование\КорректировкаЗаписейБюджета.epf");
	
		
КонецПроцедуры



&НаСервере
Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(Настройки, ИспользуютсяСтандартныеНастройки)
	
	//Установим идентификаторы пользовательских настроек
	
	НастройкиОтчёта = Отчет.КомпоновщикНастроек.Настройки;
	
	//Период
	ПараметрПериодОтчёта = НастройкиОтчёта.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчёта"));
	Если ПараметрПериодОтчёта <> Неопределено Тогда
		ПараметрПериодОтчёта.ИдентификаторПользовательскойНастройки = "ПараметрПериодОтчёта";
	КонецЕсли;
	
	
	
	//Отборы
	УстановитьИдентификаторОтборов(Отчет.КомпоновщикНастроек.Настройки.Структура);	
	
	
КонецПроцедуры

  

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Отказ = Истина;
	АдресФайла = "\\main-sql02.ukritter.local\Документация\Дмитрий\Отчёты 1С\Фабрика\Бюджетирование\Бюджетирование.erf";	
	
	Оповещение = Новый ОписаниеОповещения("Оповещение", ЭтотОбъект);
	НачатьПомещениеФайла(Оповещение,, АдресФайла, Ложь);

	
	//Если ВариантПоУмолчанию Тогда
	//	УстановитьТекущийВариант("Основной");
	//КонецЕсли;
	//
	//СформироватьОтчёт(Неопределено);
	
	
	
КонецПроцедуры



&НаСервереБезКонтекста
Процедура ПослеПомещения(Результат, Адрес, ПомещаемыйФайл, ДополнительныеПараметры)
	ВнешниеОбработки.Создать(Адрес);	
КонецПроцедуры	



&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РежимРедактирования" Тогда
		РедактироватьДанныеОбработчик(Источник);
	КонецЕсли;	
	
КонецПроцедуры


#КонецОбласти

#Область ПодменаОтчёта

&НаКлиенте
Процедура Оповещение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	ИмяОтчёта = ПодключитьВнешнийОтчёт(Адрес);
	ОткрытьФорму("ВнешнийОтчет." + ИмяОтчёта + ".Форма.ФормаОтчета");
КонецПроцедуры

&НаСервере
Функция ПодключитьВнешнийОтчёт(АдресХранилища)
	Возврат ВнешниеОтчеты.Подключить(АдресХранилища,, Ложь);
КонецФункции 

#КонецОбласти


//////////////////////////////////////ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЁТА//////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура СформироватьОтчёт(Команда)
	
  СформироватьОтчётПрограмно();
  
  
  //
  НастроитьТабличныйДокумент();
  
  
КонецПроцедуры

&НаСервере
// Описание параметров процедуры:
//    ПолучитьТаблицуРедактирования - Истина или Ложь (определяет куда нужно вывести результат формирования отчёта: в Табличный документ или Таблицу значений
//    НастройкиПоУмолчанию - если не передаются, то используются настройки компоновщика
//    АдресТаблицыВоВременномХранилище - если первый параметр = истина, то здесь указывается адрес во временном хранилище для сохранения полученной Таблицы значений
Процедура СформироватьОтчётПрограмно(ПолучитьТаблицуРедактирования = ЛОЖЬ,
	                                 КомпоновщикНастроекПоУмолчанию = Неопределено,
	                                 АдресПомещенияТаблицы = "")

	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	
	
	//Получим схему компоновки данных
	Схема = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	
	
	//Создадим внешний набор данных
	ТаблицаРедактирования = ПолучитьТаблицуРедактирования(АдресТаблицыРедактирования,
												          Элементы.ФормаРедактироватьДанные.Пометка,
														  УникальныйИдентификатор);
										   
																			   
	ВнешнийНаборДанных = Новый Структура("ТаблицаРедактирования", ТаблицаРедактирования);  
	
	
	
	////Установим период таблицы редактирования
	//ПериодОтчёта = НастройкиКомпоновкиОтчета.ПараметрыДанных.Элементы.Найти("ПериодОтчёта"); 
	//Если РежимРедактирования.Значение Тогда
	//	ТРниз = ОбщийМодульСервер.ПолучитьСложныйОтборТЗ(ТаблицаРедактирования, "День", ВидСравнения.БольшеИлиРавно,, ПериодОтчёта.Значение.ДатаНачала);
	//	ТРверх = ОбщийМодульСервер.ПолучитьСложныйОтборТЗ(ТРниз, "День", ВидСравнения.МеньшеИлиРавно,, ПериодОтчёта.Значение.ДатаОкончания);
	//	//
	//	ВнешнийНаборДанных = Новый Структура("ТаблицаРедактирования", ТРверх); 
	//КонецЕсли;	
	
	
	
	Если ПолучитьТаблицуРедактирования Тогда
		
		
		
		КомпоновщикНастроекПоУмолчанию = ?(КомпоновщикНастроекПоУмолчанию = Неопределено, Отчет.КомпоновщикНастроек, КомпоновщикНастроекПоУмолчанию); 
		
		
		
		#Область ИнициализируемКомпоновщикНастроек
		КомпоновщикНастроекНовый = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроекНовый.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		КомпоновщикНастроекНовый.ЗагрузитьНастройки(КомпоновщикНастроекПоУмолчанию.Настройки);
		#КонецОбласти

		
		
		//Заполним настройки "Для редактирования"
		#Область НастройкиДляРедактирования
		КомпоновщикНастроекНовый.Настройки.Структура.Очистить();
		ДетальныеЗаписи = КомпоновщикНастроекНовый.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ДетальныеЗаписи.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		ДетальныеЗаписи.Отбор.ИдентификаторПользовательскойНастройки = "ОтборГруппировкаБазы";
				
		Для Каждого Колонка Из ВнешнийНаборДанных.ТаблицаРедактирования.Колонки Цикл
			
			Если Колонка.Имя = "ОрганизацияSQLИНН" Тогда
				ИмяПоля = "ОрганизацияSQL.ИНН";
			ИначеЕсли Колонка.Имя = "КонтрагентСвойКонтрагент" Тогда
				ИмяПоля = "Контрагент.СвойКонтрагент";
			ИначеЕсли Колонка.Имя = "СистемныеПоляНомерПоПорядку" Тогда
				ИмяПоля =  "НомерЗаписи";
			ИначеЕсли Колонка.Имя = "Модифицировано" Тогда	
				Продолжить;
			Иначе ИмяПоля = Колонка.Имя;
			КонецЕсли;	
			
			ВыбранноеПоле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));     
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
						
		КонецЦикла;
		
		
		
		//Нумерация
		ВыбранноеПоле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));     
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля.НомерПоПорядку");
		
		
		
		//Вывод
		ДетальныеЗаписи.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
		
		
		//Получим настройки компоновки отчета
		КомпоновщикНастроекНовый.ЗагрузитьПользовательскиеНастройки(КомпоновщикНастроекПоУмолчанию.ПользовательскиеНастройки);
		НастройкиКомпоновкиОтчета = КомпоновщикНастроекНовый.ПолучитьНастройки(); 
		
		#КонецОбласти
		
		
		
		//Параметры настроек
		РежимРедактирования = НастройкиКомпоновкиОтчета.ПараметрыДанных.Элементы.Найти("РежимРедактирования"); 
		РежимРедактирования.Использование = Истина;
		РежимРедактирования.Значение = Элементы.ФормаРедактироватьДанные.Пометка;

		
			
		//Передаем в макет компоновки схему, настройки и данные расшифровки
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		Макет = КомпоновщикМакета.Выполнить(Схема, НастройкиКомпоновкиОтчета,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		//Выполним компоновку с помощью процессора компоновки
		ПроцессорКомпоновкиДляРедактирования = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДляРедактирования.Инициализировать(Макет, ВнешнийНаборДанных);
		
		//Выведем компоновку с помощью процессора вывода
		ТЗредактирования = Новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ТЗредактирования);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДляРедактирования);
		
		//Поместим "Таблицу редактирования" во временное хранилище
		ТЗредактирования.Колонки.Добавить("Модифицировано", Новый ОписаниеТипов("Булево"));
		ПоместитьВоВременноеХранилище(ТЗредактирования, АдресПомещенияТаблицы);
		
	Иначе
		
		//Получим настройки компоновки отчета
		НастройкиКомпоновкиОтчета = Отчет.КомпоновщикНастроек.ПолучитьНастройки();

		
		
		//Параметры настроек
		РежимРедактирования = НастройкиКомпоновкиОтчета.ПараметрыДанных.Элементы.Найти("РежимРедактирования"); 
		РежимРедактирования.Использование = Истина;
		РежимРедактирования.Значение = Элементы.ФормаРедактироватьДанные.Пометка;

		
		
		//Передаем в макет компоновки схему, настройки и данные расшифровки
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		НовыеДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		Макет = КомпоновщикМакета.Выполнить(Схема, НастройкиКомпоновкиОтчета, НовыеДанныеРасшифровки);
		
		//Выполним компоновку с помощью процессора компоновки
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(Макет, ВнешнийНаборДанных, НовыеДанныеРасшифровки);
		
		//Выведем компоновку с помощью процессора вывода
		Результат.Очистить();	
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		//Поместим данные расшифровки во временное хранилище
		ДанныеРасшифровки = ПоместитьВоВременноеХранилище(НовыеДанныеРасшифровки, ЭтаФорма.УникальныйИдентификатор);
		
		
	КонецЕсли;
	
	
КонецПроцедуры




#Область Расшифровка

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
			
	СтандартнаяОбработка = Ложь;
	ОбработкаРасшифровки =  Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет));
	
	ДополнительноеМеню = Новый СписокЗначений;
	ДополнительноеМеню.Добавить("Детализация");
	ДополнительноеМеню.Добавить("ПоДням");
	
	Если Элементы.ФормаРедактироватьДанные.Пометка Тогда
		ДополнительноеМеню.Добавить("Редактирование записей");	
		ДополнительноеМеню.Добавить("Транзит");	
	КонецЕсли;
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("РезультатОбработкаРасшифровки_Продолжение", ЭтаФорма, Расшифровка); 
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОповещениеОВыборе, Расшифровка,, ДополнительноеМеню);
	
	
КонецПроцедуры


&НаКлиенте
Процедура РезультатОбработкаРасшифровки_Продолжение(ВыбранноеДействие, ПараметрыВыбранногоДействия, ДополнительныеПараметры) Экспорт

	Если ВыбранноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет
		                                                 И ВыбранноеДействие <> Неопределено Тогда
		Если ВыбранноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			ОткрытьЗначение(ПараметрыВыбранногоДействия);
		ИначеЕсли ВыбранноеДействие = "Редактирование записей" Тогда
			ОтредактироватьДетальныеЗаписи(ПолучитьМассивРасшифровок());
		    //
			П = Новый Структура("АдресДетализации, АдресТаблицыРедактирования", АдресДетализации, АдресТаблицыРедактирования);
			ПослеЗакрытия = Новый ОписаниеОповещения("ОкончаниеРедактирования", ЭтаФорма);
			ОткрытьФорму("ВнешняяОбработка.КорректировкаЗаписейБюджета.Форма.ОсновнаяФормаОбработки", П, ЭтаФорма,,,, ПослеЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		ИначеЕсли ВыбранноеДействие = "Транзит" Тогда	
			ОтредактироватьДетальныеЗаписи(ПолучитьМассивРасшифровок());
		    //
			П = Новый Структура("АдресДетализации, АдресТаблицыРедактирования, Транзит", АдресДетализации, АдресТаблицыРедактирования, ПолучитьМассивВыделенныхЯчеек());
			ПослеЗакрытия = Новый ОписаниеОповещения("ОкончаниеРедактирования", ЭтаФорма);
			ОткрытьФорму("ВнешняяОбработка.КорректировкаЗаписейБюджета.Форма.ОсновнаяФормаОбработки", П, ЭтаФорма,,,, ПослеЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		ИначеЕсли ВыбранноеДействие = "Детализация"
			                        ИЛИ ВыбранноеДействие = "ПоДням" Тогда
			Парам = Новый Структура;
			Парам.Вставить("РежимРедактирования", Элементы.ФормаРедактироватьДанные.Пометка); 
			Парам.Вставить("АдресТаблицыРедактирования", АдресТаблицыРедактирования);
			//
			НовыеНастройкиСКД = ПолучитьНастройкиВыделеннойОбласти(ПолучитьМассивРасшифровок());
			//
			Парам.Вставить("ПользовательскиеНастройки", НовыеНастройкиСКД.ПользовательскиеНастройки); 
			Парам.Вставить("КлючВарианта", ВыбранноеДействие); 			
			ОткрытьФорму("ВнешнийОтчет.Бюджетирование.Форма.ФормаОтчета", Парам, ЭтаФорма, Истина);
		Иначе	
			Парам = Новый Структура;
			Парам.Вставить("РежимРедактирования", Элементы.ФормаРедактироватьДанные.Пометка); 
			Парам.Вставить("АдресТаблицыРедактирования", АдресТаблицыРедактирования);
			Парам.Вставить("Расшифровка", Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ДополнительныеПараметры, ПараметрыВыбранногоДействия));
			ОткрытьФорму("ВнешнийОтчет.Бюджетирование.Форма.ФормаОтчета", Парам, , Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Функция ПолучитьМассивРасшифровок()
	
	Перем ВыделенныеЯчейки, МассивРасшифровок, Ячейка;
	
	ВыделенныеЯчейки = ОбщийМодульКлиент.ПолучениеДанныхОбластиТабличногоДокумента(Результат);
	МассивРасшифровок = Новый Массив;
	Для Каждого Ячейка Из ВыделенныеЯчейки Цикл
		МассивРасшифровок.Добавить(Ячейка.Расшифровка);
	КонецЦикла;
	Возврат МассивРасшифровок;

КонецФункции


&НаСервере
Процедура ОтредактироватьДетальныеЗаписи(МассивРасшифровок)
		
	//Получение детальных записей
	Если НЕ ЭтоАдресВременногоХранилища(АдресДетализации) Тогда
		АдресДетализации = ПоместитьВоВременноеХранилище("", УникальныйИдентификатор);
	КонецЕсли;
	
	
	//Уберём транзитные записи
	НастройкиРедактирования = ПолучитьНастройкиВыделеннойОбласти(МассивРасшифровок);
	Транзит = НастройкиРедактирования.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Транзит.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Транзит");
	Транзит.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	Транзит.ПравоеЗначение = 2;
	
	
	//
	СформироватьОтчётПрограмно(Истина, НастройкиРедактирования, АдресДетализации);
	
	
КонецПроцедуры


//Получение всех отборов выделенной области и сохранение в новом экземпляре КомпоновщикаНастроекКомпоновкиДанных
&НаСервере
Функция ПолучитьНастройкиВыделеннойОбласти(МассивРасшифровок)
	
	
	#Область ИнициализируемКомпоновщикНастроек
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	Схема = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	КомпоновщикНастроекНовый = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекНовый.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	КомпоновщикНастроекНовый.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	#КонецОбласти
	
	
	#Область ДобавимНастройкиВыделенныхЯчеек
	ОбработкаРасшифровки =  Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет));
	
	//ГруппаИЛИ = КомпоновщикНастроекНовый.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ = КомпоновщикНастроекНовый.ПользовательскиеНастройки.Элементы[1].Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	
	Для Каждого Расшифровка Из МассивРасшифровок Цикл
		//
		НастройкиРасшифровки = ОбработкаРасшифровки.Расшифровать(Расшифровка, Новый ПолеКомпоновкиДанных("Орг"));
		
		ГруппаИ = ГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		Для Каждого Отбор Из НастройкиРасшифровки.Отбор.Элементы Цикл
			
			Если ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда	
				//
				Если Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приход") Тогда
					Продолжить;
					
				ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Расход") Тогда
					Продолжить;
				КонецЕсли;	
				//
			КонецЕсли;	
			ЗаполнитьЗначенияСвойств(ГруппаИ.Элементы.Добавить(ТипЗнч(Отбор)), Отбор);
		КонецЦикла;
		//	
	КонецЦикла;	
	#КонецОбласти
	
	
	//
	//Возврат КомпоновщикНастроекНовый.ПолучитьНастройки();
	Возврат КомпоновщикНастроекНовый
	
	
КонецФункции


#КонецОбласти


#Область ДополнительныеФунции

//Переводит выделенные ячейки в массив чисел
&НаКлиенте
Функция ПолучитьМассивВыделенныхЯчеек(Сумма = Ложь)
	
	//
	Попытка
		ВыделенныеЯчейки = ОбщийМодульКлиент.ПолучениеДанныхОбластиТабличногоДокумента(Результат); 	
	Исключение
		Возврат 0;
	КонецПопытки;
	
	
	//
	МассивЧисел = Новый Массив;
	Итог = 0;
	
	Для Каждого Ячейка Из ВыделенныеЯчейки Цикл
		Попытка
			Значение = Число(?(ПустаяСтрока(Ячейка.Текст), 0, Ячейка.Текст));
			МассивЧисел.Добавить(Значение * 1000);
			Итог = Итог + Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;	
	
	
	//
	Если Сумма Тогда
		Возврат Итог;
	Иначе	
		Возврат МассивЧисел;
	КонецЕсли;	
	
	
КонецФункции



//Показывает сумму выделенных ячеек
&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	  Элементы.Итог.Заголовок = Сред(Элементы.Итог.Заголовок, 1, 3) + " " + Строка(ОбщийМодульКлиент.РасчетЯчеек(Результат, Неопределено).Сумма);	
  КонецПроцедуры
  
  
  
//Рекурсивной функцией пропишем идентификатор пользовательской настройки в структуре отчёта  
//Коллекция - структура или таблица, в которых в верхнем уровне надо прописать идентификатор пользовательской настройки
&НаСервереБезКонтекста  
Процедура УстановитьИдентификаторОтборов(Коллекция)

	Для Каждого ЭлементСтруктуры Из Коллекция Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			УстановитьИдентификаторОтборов(ЭлементСтруктуры.Строки);
			УстановитьИдентификаторОтборов(ЭлементСтруктуры.Колонки);
		Иначе
			//
			Если СтрНайти(ЭлементСтруктуры.Имя, "Остаток") = 0 Тогда
				ЭлементСтруктуры.Отбор.ИдентификаторПользовательскойНастройки = "ОтборГруппировкаБазы";
				ЭлементСтруктуры.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	

КонецПроцедуры




#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////ПРОЦЕДУРЫ И ФУНКЦИИ РЕДАКТИРОВАНИЯ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&НаСервереБезКонтекста
Функция ПолучитьТаблицуРедактирования(АдресТаблицыРедактирования, 
	                                         РежимРедактирования,
											 УИД)

	
	Если НЕ ЭтоАдресВременногоХранилища(АдресТаблицыРедактирования) Тогда
		                            		
		ТаблицаРедактирования = Новый ТаблицаЗначений;
		
		
		ТаблицаРедактирования.Колонки.Добавить("День", Новый ОписаниеТипов("Дата", , ,
													   Новый КвалификаторыДаты(ЧастиДаты.Дата)));
													   
		ТаблицаРедактирования.Колонки.Добавить("ОрганизацияSQL", Новый ОписаниеТипов("ВнешнийИсточникДанныхТаблицаСсылка.Бюджетирование.сп_Организация"));
		
		
		ТаблицаРедактирования.Колонки.Добавить("ОрганизацияSQLИНН", Новый ОписаниеТипов("Строка", ,
															  Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
		
		ТаблицаРедактирования.Колонки.Добавить("СтатьяРасхода", Новый ОписаниеТипов("ВнешнийИсточникДанныхТаблицаСсылка.Бюджетирование.сп_СтатьяРасхода"));
		
		
		ТаблицаРедактирования.Колонки.Добавить("Приход", Новый ОписаниеТипов("Число",
														 Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
														 
		ТаблицаРедактирования.Колонки.Добавить("Расход", Новый ОписаниеТипов("Число",
														 Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
														 
		ТаблицаРедактирования.Колонки.Добавить("УИД", Новый ОписаниеТипов("Число",
													  Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));	
													  
		ТаблицаРедактирования.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("Строка", ,
															  Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
															  
		ТаблицаРедактирования.Колонки.Добавить("КонтрагентСвойКонтрагент", Новый ОписаниеТипов("ВнешнийИсточникДанныхТаблицаСсылка.Бюджетирование.сп_Организация"));													  
															  
		
		ТаблицаРедактирования.Колонки.Добавить("Транзит", Новый ОписаниеТипов("Число",
														  Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
														  
		ТаблицаРедактирования.Колонки.Добавить("НетДанных", Новый ОписаниеТипов("Строка", ,
															Новый КвалификаторыСтроки(40, ДопустимаяДлина.Переменная)));
															  
        АдресТаблицыРедактирования = ПоместитьВоВременноеХранилище(ТаблицаРедактирования, УИД);														  
														  
		Возврат ТаблицаРедактирования;														 
		
	Иначе 
		ТаблицаРедактирования = ПолучитьИзВременногоХранилища(АдресТаблицыРедактирования);
		Если НЕ РежимРедактирования 
								  И ТаблицаРедактирования.Количество() > 0 Тогда
		  ТаблицаРедактирования.Очистить();
		  ПоместитьВоВременноеХранилище(ТаблицаРедактирования, АдресТаблицыРедактирования);
		  Возврат ТаблицаРедактирования;
		КонецЕсли;  
		
		Возврат ТаблицаРедактирования; 
		
	КонецЕсли;	

КонецФункции


&НаКлиенте
Процедура РедактироватьДанные(Команда)
	Оповестить("РежимРедактирования",, ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура РедактироватьДанныеОбработчик(Источник)

	Если НЕ Элементы.ФормаРедактироватьДанные.Пометка Тогда
		//
		Если Источник = ЭтаФорма Тогда
			СформироватьОтчётПрограмно(Истина,, АдресТаблицыРедактирования);
		КонецЕсли;
		//
		Элементы.ФормаРедактироватьДанные.Пометка = Истина;
		Элементы.КомпоновщикНастроекПользовательскиеНастройки.Доступность = Ложь;
	Иначе
		Если Модифицированность 
			                 И Источник = ЭтаФорма Тогда
			РешениеОЗаписи = Новый ОписаниеОповещения("РешениеОЗаписи", ЭтаФорма);
			ПоказатьВопрос(РешениеОЗаписи, "Записать изменения в базу данных?", РежимДиалогаВопрос.ДаНетОтмена,,, "Выход из редактирования");
		Иначе
			ВыходИзРедактирования();
		КонецЕсли;
	КонецЕсли;


КонецПроцедуры


&НаКлиенте
Процедура ОкончаниеРедактирования(ПараметрЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не Модифицированность И ТипЗнч(ПараметрЗакрытия) = Тип("Булево") Тогда
		Модифицированность = ПараметрЗакрытия;
	КонецЕсли;	  
	
	
	Если Модифицированность И 
		                      ВладелецФормы <> Неопределено Тогда
		ВладелецФормы.Модифицированность = Модифицированность;
	КонецЕсли;	
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ВыходИзРедактирования();
	
	Элементы.КомпоновщикНастроекПользовательскиеНастройки.Доступность = Истина;
	Элементы.ФормаРедактироватьДанные.Пометка = Ложь;
	Модифицированность = Ложь;
	
КонецПроцедуры	


&НаКлиенте
Процедура НастроитьТабличныйДокумент()
		
	Результат.ФиксацияСлева = 2;
	
	//Если "Режим редактирования"
	Если Элементы.ФормаРедактироватьДанные.Пометка Тогда
		Возврат;
	КонецЕсли;	

	
	//Строки
	КоличествоУровней = Результат.КоличествоУровнейГруппировокСтрок();
	Для Уровень = 1 По КоличествоУровней - Мин(КоличествоУровней - 1, 2 - 1)  Цикл
		Результат.ПоказатьУровеньГруппировокСтрок(КоличествоУровней - Уровень);
	КонецЦикла;
	
	
	//Колонки
	Результат.ПоказатьУровеньГруппировокКолонок(0);
	
	
КонецПроцедуры	


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#Область РаботаСLoginom

&НаКлиенте
Процедура РешениеОЗаписи(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда	
		ВыходИзРедактирования();
	Иначе
		Ошибки = Неопределено;
		ЗаписатьДанныеВБазуСервер(АдресТаблицыРедактирования, Ошибки);
		Если Ошибки = Неопределено Тогда
			ПоказатьОповещениеПользователя("Данные успешно записаны!!!!!");
			ВыходИзРедактирования();
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		КонецЕсли;  
	КонецЕсли;	
	

КонецПроцедуры


&НаСервереБезКонтекста
Процедура ЗаписатьДанныеВБазуСервер(АдресТаблицыРедактирования, Ошибки)

	//Получим массив структур модифицированных записей
	МассивСтруктур = ПреобразоватьТЗвМассивСтруктур(АдресТаблицыРедактирования);
	
	Если МассивСтруктур = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,, "Нет данных для редактирования!!!!!");
		Возврат;
	КонецЕсли;	
	
	
	//Преобразуем массив структур в строку JSON
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписатьJSON(ЗаписьJSON, МассивСтруктур, НастройкиСериализацииJSON, "ПреобразованиеJSON", Расш1_Бюджетирование);
	
	
	//Вызовем HTTP-сервис Loginom
	Попытка
		Соединение = Новый HTTPСоединение("main-ts02");
	Исключение
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,, ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Запрос = Новый HTTPЗапрос("/lgi/Service.svc/Rest/ДДС/ModifyDDS");
	Запрос.Заголовки.Вставить("Content-type", "application/json");
	Запрос.УстановитьТелоИзСтроки(ЗаписьJson.Закрыть());
	
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,, ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если Ответ.КодСостояния <> 200 Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,, Ответ.ПолучитьТелоКакСтроку());
		Возврат;
	КонецЕсли;	
			
		
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПреобразоватьТЗвМассивСтруктур(АдресТаблицыРедактирования)

  ТЗ_исх = ПолучитьИзВременногоХранилища(АдресТаблицыРедактирования);
  ТЗ_мод = ТЗ_исх.Скопировать(Новый Структура("Модифицировано", Истина)); 
  
  Если ТЗ_Мод.Количество() = 0 Тогда
	  Возврат Неопределено;
  КонецЕсли;	
  
  МассивДанных = Новый Массив;
  Для Каждого Строка Из ТЗ_мод Цикл
	  СтруктураКолонок = Новый Структура;
	  //
	  СтруктураКолонок.Вставить("Day", Строка.День);
	  СтруктураКолонок.Вставить("Guid", Строка.УИД);
	  СтруктураКолонок.Вставить("OrgID", Строка.ОрганизацияSQL.ID);
	  СтруктураКолонок.Вставить("CostID", Строка.СтатьяРасхода.ID);
	  СтруктураКолонок.Вставить("In", Строка.Приход);
	  СтруктураКолонок.Вставить("Out", Строка.Расход);
	  СтруктураКолонок.Вставить("Partner", Строка.Контрагент);
	  //
	  МассивДанных.Добавить(СтруктураКолонок);
  КонецЦикла;	
  
  
  //
  СтруктураRows = Новый Структура("Rows", МассивДанных);
  СтруктураDataSet = Новый Структура("DataSet", СтруктураRows);
  
  
  Возврат СтруктураDataSet;
  
  
КонецФункции



#КонецОбласти
