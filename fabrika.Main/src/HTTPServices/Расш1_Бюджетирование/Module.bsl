
Функция ПолучениеДанныхПолучить(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	
	//
	ЧтениеJson = Новый ЧтениеJSON;
	ЧтениеJson.УстановитьСтроку(Запрос.ПолучитьТелоКакСтроку());          	
	
	СвойстваТипаДата = Новый Массив;
	
	
	ЕстьДаты = Запрос.Заголовки.Получить("TypeDate");
	Если ЕстьДаты <> Неопределено Тогда
		СвойстваТипаДата = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЕстьДаты, ",");
	КонецЕсли;
	
	
	ЗаписьВДО = Запрос.Заголовки.Получить("PlanNumber");	
	
	
	Попытка
		ПараметрыЗапроса = ПрочитатьJSON(ЧтениеJson,, СвойстваТипаДата, ФорматДатыJSON.ISO);
		Если ЗаписьВДО = Неопределено Тогда
			ПреобразоватьВJSON(ПолучитьДанныеБазыПоЗапросу(ПараметрыЗапроса, ПолучитьПодлючениеКДО()), Ответ);
		Иначе
			ЗаписатьДанныеВДО(ПараметрыЗапроса, ЗаписьВДО, ПолучитьПодлючениеКДО());
		КонецЕсли;  
	Исключение
		Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки());
		Ответ.КодСостояния = 500;
	КонецПопытки;  

	Возврат Ответ;
	
	
 КонецФункции
 
 
Функция ПолучитьДанныеБазыПоЗапросу(ПараметрыЗапроса, АдресСтруктурыПодключений)

	
	//Получим данные по запросу
	МассивДанных = Новый Массив;
	
	Подключения = ПолучитьИзВременногоХранилища(АдресСтруктурыПодключений);
	До = Подключения.Представительства.Подключение;
	
	
	Запрос = До.NewObject("Запрос");
    Запрос.Текст = ПараметрыЗапроса.ТекстЗапроса;
	ПараметрыЗапроса.Удалить("ТекстЗапроса");
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;	
		
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ИменаКолонок = "";
	Для Каждого Колонка ИЗ РезультатЗапроса.Колонки Цикл
		ИменаКолонок = ИменаКолонок + "," + Колонка.Имя;
	КонецЦикла;	
	
	ВыборкаСтрок = РезультатЗапроса.Выбрать();		
	
	Пока ВыборкаСтрок.Следующий() Цикл
		СтруктураКолонок = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(СтруктураКолонок, ВыборкаСтрок);
		МассивДанных.Добавить(СтруктураКолонок);
	КонецЦикла;	
	
	
	//
	Возврат МассивДанных;
	
	

КонецФункции


Процедура ПреобразоватьВJSON(Данные, Ответ)

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализацииJSON, "ПреобразованиеJSON", Расш1_Бюджетирование);
	Ответ.УстановитьТелоИзСтроки(ЗаписьJson.Закрыть());	

КонецПроцедуры


#Область ЗаписьВДо

Процедура ЗаписатьДанныеВДО(Данные, НомерДокумента, АдресСтруктурыПодключений)
	
	//Получим подключение к базе
	Подключения = ПолучитьИзВременногоХранилища(АдресСтруктурыПодключений);
	До = Подключения.Представительства.Подключение;
	
	
	#Область Данные
	ТЗданные = Новый ТаблицаЗначений;
	ТЗданные.Колонки.Добавить("Org", Новый ОписаниеТипов("Строка", ,
									 Новый КвалификаторыСтроки(40, ДопустимаяДлина.Переменная)));
	ТЗданные.Колонки.Добавить("Kontr", Новый ОписаниеТипов("Строка", ,
									   Новый КвалификаторыСтроки(40, ДопустимаяДлина.Переменная)));
	ТЗданные.Колонки.Добавить("Statya", Новый ОписаниеТипов("Число",
										Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗданные.Колонки.Добавить("Nazn", Новый ОписаниеТипов("Строка", ,
									   Новый КвалификаторыСтроки(40, ДопустимаяДлина.Переменная)));									
	ТЗданные.Колонки.Добавить("Date", Новый ОписаниеТипов("Дата", , ,
									  Новый КвалификаторыДаты(ЧастиДаты.Дата)));								   
	ТЗданные.Колонки.Добавить("Sum", Новый ОписаниеТипов("Число",
									 Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));								  
									 
    Для Каждого Строка Из Данные Цикл
	  ЗаполнитьЗначенияСвойств(ТЗданные.Добавить(), Строка);
	КонецЦикла;  
										 
									 
    ЗапросВТ = До.NewObject("Запрос");
	ЗапросВТ.МенеджерВременныхТаблиц = До.NewObject("МенеджерВременныхТаблиц");
	ЗапросВТ.Текст = "ВЫБРАТЬ * 
	                |ПОМЕСТИТЬ ВТ_Данные
	                |ИЗ &ТЗДанные КАК Данные";
	
	ЗапросВТ.УстановитьПараметр("ТЗДанные", До.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(ТЗданные)));
	ЗапросВТ.Выполнить();
	#КонецОбласти
									 
	
	//Получим нужный документ(план) запросом
	Запрос = До.NewObject("Запрос");
	Запрос.Текст =  "ВЫБРАТЬ
					|	ПланПлатежей.Ссылка КАК План
					|ИЗ
					|	Документ.ПланПлатежей КАК ПланПлатежей
					|ГДЕ
					|	ПланПлатежей.ПометкаУдаления = ЛОЖЬ
					|	И ПланПлатежей.Номер = &Номер
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Организации.Ссылка КАК Организация,
					|	Контрагенты.Ссылка КАК Контрагент,
					|	СтатьяРасхода.Ссылка КАК СтатьяРасхода,
					|	ВТ_Данные.Date КАК ПлановаяДатаПлатежа,
					|	ВТ_Данные.Nazn КАК НазначениеПлатежа,
					|	ВТ_Данные.Sum КАК Сумма
					|ИЗ
					|	ВТ_Данные КАК ВТ_Данные
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Корреспонденты КАК Контрагенты
					|		ПО ВТ_Данные.Kontr = Контрагенты.Код
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЮридическоеЛицо КАК Организации
					|		ПО ВТ_Данные.Org = Организации.Код
	                |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиЗатрат КАК СтатьяРасхода
					|		ПО ВТ_Данные.Statya = СтатьяРасхода.Код";

	
	
	Запрос.УстановитьПараметр("Номер", НомерДокумента);
	Запрос.МенеджерВременныхТаблиц = ЗапросВТ.МенеджерВременныхТаблиц;
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат.Get(0).Пустой() Тогда
		ВызватьИсключение "Нет такого документа";
	КонецЕсли;
	
	ВыборкаДокумент = Результат.Get(0).Выбрать();
	ВыборкаДокумент.Следующий();
	//
	Документ = ВыборкаДокумент.План.ПолучитьОбъект();
	Документ.Заблокировать();
	//
	ВыборкаДанные = Результат.Get(1).Выбрать();
	Пока ВыборкаДанные.Следующий() Цикл
	  ЗаполнитьЗначенияСвойств(Документ.Платежи.Добавить(), ВыборкаДанные);
	КонецЦикла;  
	//
	Документ.Записать();
	
КонецПроцедуры
	



#КонецОбласти


#Область ДополнительныеФункции

Функция ПолучитьПодлючениеКДО()
	
	//Сделаем COM соединения базы
	СтрутураПодключений = Новый Структура;
	АдресСтруктурыПодключений = ПоместитьВоВременноеХранилище(СтрутураПодключений);
	
	Отказ = Ложь;
	ПодключениеКВнешнимИБ.ПроверкаПодключения(Перечисления.ТипОрганизации.Представительства, АдресСтруктурыПодключений, Отказ);
	
	Если Отказ Тогда
		ВызватьИсключение "Ошибка подключения базы!!!";
	КонецЕсли;
	
	Возврат АдресСтруктурыПодключений;
	
	
КонецФункции
  



#КонецОбласти