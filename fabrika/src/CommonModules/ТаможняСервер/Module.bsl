////////////////Модуль содержит процедуры и функции, которые используются в ПОДСИСТЕМЕ ТАМОЖНЯ/////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////




//////////////////////////////////////ОБНОВЛЕНИЕ ДАННЫХ ПО ПРИХОДУ МАШИН////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Обновляем из Торговли данные по машинам. (данные документа "Заявка на машину").
//В процедуру передаётся:
// -адрес структуры подключений внешних баз
// -массив документов для обработки
Процедура ЗагрузкаДанных(АдресСтруктурыПодключений, СписокДокументов) Экспорт 
	Перем Перемещения;
	
	ТЗ = ПолучитьТЗдляЗапроса(СписокДокументов);
	
	Торговля = ПолучитьДанныеТорговли(АдресСтруктурыПодключений, ТЗ);
	
	Глоссаб = ПолучитьДанныеГлоссаб(ТЗ);
	
	
	Машины = Глоссаб.Машины.Скопировать();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Торговля.Машины, Машины);
	
	Перемещения = Торговля.Перемещения;
		
		
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	ЕстьДанные = Новый Массив;
	
	Для Каждого запись из Машины Цикл
		
		Индекс = запись.НомерДокумента;
		Документ = СписокДокументов[Индекс];
		
		ЕстьДанные.Добавить(Документ);
		
		
		////Дима 10.08.2015 11:10:41////Подставим дату прихода из ПТУ
		Результат = Торговля.ДатыПрихода.Найти(запись.НомерДокумента);
		ДатаПриходаНаСклад = ?(Результат = Неопределено, запись.ДатаПрихода, Результат.ДатаПрихода);
		//конец Дима		
		
		
		Модифицированность = Ложь;
		ПриходМашины = ПолучитьПриходМашиныНаОснованииЗаявки(Документ.Ссылка);
		
		
		Если Документ.НомерГТД <> запись.ГТД Тогда
			Документ = ?(ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Документ)), Документ.ПолучитьОбъект(), Документ); 
			Документ.НомерГТД = запись.ГТД;
		КонецЕсли;
		
		Если Документ.ДатаПрихода <> запись.ДатаПрихода И запись.ДатаПрихода <> Дата(1, 1, 1) Тогда
			Документ = ?(ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Документ)), Документ.ПолучитьОбъект(), Документ);
			Документ.ДатаПрихода = запись.ДатаПрихода;
		КонецЕсли;
		
		Если ПриходМашины.Дата <> ДатаПриходаНаСклад Тогда
			Модифицированность = Истина;
		КонецЕсли;	
		
		Если СокрЛП(ПриходМашины.Поставщик.ИНН) <> СокрЛП(запись.Экспортёр) Тогда
			Модифицированность = Истина;
		КонецЕсли;	
				
		ВалютнаяСтоимость = Окр(запись.ВалСтоимость, 2);
		Если Документ.ВалютнаяСтоимость <> ВалютнаяСтоимость Тогда
			Документ = ?(ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Документ)), Документ.ПолучитьОбъект(), Документ);
			Документ.ВалютнаяСтоимость = ВалютнаяСтоимость;
		КонецЕсли;	
		
		
		ТаможенныйПлатёж = Окр(запись.ТаможенныйПлатёж, 2);
		Если Документ.СуммаТамПлат <> ТаможенныйПлатёж Тогда
			
			Документ = ?(ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Документ)), Документ.ПолучитьОбъект(), Документ);
						
			Если ЗначениеЗаполнено(Документ.Валюта) Тогда
				Документ.ТаможенныйПлатёж = ТаможенныйПлатёж / запись.КурсГТД;
			Иначе
				Документ.ТаможенныйПлатёж = ТаможенныйПлатёж;
			КонецЕсли;	  
			
			Документ.СуммаТамПлат = ТаможенныйПлатёж;
			
		КонецЕсли;
		
        
        ИспользоватьРаспределениеПоПокупателям = ПолучитьФункциональнуюОпцию("ИспользоватьРаспределениеПоПокупателям");
        ТЗ_распределение = Новый ТаблицаЗначений;
        //        
        Если ИспользоватьРаспределениеПоПокупателям Тогда
            ТЗ_распределение = Перемещения.Скопировать(Новый Структура("НомерДокумента", запись.НомерДокумента));
            ТЧ_распределение = ПриходМашины.РаспределениеПоПокупателям.Итог("Сумма");
            
            Если ТЧ_распределение <> ТЗ_распределение.Итог("Сумма")
                И ТЗ_распределение.Итог("Сумма") > 0 Тогда
                Модифицированность = Истина;                
            КонецЕсли;	
        КонецЕсли;    
                    
		
		//Запишем заявку
		Если НЕ ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Документ)) Тогда
			
			Модифицированность = Истина;
			Попытка
				Документ.Записать(РежимЗаписиДокумента.Проведение);
				ОбщийМодульСервер.ДобавитьСоообщениеВмассив(Документ, "Записано!!!");
			Исключение
				ОбщийМодульСервер.ДобавитьСоообщениеВмассив(Документ, ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
		//Запишем приход
		Если Модифицированность ИЛИ НЕ ПриходМашины.Проведен Тогда
			ЗаполнитьПриходНаОснованииЗаявки(Документ, ПриходМашины, запись, ТЗ_распределение, ДатаПриходаНаСклад);
		КонецЕсли;	
		
			
	КонецЦикла;
	
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	
	
	ВосстановитьОтсутствующиеЗаявки(СписокДокументов, ЕстьДанные);
	
	
КонецПроцедуры



//На основе пришедших машин создаём документы. 
Процедура ЗаполнитьПриходНаОснованииЗаявки(Основание, ПриходМашины, ДанныеИзТорговли, ТаблицаПеремещений, ДатаПриходаНаСклад) Экспорт 
	
	ПриходМашины = ?(ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПриходМашины)), ПриходМашины.ПолучитьОбъект(), ПриходМашины);
	
	//Заполним данные на основании
	ПриходМашины.Заполнить(Основание.Ссылка);
	ПриходМашины.Дата = ДатаПриходаНаСклад;
	ПриходМашины.ТаможенныйПлатёж = Основание.СуммаТамПлат;
	ПриходМашины.ДатаИнвойса = ДанныеИзТорговли.ДатаИнвойса;
	ПриходМашины.КурсГТД = ДанныеИзТорговли.КурсГТД;       	
		
	
	//Заполним контрагента и договор
	ПриходМашины.Поставщик = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ДанныеИзТорговли.Экспортёр);
	ПриходМашины.ЗаполнитьДоговорПоУмолчанию();
	
	
	
	//Посчитаем сумму машины
	ПриходМашины.РассчитатьИтоговуюСумму();
	
	////Дима 09.06.2015 12:09:31////Заполним табличную часть "Распределение по покупателям"
	ПриходМашины.РаспределениеПоПокупателям.Очистить();
	
	Если ТаблицаПеремещений.Количество() > 0
		                                  И ПриходМашины.ВидМашины <> Перечисления.ВидМашины.Контейнер Тогда
		
		Для Каждого строка из ТаблицаПеремещений Цикл
			запись = ПриходМашины.РаспределениеПоПокупателям.Добавить();
			запись.Покупатель = Справочники.Контрагенты.НайтиПоРеквизиту("Инн", строка.ПокупательИНН);
			запись.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН", строка.ОтправительИНН);
			
			//
			ВладелецДоговора = Справочники.Контрагенты.НайтиПоРеквизиту("Инн", строка.ОтправительИНН);
			запись.Договор = Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер", строка.ДоговорНомер,, ВладелецДоговора);
			//
			
			запись.ДатаПеремещения = строка.ДатаПеремещения;
			
			запись.Сумма = строка.Сумма;
			запись.ТорговляНаименование = строка.ПокупательНаименование;
			
			//
			Если запись.Договор.ВидДоговора = Перечисления.ВидДоговораКонтрагента.Комиссия Тогда
				ПриходМашины.РаспределениеПоПокупателям.Удалить(запись);
			КонецЕсли;
			//
			
		КонецЦикла;	
		
	КонецЕсли;	
	//конец Дима
	
	
	////Дима 17.07.2018 16:50:12////Проверим заполнение обязательных реквизитов
	ПриходМашины.ПроверитьЗаполнение();		
			
		
	//конец Дима
	
	
	
	//Запишем документ
	Попытка
		ПриходМашины.Записать(РежимЗаписиДокумента.Проведение);
		ОбщийМодульСервер.ДобавитьСоообщениеВмассив(ПриходМашины, "Записано!!!");
	Исключение
		ОбщийМодульСервер.ДобавитьСоообщениеВмассив(, ОписаниеОшибки());
	КонецПопытки;
	
							
КонецПроцедуры


//Получить приход на основании заявки
Функция ПолучитьПриходМашиныНаОснованииЗаявки(Основание)

	//Проверим существование документа "Приход машины"
	//Если нет прихода, то создадим его на основании заявки
	Массив = КритерииОтбора.СвязанныеДокументы.Найти(Основание);
	
	Если Массив.Количество() = 0 Тогда
		ПриходМашины = Документы.ПриходМашины.СоздатьДокумент();
				
	Иначе
		ПриходМашины = Массив[0];
		
		Для Счетчик = 0 по Массив.Количество() - 1 Цикл
			
			Критерий = ?(Счетчик = 0, Истина, Ложь);
			
			Если Массив[Счетчик].ПометкаУдаления = Критерий Тогда
				Массив[Счетчик].ПолучитьОбъект().УстановитьПометкуУдаления(НЕ Критерий);  
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
		
	Возврат ПриходМашины;
	

КонецФункции



Процедура ВосстановитьОтсутствующиеЗаявки(СписокДокументов, ЕстьДанные)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СписокДокументов.Ссылка
	               |ПОМЕСТИТЬ ВТ_Заявки
	               |ИЗ
	               |	Документ.ЗаявкаНаМашину КАК СписокДокументов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ЗаявкаНаМашину.Ссылка КАК Ссылка
	               |		ИЗ
	               |			Документ.ЗаявкаНаМашину КАК ЗаявкаНаМашину
	               |		ГДЕ
	               |			ЗаявкаНаМашину.Ссылка В(&ЕстьДанные)) КАК ЕстьДанные
	               |		ПО СписокДокументов.Ссылка = ЕстьДанные.Ссылка
	               |ГДЕ
	               |	СписокДокументов.Ссылка В(&СписокДокументов)
	               |	И СписокДокументов.ВалютнаяСтоимость > 0
	               |	И ЕстьДанные.Ссылка ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Заявки.Ссылка
	               |ИЗ
	               |	ВТ_Заявки КАК ВТ_Заявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПриходМашины.Ссылка
	               |ИЗ
	               |	Документ.ПриходМашины КАК ПриходМашины
	               |ГДЕ
	               |	ПриходМашины.ДокументОснование В
	               |			(ВЫБРАТЬ
	               |				ВТ_Заявки.Ссылка
	               |			ИЗ
	               |				ВТ_Заявки КАК ВТ_Заявки)";
				   
				   
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("ЕстьДанные", ЕстьДанные);
				   
	Пакет = Запрос.ВыполнитьПакет();
	
	
	//Заявки
	Выборка = Пакет[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Информация = ВерсионированиеОбъектов.СведенияОВерсииОбъекта(Выборка.Ссылка, 1);
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Информация.ВерсияОбъекта);
		
		ТекстСообщенияОбОшибке = "";
		Объект = ВерсионированиеОбъектов.ВосстановитьОбъектПоXML(АдресВоВременномХранилище, ТекстСообщенияОбОшибке);
		
		Если Не ПустаяСтрока(ТекстСообщенияОбОшибке) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
		КонецЕсли;
		
		Объект.ДополнительныеСвойства.Вставить("ВерсионированиеОбъектовКомментарийКВерсии",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполнен переход к версии №%1 от %2'"),
		Строка(1),
		Формат(Информация.ДатаВерсии, "ДЛФ=DT")) );
		
		Объект.Записать();
		
	КонецЦикла;


	
    //Приходы
	Выборка = Пакет[2].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Документ = Выборка.Ссылка.ПолучитьОбъект();
		Документ.УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
	
	
КонецПроцедуры


//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
Функция ПолучитьДанныеТорговли(АдресСтруктурыПодключений, ТЗ)

	СтруктураПодключений = ПолучитьИзВременногоХранилища(АдресСтруктурыПодключений);
	
	ДанныеПодключения = Неопределено;
	СтруктураПодключений.Свойство(Перечисления.ТипОрганизации.Торговля, ДанныеПодключения);
	
	Запрос = ДанныеПодключения.Подключение.NewObject("Запрос");
	
	Запрос.Текст = "ВЫБРАТЬ
				|	ТЗ.Год,
				|	ТЗ.НомерДокумента,
				|	ТЗ.НомерМашины,
				|	ТЗ.Организация,
				|	ТЗ.ТипОрганизации,
				|   ТЗ.ВалютныйРасчёт 
				|ПОМЕСТИТЬ ТЗ_отбор
				|ИЗ
				|	&ТЗ КАК ТЗ
				|ГДЕ
				|   ТЗ.ТипОрганизации = ""Россия""
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВложенныйЗапрос.НомерДокумента,
				|	ВложенныйЗапрос.ГТД,
				|	ВложенныйЗапрос.ДатаПрихода,
				|	ВложенныйЗапрос.КурсГТД,
				|	ВложенныйЗапрос.ВалСтоимость,
				|   ВложенныйЗапрос.ДатаИнвойса,
				|	ВложенныйЗапрос.ТП + ВложенныйЗапрос.НДС + ВложенныйЗапрос.ТС КАК ТаможенныйПлатёж,
				|   ""ExternalProvider"" КАК Экспортёр,
				|   ""Торговля"" КАК База
				|ИЗ
				|	(ВЫБРАТЬ
				|		МАКСИМУМ(НомераГТДПозицияГТД.Ссылка.ТаможенныйСбор) КАК ТС,
				|		СУММА(НомераГТДПозицияГТД.ТаможенныйПлатеж) КАК ТП,
				|		СУММА(НомераГТДПозицияГТД.НДСпоГТД) КАК НДС,
				|		СУММА(НомераГТДПозицияГТД.СуммаПозиции) КАК ВалСтоимость,
				|       НомераГТДПозицияГТД.Ссылка.Наименование КАК ГТД,
				|		НомераГТДПозицияГТД.Ссылка.КурсГТД КАК КурсГТД,
				|		ТЗ_отбор.НомерДокумента КАК НомерДокумента,
				|		НомераГТДПозицияГТД.Ссылка.ДатаВыпускаМашиныСТаможни КАК ДатаПрихода,
				|       НомераГТДПозицияГТД.Ссылка.ДатаИнвойса КАК ДатаИнвойса
				       				|
				|	ИЗ
				|		Справочник.НомераГТД.ПозицияГТД КАК НомераГТДПозицияГТД
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_отбор КАК ТЗ_отбор
				|			ПО НомераГТДПозицияГТД.Ссылка.НомерМашины = ТЗ_отбор.НомерМашины
				|				И (ГОД(НомераГТДПозицияГТД.Ссылка.Дата) = ТЗ_отбор.Год)
				|	ГДЕ
				|		НомераГТДПозицияГТД.Ссылка.ПометкаУдаления = ЛОЖЬ
				|       И ТЗ_отбор.ВалютныйРасчёт = ЛОЖЬ
				|	
				|	СГРУППИРОВАТЬ ПО
				|       НомераГТДПозицияГТД.Ссылка.Наименование,
				|		НомераГТДПозицияГТД.Ссылка.КурсГТД,
				|		ТЗ_отбор.НомерДокумента,
				|		НомераГТДПозицияГТД.Ссылка.ДатаВыпускаМашиныСТаможни,
				|       НомераГТДПозицияГТД.Ссылка.ДатаИнвойса) КАК ВложенныйЗапрос
				|;

				
				
				//Перемещения
				//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТЗ_отбор.НомерДокумента,
				|	ОрганизацииСкладаСрезПоследнихПолучатель.Организация.ИНН КАК ПокупательИНН,
				|	ОрганизацииСкладаСрезПоследнихПолучатель.Организация.Наименование КАК ПокупательНаименование,
				|	ПеремещениеТоваровОперации.ДоговорКонтрагента.Номер КАК ДоговорНомер,
				|	СУММА(ПеремещениеТоваровОперации.Сумма) КАК Сумма,
				|	ОрганизацииСкладаСрезПоследнихОтправитель.Организация.ИНН КАК ОтправительИНН,
				|	ПеремещениеТоваровОперации.Дата КАК ДатаПеремещения
				|ИЗ
				|	Документ.ПеремещениеТоваров.Операции КАК ПеремещениеТоваровОперации
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_отбор КАК ТЗ_отбор
				|		ПО (ГОД(ПеремещениеТоваровОперации.Ссылка.Дата) = ТЗ_отбор.Год)
				|			И (ВЫБОР
				|				КОГДА ПОДСТРОКА(""0123456789"", 1 + (ВЫРАЗИТЬ(ТЗ_отбор.НомерМашины / 100 - 0.5 КАК ЧИСЛО(14, 0))) - (ВЫРАЗИТЬ(ТЗ_отбор.НомерМашины / 1000 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1) <> ""0""
				|					ТОГДА ПОДСТРОКА(""0123456789"", 1 + (ВЫРАЗИТЬ(ПеремещениеТоваровОперации.Ссылка.НомерМашины / 100 - 0.5 КАК ЧИСЛО(14, 0))) - (ВЫРАЗИТЬ(ПеремещениеТоваровОперации.Ссылка.НомерМашины / 1000 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1)
				|				ИНАЧЕ """"
				|			КОНЕЦ + ПОДСТРОКА(""0123456789"", 1 + (ВЫРАЗИТЬ(ПеремещениеТоваровОперации.Ссылка.НомерМашины / 10 - 0.5 КАК ЧИСЛО(14, 0))) - (ВЫРАЗИТЬ(ПеремещениеТоваровОперации.Ссылка.НомерМашины / 100 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1) + ПОДСТРОКА(""0123456789"", 1 + (ВЫРАЗИТЬ(ПеремещениеТоваровОперации.Ссылка.НомерМашины / 1 - 0.5 КАК ЧИСЛО(14, 0))) - (ВЫРАЗИТЬ(ПеремещениеТоваровОперации.Ссылка.НомерМашины / 10 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1) = ВЫБОР
				|				КОГДА ПОДСТРОКА(""0123456789"", 1 + (ВЫРАЗИТЬ(ТЗ_отбор.НомерМашины / 100 - 0.5 КАК ЧИСЛО(14, 0))) - (ВЫРАЗИТЬ(ТЗ_отбор.НомерМашины / 1000 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1) <> ""0""
				|					ТОГДА ПОДСТРОКА(""0123456789"", 1 + (ВЫРАЗИТЬ(ТЗ_отбор.НомерМашины / 100 - 0.5 КАК ЧИСЛО(14, 0))) - (ВЫРАЗИТЬ(ТЗ_отбор.НомерМашины / 1000 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1)
				|				ИНАЧЕ """"
				|			КОНЕЦ + ПОДСТРОКА(""0123456789"", 1 + (ВЫРАЗИТЬ(ТЗ_отбор.НомерМашины / 10 - 0.5 КАК ЧИСЛО(14, 0))) - (ВЫРАЗИТЬ(ТЗ_отбор.НомерМашины / 100 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1) + ПОДСТРОКА(""0123456789"", 1 + (ВЫРАЗИТЬ(ТЗ_отбор.НомерМашины / 1 - 0.5 КАК ЧИСЛО(14, 0))) - (ВЫРАЗИТЬ(ТЗ_отбор.НомерМашины / 10 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1))
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииСклада.СрезПоследних КАК ОрганизацииСкладаСрезПоследнихПолучатель
				|		ПО ПеремещениеТоваровОперации.Ссылка.СкладПолучатель = ОрганизацииСкладаСрезПоследнихПолучатель.Склад
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииСклада.СрезПоследних КАК ОрганизацииСкладаСрезПоследнихОтправитель
				|		ПО ПеремещениеТоваровОперации.Ссылка.СкладОтправитель = ОрганизацииСкладаСрезПоследнихОтправитель.Склад
				|ГДЕ
				|	ПеремещениеТоваровОперации.Ссылка.Проведен = ИСТИНА
				|	И ОрганизацииСкладаСрезПоследнихПолучатель.Организация = ПеремещениеТоваровОперации.Организация
				|
				|СГРУППИРОВАТЬ ПО
				|	ТЗ_отбор.НомерДокумента,
				|	ОрганизацииСкладаСрезПоследнихПолучатель.Организация.ИНН,
				|	ОрганизацииСкладаСрезПоследнихПолучатель.Организация.Наименование,
				|	ПеремещениеТоваровОперации.ДоговорКонтрагента.Номер,
				|	ОрганизацииСкладаСрезПоследнихОтправитель.Организация.ИНН,
				|	ПеремещениеТоваровОперации.Дата
				|;
				
				
				
				//Даты прихода
				//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТЗ_отбор.НомерДокумента,
				|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.Дата, ДЕНЬ)) КАК ДатаПрихода
				|ИЗ
				|	ТЗ_отбор КАК ТЗ_отбор
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
				|		ПО ТЗ_отбор.НомерМашины = ПоступлениеТоваровУслуг.НомерМашины
				|			И (ТЗ_отбор.Год = ГОД(ПоступлениеТоваровУслуг.Дата))
				|ГДЕ
				|	ПоступлениеТоваровУслуг.Проведен = ИСТИНА
				|	И ПоступлениеТоваровУслуг.ПометкаУдаления = ЛОЖЬ

				|СГРУППИРОВАТЬ ПО
				|	ТЗ_отбор.НомерДокумента";
												
				
				
	ТЗkom = ДанныеПодключения.Подключение.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(ТЗ));

	Запрос.УстановитьПараметр("ТЗ", ТЗkom);
	
	
	////Дима 08.06.2015 18:10:17////Преобразуем массив запросов внешней базы
	ПакетЗапросовТорговля = Запрос.ВыполнитьПакет();
	ПакетЗапросовБаза = ЗначениеИзСтрокиВнутр(ДанныеПодключения.Подключение.ЗначениеВСтрокуВнутр(ПакетЗапросовТорговля));
	//конец Дима
	
	
	////Дима 09.06.2015 11:37:47////Получаем ТЗ перемещений товаров
	ТЗ_машины = ПакетЗапросовБаза[1].Выгрузить();
	ТЗ_перемещения = ПакетЗапросовБаза[2].Выгрузить();
	ТЗ_ДатыПрихода = ПакетЗапросовБаза[3].Выгрузить();
	//конец Дима
	
	
	возврат Новый Структура("Машины, Перемещения, ДатыПрихода", ТЗ_машины, ТЗ_перемещения, ТЗ_ДатыПрихода);	

КонецФункции

Функция ПолучитьДанныеГлоссаб(ТЗ)

  Запрос = Новый Запрос;
  
  Запрос.Текст = "ВЫБРАТЬ
                 |	ТЗ.Год,
                 |	ТЗ.НомерДокумента,
                 |	ТЗ.НомерМашины,
                 |	ТЗ.ТипОрганизации,
                 |	ТЗ.ВидМашины
                 |ПОМЕСТИТЬ ВнешнийИсточникДанных.SqlLolita.ВременнаяТаблица.ТЗ_отбор
                 |ИЗ
                 |	&ТЗ КАК ТЗ
                 |ГДЕ
                 |	ТЗ.ТипОрганизации = ""Глоссаб""
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |	SqlLolitaВременнаяТаблицаТЗ_отбор.НомерДокумента,
                 |	ГлоссабМашины.Гтд,
                 |	ГлоссабМашины.Дата КАК ДатаПрихода,
                 |	ГлоссабМашины.КурсГТД,
                 |	ГлоссабМашины.ВалютнаяСумма КАК ВалСтоимость,
                 |	ГлоссабМашины.ТаможенныйПлатёж,
                 |	ГлоссабМашины.ДатаИнвойса КАК ДатаИнвойса,
                 |	ГлоссабМашины.Экспортёр,
                 |	""Глоссаб"" КАК База
                 |ИЗ
                 |	ВнешнийИсточникДанных.SqlLolita.ВременнаяТаблица.ТЗ_отбор КАК SqlLolitaВременнаяТаблицаТЗ_отбор
                 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.SqlLolita.Таблица.ГлоссабМашины КАК ГлоссабМашины
                 |		ПО SqlLolitaВременнаяТаблицаТЗ_отбор.НомерМашины = ГлоссабМашины.НомерМашины
                 |			И (SqlLolitaВременнаяТаблицаТЗ_отбор.Год = ГОД(ГлоссабМашины.Дата))
                 |			И SqlLolitaВременнаяТаблицаТЗ_отбор.ВидМашины = ГлоссабМашины.ВидМашины
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |	SqlLolitaВременнаяТаблицаТЗ_отбор.НомерДокумента,
                 |	ГлоссабПеремещение.ПокупательНаименование,
                 |	ГлоссабПеремещение.ПокупательИНН,
                 |	ГлоссабПеремещение.Договор КАК ДоговорНомер,
                 |	ГлоссабПеремещение.Сумма
                 |ИЗ
                 |	ВнешнийИсточникДанных.SqlLolita.ВременнаяТаблица.ТЗ_отбор КАК SqlLolitaВременнаяТаблицаТЗ_отбор
                 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.SqlLolita.Таблица.ГлоссабПеремещение КАК ГлоссабПеремещение
                 |		ПО SqlLolitaВременнаяТаблицаТЗ_отбор.НомерМашины = ГлоссабПеремещение.НомерМашины
                 |			И (SqlLolitaВременнаяТаблицаТЗ_отбор.Год = ГОД(ГлоссабПеремещение.Дата))
                 |ГДЕ
                 |	SqlLolitaВременнаяТаблицаТЗ_отбор.ВидМашины <> ""Контейнер""";
				 
				 
				 
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
								 
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	
	возврат Новый Структура("Машины, Перемещения", ПакетЗапросов[1].Выгрузить(), ПакетЗапросов[2].Выгрузить());
	
	
КонецФункции

Функция ПолучитьТЗдляЗапроса(Документы)
	
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Число",
										  Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)));
										  
    ТЗ.Колонки.Добавить("Год", Новый ОписаниеТипов("Число",
							   Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой))); 									 
							   
	ТЗ.Колонки.Добавить("НомерМашины", Новый ОписаниеТипов("Число",
									   Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)));
							   
							   
	ТЗ.Колонки.Добавить("Организация", Новый ОписаниеТипов("Строка", ,
									   Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
									   
	ТЗ.Колонки.Добавить("ВалютныйРасчёт", Новый ОписаниеТипов("Булево"));
	
	ТЗ.Колонки.Добавить("ВидМашины", Новый ОписаниеТипов("Строка", ,
									 Новый КвалификаторыСтроки(15, ДопустимаяДлина.Переменная)));
									 
	ТЗ.Колонки.Добавить("ТипОрганизации", Новый ОписаниеТипов("Строка", ,
										  Новый КвалификаторыСтроки(25, ДопустимаяДлина.Переменная)));
	
	
	Для Индекс=0 По Документы.Количество()-1 Цикл
		
		запись = ТЗ.Добавить();
		запись.НомерДокумента = Индекс; 	
		запись.Год = Год(Документы[Индекс].ДатаПрихода); 
		запись.НомерМашины = Документы[Индекс].НомерМашины;
		запись.Организация = Документы[Индекс].Организация.НаименованиеВТорговле;
		запись.ТипОрганизации = ?(Документы[Индекс].Организация.ТипОрганизации = Перечисления.ТипОрганизации.Таможня, "Глоссаб", "Россия");
		запись.ВидМашины = ?(Документы[Индекс].ВидМашины = Перечисления.ВидМашины.Контейнер, "Контейнер", "Машина");
		запись.ВалютныйРасчёт = Документы[Индекс].Организация.ВалютныйРассчёт;
				
	КонецЦикла;
	
	
	возврат ТЗ;
		
КонецФункции

//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>






////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////


//Из управленческого файла "Остатки.ОПТ" создаются документы оплат зарубежным поставщикам
//В переменной "Параметры" передаётся массив параметров для создания документов.
Процедура СозданиеОплатЗарубеж(Параметры) Экспорт 
	
  Организация = Справочники.Организации.НайтиПоРеквизиту("Инн", Параметры[1]);
  Контрагент = Справочники.Контрагенты.НайтиПоНаименованию(Параметры[2]);
  День = Дата(Параметры[3]);
  Сумма = Число(Параметры[4]);
  
  
  Запрос = Новый Запрос;
  Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаможняРассчёты.Ссылка КАК Документ
	|ИЗ
	|	Документ.ТаможняРассчёты КАК ТаможняРассчёты
	|ГДЕ
	|	ТаможняРассчёты.ПометкаУдаления = ЛОЖЬ
	|	И ТаможняРассчёты.Организация = &Организация
	|	И ТаможняРассчёты.Контрагент = &Контрагент
	|	И НАЧАЛОПЕРИОДА(ТаможняРассчёты.Дата, ДЕНЬ) = &День";

  Запрос.УстановитьПараметр("День", День);
  Запрос.УстановитьПараметр("Контрагент", Контрагент);
  Запрос.УстановитьПараметр("Организация", Организация);

  запись = Запрос.Выполнить().Выбрать();

  
  //Удаляем существующие документы
  Пока запись.Следующий() Цикл
	  
    Документ = запись.Документ.ПолучитьОбъект();
	Документ.УстановитьПометкуУдаления(Истина);
	  
  КонецЦикла;	  

  
  //Создаём новые документы
  Оплата = Документы.ТаможняРассчёты.СоздатьДокумент();
  Оплата.Организация = Организация;
  Оплата.Контрагент = Контрагент;
  Оплата.Дата = День;
  Оплата.РучнаяКорректировка = Истина;
  Оплата.Сумма = Сумма;
  
  Оплата.Записать(РежимЗаписиДокумента.Проведение);
	
		
КонецПроцедуры	


//Проверяются остатки на таможенных картах
//При отрицательном остатке отправляется SMS
Процедура ПроверкаОстатковНаКартах(Битрикс) Экспорт
 Перем ТекстСМС;
 
    //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	//Получаем схему из макета	
	Схема = Отчеты.ОстаткиНаТаможеннойКарте.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");	
	Схема.Параметры.Свойство.Выражение = "";
	Схема.Параметры.Свойство.Значение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Валюта карты");
	
	//Создадим компоновщик настроек компоновки данных
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	//Загрузим настройки в компоновщик
	КомпоновщикНастроек.ЗагрузитьНастройки(Схема.ВариантыНастроек["Остатки"].Настройки);

	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	НовыеДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(Схема, КомпоновщикНастроек.ПолучитьНастройки(), НовыеДанныеРасшифровки, , 
	                                                                           Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
																			   
    //Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, , НовыеДанныеРасшифровки);
	
	//Выводим результат в табличный документ
	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
		

	//
	ОтправитьСообщениеБитрикс(Битрикс, ТЗ)
	
	
КонецПроцедуры


#Область ОтправкаБитрикс

//Отправка сообщения в Битрикс
//Битрикс - внешняя обработка для работы с Битрикс
//Данные - Таблица Значений с остатками по карте
Процедура ОтправитьСообщениеБитрикс(Битрикс, Данные)
	
	//
	ТекстСМС = "";
	
	Если Данные.Количество() > 0 Тогда
		ТекстСМС = "Требуется пополнить карты!!!";
		Для Каждого Валюта Из Данные Цикл
			ТекстСМС = ТекстСМС + Символы.ПС + 
                       Строка(Валюта.Организация) + "_" + 
                       Строка(Валюта.ОрганизацияВалютаКарты) + "_" + 
                       "[B]" +Строка(Валюта.СчётСписания) + "[/B]" + " " + Формат(Валюта.Остаток, "ЧДЦ=");
		КонецЦикла;	
	КонецЕсли;	

	//
	ХранилищеСМС = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТекстСМС) Тогда
		Возврат;
	ИначеЕсли Не ПроверкаПоследнегоСМС(ТекстСМС, ХранилищеСМС) Тогда
		Возврат;
	КонецЕсли;	
	
	
	//
	Отказ = Ложь;
	Битрикс.ОтправитьВБитрикс(679, ТекстСМС, Отказ,, Истина);
	
	НоваяЗапись = ХранилищеСМС.Добавить();
	НоваяЗапись.Телефон = "Лобов Дмитрий Михайлович";
	НоваяЗапись = ХранилищеСМС.Добавить();
	НоваяЗапись.Текст = ТекстСМС;
	НоваяЗапись.ВремяОтправки = ТекущаяДата();
	НоваяЗапись.Статус = ?(Отказ, "Не Отправлено", "Отправлено");
	НоваяЗапись.Флаг = ?(Отказ, Ложь, Истина);
	НоваяЗапись.ИДСообщения = "Битрикс";
	
	Константы.СмсРассылка.Установить(Новый ХранилищеЗначения(ХранилищеСМС, Новый СжатиеДанных(9)));
	
	
	
КонецПроцедуры	


Функция ПроверкаПоследнегоСМС(ТекстСМС, ХранилищеСМС = Неопределено)
	
	ХранилищеЗначения = Константы.СмсРассылка.Получить();
	ТЗсмс = ХранилищеЗначения.Получить();
	
	Если ТипЗнч(ТЗсмс) = Тип("ТаблицаЗначений") Тогда
		
		ХранилищеСМС = ТЗсмс;
		
		Отбор = ТЗсмс.НайтиСтроки(Новый Структура("Текст", ТекстСМС));
		
		Если Отбор.Количество() > 1 Тогда
			возврат Ложь; 
		Иначе
			возврат Истина;
		КонецЕсли;
		
	Иначе
		ХранилищеСМС = ПолучитьСтруктуруТзСмс();
		возврат Истина;
	КонецЕсли;	

КонецФункции


Функция ПолучитьСтруктуруТзСмс()
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Телефон", Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	
	ТЗ.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));								 
	
	ТЗ.Колонки.Добавить("ИДСообщения", Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));								 								 
	
	ТЗ.Колонки.Добавить("Флаг", Новый ОписаниеТипов("Булево"));
	
	ТЗ.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(1000, ДопустимаяДлина.Переменная)));
	
	ТЗ.Колонки.Добавить("ВремяОтправки", Новый ОписаниеТипов("Дата", , ,
	Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Возврат ТЗ;
	
КонецФункции	


#КонецОБласти

