&НаКлиенте
Перем ОткрытаФормаВыбораИсполнителя;  // признак того, что исполнитель выбирается из формы, а не быстрым вводом
&НаКлиенте
Перем ОткрытаФормаВыбораПроверяющего; // признак того, что проверяющий выбирается из формы, а не быстрым вводом
&НаКлиенте
Перем КонтекстВыбора;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	НачальныйПризнакСтарта = Объект.Стартован;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.СрокИсполненияВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Элементы.СрокПроверкиВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Элементы.Дата.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДЛФ=DT", "ДЛФ=D");
	
	Элементы.Предмет.Гиперссылка = Объект.Предмет <> Неопределено И НЕ Объект.Предмет.Пустая();
	ПредметСтрокой = ОбщегоНазначения.ПредметСтрокой(Объект.Предмет);
	Элементы.ГруппаСостояние.Видимость = Объект.Завершен;
	Если Объект.Завершен Тогда
		ДатаЗавершенияСтрокой = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
			Формат(Объект.ДатаЗавершения, "ДЛФ=DT"), Формат(Объект.ДатаЗавершения, "ДЛФ=D"));
		ТекстСостояния = ?(Объект.Выполнено, 
			НСтр("ru = 'Задание выполнено %1.'"), 
			НСтр("ru = 'Задание отменено %1.'"));
		Элементы.ДекорацияТекст.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостояния,	
				ДатаЗавершенияСтрокой);
				
		Для каждого Элемент Из Элементы Цикл
			Если ТипЗнч(Элемент) <> Тип("ПолеФормы") И ТипЗнч(Элемент) <> Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли;
			Элемент.ТолькоПросмотр = Истина;
		КонецЦикла;	
		
	КонецЕсли;
	
	Если Объект.ГлавнаяЗадача = Неопределено Или Объект.ГлавнаяЗадача.Пустая() Тогда
		Элементы.ГлавнаяЗадача.Гиперссылка = Ложь;
		ГлавнаяЗадачаСтрокой = НСтр("ru = 'не задана'");
	Иначе	
		ГлавнаяЗадачаСтрокой = Строка(Объект.ГлавнаяЗадача);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодчиненныеБизнесПроцессы") Тогда
		Элементы.ГлавнаяЗадача.Видимость = Ложь;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ПриОпределенииИспользованияВнешнихЗадачИБизнесПроцессов(ИспользоватьВнешниеЗадачиИБизнесПроцессы);
	
	УстановитьДоступностьПроверяющего(ЭтаФорма);
	
	
	////Дима 21.07.2016 10:52:55////Запишем "Адрес реестра платежей, Табличный документ и признак второго реестра" в реквизит формы
	Попытка
		АдресРеестра = Параметры.АдресДетализации;
		РеестрТД = Параметры.РеестрТД;
	Исключение
	КонецПопытки;
	
	Если Параметры.Свойство("ВторойРеестр") Тогда
		Объект.ВторойРеестр = ?(Параметры.ВторойРеестр = Неопределено, Ложь, Параметры.ВторойРеестр.ПравоеЗначение);
	КонецЕсли;	
	
	ВывестиРезультатВыполнения();	
	//конец Дима
	
	//
	НаименованиеРеестра = "Реестр платежей от " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	Объект.Наименование = ?(ЗначениеЗаполнено(Объект.Наименование), Объект.Наименование, НаименованиеРеестра);	                                                                  
	//
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДоступностьКомандОстановки();
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ВыборРолиИсполнителя") Тогда
		
		Если КонтекстВыбора = "ИсполнительПриИзменении" Тогда
			
			Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
				Объект.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
			КонецЕсли;
			
			УстановитьДоступностьПроверяющего(ЭтаФорма);
			
			
		ИначеЕсли КонтекстВыбора = "ПроверяющийПриИзменении" Тогда
			
			Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
				Объект.Проверяющий = ВыбранноеЗначение.РольИсполнителя;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	Если НачальныйПризнакСтарта И ИзменятьЗаданияЗаднимЧислом Тогда
		УстановитьПривилегированныйРежим(Истина); 
		ТекущийОбъект.ИзменитьРеквизитыНевыполненныхЗадач();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_Задание", ПараметрыЗаписи, Объект.Ссылка);
	Оповестить("Запись_ЗадачаИсполнителя", ПараметрыЗаписи, Неопределено);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НаПроверкеПриИзменении(Элемент)
	
	УстановитьДоступностьПроверяющего(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	Если ТипЗнч(Объект.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Объект.Предмет);
	Иначе	
		ОткрытьЗначение(Объект.Предмет);
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГлавнаяЗадачаНажатие(Элемент, СтандартнаяОбработка)
	
	Если Не БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Объект.ГлавнаяЗадача) Тогда
		ОткрытьЗначение(Объект.ГлавнаяЗадача);
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БизнесПроцессыИЗадачиКлиент.ВыбратьИсполнителя(Элемент, Объект.Исполнитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	Если ОткрытаФормаВыбораИсполнителя = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойОбъектАдресации = Неопределено;
	ДополнительныйОбъектАдресации = Неопределено;
	
	Если ТипЗнч(Объект.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") И ЗначениеЗаполнено(Объект.Исполнитель) Тогда 
		
		Если ИспользуетсяСОбъектамиАдресации(Объект.Исполнитель) Тогда 
			
			КонтекстВыбора = "ИсполнительПриИзменении";
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РольИсполнителя", Объект.Исполнитель);
			ПараметрыФормы.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
			ПараметрыФормы.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
			
			ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", ПараметрыФормы, ЭтаФорма);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьПроверяющего(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОткрытаФормаВыбораИсполнителя = ТипЗнч(ВыбранноеЗначение) = Тип("Структура");
	Если ОткрытаФормаВыбораИсполнителя Тогда
		СтандартнаяОбработка = Ложь;
		Объект.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БизнесПроцессыИЗадачиКлиент.ВыбратьИсполнителя(Элемент, Объект.Проверяющий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийПриИзменении(Элемент)
	
	Если ОткрытаФормаВыбораПроверяющего = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойОбъектАдресации = Неопределено;
	ДополнительныйОбъектАдресации = Неопределено;
	
	Если ТипЗнч(Объект.Проверяющий) = Тип("СправочникСсылка.РолиИсполнителей") И ЗначениеЗаполнено(Объект.Проверяющий) Тогда
		
		Если ИспользуетсяСОбъектамиАдресации(Объект.Проверяющий) Тогда
			
			КонтекстВыбора = "ПроверяющийПриИзменении";
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РольИсполнителя", Объект.Проверяющий);
			ПараметрыФормы.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
			ПараметрыФормы.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
			
			ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", ПараметрыФормы, ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОткрытаФормаВыбораПроверяющего = ТипЗнч(ВыбранноеЗначение) = Тип("Структура");
	Если ОткрытаФормаВыбораПроверяющего Тогда
		СтандартнаяОбработка = Ложь;
		
		Объект.Проверяющий = ВыбранноеЗначение.РольИсполнителя;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияПриИзменении(Элемент)
	Если Объект.СрокИсполнения = НачалоДня(Объект.СрокИсполнения) Тогда
		Объект.СрокИсполнения = КонецДня(Объект.СрокИсполнения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СрокПроверкиПриИзменении(Элемент)
	Если Объект.СрокПроверки = НачалоДня(Объект.СрокПроверки) Тогда
		Объект.СрокПроверки = КонецДня(Объект.СрокПроверки);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Остановить(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ОстановитьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	ОбновитьДоступностьКомандОстановки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБизнесПроцесс(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ПродолжитьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	ОбновитьДоступностьКомандОстановки();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбновитьДоступностьКомандОстановки()
	
	Если Объект.Завершен Тогда
		
		Элементы.ФормаОстановить.Доступность = Ложь;
		Элементы.ФормаПродолжить.Доступность = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Остановлен") Тогда
		Элементы.ФормаОстановить.Доступность = Ложь;
		Элементы.ФормаПродолжить.Доступность = Истина;
	Иначе
		Элементы.ФормаОстановить.Доступность = Истина;
		Элементы.ФормаПродолжить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПроверяющего(Форма)
	
	ДоступностьПоля = Форма.Объект.НаПроверке;
	Форма.Элементы.ГруппаПроверяющий.Доступность = ДоступностьПоля;
	
	Если Не Форма.ИспользоватьВнешниеЗадачиИБизнесПроцессы Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(Форма.Объект.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") 
		И ЗначениеЗаполнено(Форма.Объект.Исполнитель) Тогда
		
		ВнешняяРоль = ВнешняяРольИсполнителя(Форма.Объект.Исполнитель);
		
		Если ВнешняяРоль Тогда
			Форма.Объект.Проверяющий = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
			Форма.Объект.НаПроверке = Ложь;
			Форма.Элементы.ГруппаПроверка.Доступность = Ложь;
		Иначе	
			Форма.Элементы.ГруппаПроверка.Доступность = Истина;
		КонецЕсли;
	Иначе	
		Форма.Элементы.ГруппаПроверка.Доступность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуетсяСОбъектамиАдресации(ПроверяемыйОбъект)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемыйОбъект, "ИспользуетсяСОбъектамиАдресации");
	
КонецФункции

&НаСервереБезКонтекста
Функция ВнешняяРольИсполнителя(Исполнитель)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Исполнитель, "ВнешняяРоль");
КонецФункции







////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЛОБОВА Д.М.

&НаКлиенте
Процедура ЗаголовокЗаданияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаписьРеестра", ЭтаФорма);
	ПараметрыФормы = Новый Структура("АдресРеестра, Исполнитель, ТекущийПользователь, Глоссаб, УИД", АдресРеестра, Объект.Автор, Объект.Автор, Объект.Глоссаб, УникальныйИдентификатор);
	
	ОткрытьФорму("Отчет.РеестрПлатежейСогласование.Форма.ФормаОтчета", 
	              ПараметрыФормы, 
				  ЭтаФорма,,
				  ВариантОткрытияОкна.ОтдельноеОкно,, 
				  ОповещениеОЗакрытии, 
				  РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьРеестра(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
	  РеестрТД = РезультатЗакрытия.ТабличныйДокумент;
	КонецЕсли; 
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	ИначеЕсли РезультатЗакрытия.Свойство("АдресРеестра") Тогда
		АдресРеестраМод = РезультатЗакрытия.АдресРеестра;
	Иначе
		Возврат;
	КонецЕсли;	
	
		
	Если НЕ Объект.Стартован Тогда
		АдресРеестра = АдресРеестраМод;
		РеестрТД = РезультатЗакрытия.ТабличныйДокумент;
		Модифицированность = Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя изменять уже запущенное согласование!!!",, "Объект.Наименование");
	КонецЕсли;	
	
			
	
КонецПроцедуры


&НаСервере
Процедура ВывестиРезультатВыполнения()

	РезультатВыполненияТД.Очистить();
	
	БизнесПроцесс = РеквизитФормыВЗначение("Объект");
	
	Макет = БизнесПроцесс.ПолучитьМакет("МакетСогласования");
	
	//Шапка
	Шапка = Макет.ПолучитьОбласть("Шапка");
	РезультатВыполненияТД.Вывести(Шапка);
	
	//История выполнения
	ИсторияВыполнения = Макет.ПолучитьОбласть("ИсторияВыполнения");
	
	Для Каждого Строка Из Объект.ИсторияВыполнения Цикл
	  ИсторияВыполнения.Параметры.ДатаВыполнения = Строка.ДатаИсполнения;
	  ИсторияВыполнения.Параметры.Исполнитель = Строка.Исполнитель;
	  ИсторияВыполнения.Параметры.РольИсполнителя = Строка.РольИсполнителя;
	  ИсторияВыполнения.Параметры.Статус = Строка.Выполнено;
	  ИсторияВыполнения.Параметры.Комментарий = Строка.Комментарий;
	  РезультатВыполненияТД.Вывести(ИсторияВыполнения);
    КонецЦикла;
  

КонецПроцедуры



//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДанныеХранилища = ТекущийОбъект.ХранилищеРеестраПлатежей.Получить();
	
	Если ТипЗнч(ДанныеХранилища) = Тип("ТаблицаЗначений") Тогда
		АдресРеестра = ПоместитьВоВременноеХранилище(ДанныеХранилища, УникальныйИдентификатор);
	КонецЕсли;	
		
	Если ТекущийОбъект.Стартован Тогда
		Элементы.Глоссаб.Доступность = Ложь;
		Элементы.ВторойРеестр.Доступность = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Реестр = ПолучитьИзВременногоХранилища(АдресРеестра);
	
	СписокГлоссаб = Новый СписокЗначений;
	СписокГлоссаб.Добавить(Перечисления.ТипОрганизации.Глоссаб);
	СписокГлоссаб.Добавить(Перечисления.ТипОрганизации.Таможня);
	//
	ОтборГлоссаб = Новый Структура("Колонка, ВидСравнения, Значение", "ТипОрганизации", ?(Объект.Глоссаб, ВидСравнения.ВСписке, ВидСравнения.НеВСписке), 
	                                                                                                                                       СписокГлоссаб); 
	МассивОтборов = Новый Массив;																																				
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>																																				
																																					
	Если Объект.ВторойРеестр Тогда
		МассивОтборов.Добавить(Новый Структура("Колонка, ВидСравнения, Значение", "ВторойРеестр", ВидСравнения.Равно, Истина)); 
		МассивОтборов.Добавить(Новый Структура("Колонка, ВидСравнения, Значение", "МодифицированоБУХ", ВидСравнения.НеРавно, Истина)); 
		МассивОтборов.Добавить(ОтборГлоссаб);
		Реестр1 = ОбщийМодульСервер.ПолучитьСложныйОтборТЗ(Реестр, , МассивОтборов);
		//
		МассивОтборов.Очистить();
		МассивОтборов.Добавить(Новый Структура("Колонка, ВидСравнения, Значение", "МодифицированоБУХ", ВидСравнения.Равно, Истина)); 
		МассивОтборов.Добавить(ОтборГлоссаб);
		РеестрДляЗагрузки = ОбщийМодульСервер.ПолучитьСложныйОтборТЗ(Реестр, , МассивОтборов);
		;
		//
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Реестр1, РеестрДляЗагрузки);
		
	Иначе
		МассивОтборов.Очистить();
		МассивОтборов.Добавить(ОтборГлоссаб);
		РеестрДляЗагрузки = ОбщийМодульСервер.ПолучитьСложныйОтборТЗ(Реестр, , МассивОтборов);
	КонецЕсли;
	
	Если РеестрДляЗагрузки.Количество() > 0 Тогда
		ТекущийОбъект.ХранилищеРеестраПлатежей = Новый ХранилищеЗначения(РеестрДляЗагрузки);
		ТекущийОбъект.ХранилищеРеестраТД = Новый ХранилищеЗначения(РеестрТД);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Установлен пустой реестр!!!",, "Объект.Наименование");
		Отказ = Истина;
	КонецЕсли;
  
  
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////







