//Програмная обработка кнопки сформировать
&НаКлиенте
Процедура СформироватьПрограмно(Команда)
	
	Если ПереключательОтчёта = 1 Тогда
	  СкомпоноватьРезультат();
	Иначе
	  СформироватьРезультат(Результат);
	КонецЕсли;  
	
КонецПроцедуры
          
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Сформировать список доступных баз
	СписокБаз.Очистить();
	СписокБаз.Добавить(Перечисления.ТипОрганизации.Розница);
	СписокБаз.Добавить(Перечисления.ТипОрганизации.Опт);
	СписокБаз.Добавить(Перечисления.ТипОрганизации.Звено);
	СписокБаз.Добавить(Перечисления.ТипОрганизации.Упп);
	СписокБаз.Добавить(Перечисления.ТипОрганизации.Управление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановкаДатыДляМакета();
	
	СкомпоноватьРезультат();
    	
	ПодключитьОбработчикОжидания("Обработчик", 60);
	
	Разрешение = ОбщийМодульСервер.РазрешитьФормированиеОтчета("ОстаткиДеньги", 1200);
	Элементы.ФормаОстаткиДенег.Доступность = НЕ Разрешение.ОстаткиДеньги;
	
	//Убрать штатную кнопку сформировать
	Элементы.ОсновнаяКоманднаяПанель.ПодчиненныеЭлементы.ФормаСформировать.Видимость = Ложь;
	
	//Установить переключатель по умолчанию
	ПереключательОтчёта = 1;
	
   	КонецПроцедуры

&НаКлиенте
Процедура Обработчик()
	
    Разрешение = ОбщийМодульСервер.РазрешитьФормированиеОтчета("ОстаткиДеньги", 1200);
	
	//Прочитаем последнюю запись в логе загрузки
	Если Разрешение.ОстаткиДеньги Тогда
		ОбщийМодульСервер.ЧтениеЛоговСценариевДедактор("Подгрузка остатков");
	КонецЕсли;	
	
    	
    Если (ТекущаяДата()- МоментОстатки) > 60 Тогда
	  Элементы.ФормаОстаткиДенег.Доступность = НЕ Разрешение.ОстаткиДеньги;
	  УстановкаДатыДляМакета();
    КонецЕсли;  
	
  	
КонецПроцедуры	


////Дима 18.07.2014 17:32:17////Изменим обработку расшифровки для окончательного отчёта
&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Перем ВыполненноеДействие;

	Если ПереключательОтчёта = 2 Тогда
		СтандартнаяОбработка = Ложь;     
		
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыСКД2);     
		ОбработкаРасшифровкиКД = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровкиСКД2, ИсточникНастроек);           
		
		ДоступныеДействия = Новый Массив;
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
		
		Настройки = ОбработкаРасшифровкиКД.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия);
		
	КонецЕсли;
		
КонецПроцедуры


////////////////////DEDUCTOR////////////////////
&НаКлиенте
Процедура ОстаткиДенег(Команда)
	
	ЗагрузитьВариантНаСервере();
	Элементы.ФормаОстаткиДенег.Доступность = Ложь;
	МоментОстатки = ТекущаяДата();
   	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьВариантНаСервере()
	
	ОбщийМодульСервер.ЗапускСценарияДедактор("Подгрузка остатков");
		
КонецПроцедуры	

//Дата, на которую загружены данные во внешнем источнике
&НаСервере
Функция ДатаИсточника()
		                                                          	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	dbo_OstatkiORG.Den
	               |ИЗ
	               |	ВнешнийИсточникДанных.SqlLolita.Таблица.dbo_OstatkiORG КАК dbo_OstatkiORG
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	dbo_OstatkiORG.Den";
				   
    Выборка = Запрос.Выполнить().Выгрузить();
	возврат Выборка[0].Den;
				   
КонецФункции

//Установим значения параметров для макета
&НаСервере
Процедура УстановкаДатыДляМакета()
  
	ДатаОтчёта = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаОтчёта");
	ДатаОтчёта.Использование=Истина;
	ДатаОтчёта.Значение=Формат(ДатаИсточника(), "ДФ=dd.MM.yyyy");	

КонецПроцедуры	



////////////////////БУХГАЛТЕРИЯ////////////////////
&НаКлиенте
Процедура ОстаткиДененгБух()
	
//Отметить нужные базы	
Если СписокБаз.ОтметитьЭлементы("Отметить элементы") Тогда
  Для каждого стр из СписокБаз Цикл
    Если стр.Пометка = Истина Тогда
	  перейти ~метка;
	КонецЕсли;
  КонецЦикла;
Иначе
  возврат;
КонецЕсли;  
Предупреждение("Не выбрано ни одной базы!!!");
возврат;

~метка:
//Ввести дату остатков
Если ВвестиДату(ДатаОстатка, "Введите нужную дату остатков") = Ложь Тогда
	возврат;
КонецЕсли;

//Поместим во временное хранилище структуру подключений
Если АдресСтруктурыПодключений = "" Тогда 
	СтруктураПодключений = Новый Структура;
	АдресСтруктурыПодключений = ПоместитьВоВременноеХранилище(СтруктураПодключений,ЭтаФорма.УникальныйИдентификатор);
КонецЕсли;

//Проверим подключения к внешним ИБ
ОчиститьСообщения();
Сообщить("Подключение к базам");

МассивОтказ = Новый Массив;
ПроверкаПодключения(АдресСтруктурыПодключений,МассивОтказ);

Для каждого сообщение Из МассивОтказ Цикл
	Сообщить(сообщение);	
КонецЦикла;


//Выгружаем из 1С
Выгрузка1С(АдресСтруктурыПодключений, ДатаОстатка);

//СформироватьРезультат
СформироватьРезультат(Результат);
ОбновитьОтображениеДанных();
	
КонецПроцедуры	

&НаСервере
Процедура СформироватьРезультат(Результат)
	
//Проверка загрузки данных
Если Не ЗначениеЗаполнено(АдресТЗДанных) Тогда
	Сообщить("Нет загруженных данных");
	возврат;
КонецЕсли;	
		
//Очищаем результат	
Результат.Очистить();

//Получаем схему из макета	
ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
Схема = ОтчетОбъект.ПолучитьМакет("СКД2");
										 
//Из схемы возьмем настройки по умолчанию
Настройки = Схема.НастройкиПоУмолчанию;

//Установим значения параметров для макета
ДатаОтчёта=Настройки.ПараметрыДанных.Элементы.Найти("ДатаОтчёта");
ДатаОтчёта.Использование=Истина;
ДатаОтчёта.Значение=Формат(ДатаОстатка, "ДФ=dd.MM.yyyy");


//Внешний набор
ВнешниеНаборыДанных=Новый Структура;
ВнешниеНаборыДанных.Вставить("ВнешнийИсточник",ПолучитьИзВременногоХранилища(АдресТЗДанных));

//Передаем в макет компоновки схему, настройки и данные расшифровки
КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
НовыеДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
Макет = КомпоновщикМакета.Выполнить(Схема, Настройки, НовыеДанныеРасшифровки);
	
//Выполним компоновку с помощью процессора компоновки
ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновки.Инициализировать(Макет,ВнешниеНаборыДанных, НовыеДанныеРасшифровки);
	

//Выводим результат в табличный документ
Результат.Очистить();	

ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
ПроцессорВывода.УстановитьДокумент(Результат);
ПроцессорВывода.Вывести(ПроцессорКомпоновки);

//Помещаем в хранилище адреса
АдресСхемыСКД2 = ПоместитьВоВременноеХранилище(Схема, ЭтаФорма.УникальныйИдентификатор);
ДанныеРасшифровкиСКД2 = ПоместитьВоВременноеХранилище(НовыеДанныеРасшифровки, ЭтаФорма.УникальныйИдентификатор);

ЗначениеВРеквизитФормы(ОтчетОбъект, "Отчет");
ПереключательОтчёта = 2;

КонецПроцедуры

&НаСервере
Процедура ПроверкаПодключения(АдресСтруктурыПодключений,МассивОтказ)
	
	Для каждого Элемент Из СписокБаз Цикл
		Если Элемент.Пометка Тогда
			Отказ = Ложь;
			ПодключениеКВнешнимИБ.ПроверкаПодключения(Элемент.Значение,АдресСтруктурыПодключений,Отказ);
			МассивОтказ.Добавить(строка(Элемент)+" "+?(Отказ=Истина,"Не подключено","Подключено"));
		КонецЕсли;
	КонецЦикла;
	
	//Догрузим недостающие организации в справочник
	Обработка = Обработки.ЗагрузкаСправочникаОрганизаций.Создать();
	Обработка.ПолучениеСпискаКЗагрузке(АдресСтруктурыПодключений);
	
КонецПроцедуры

&НаСервере
Процедура Выгрузка1С(АдресСтруктурыПодключений, ДатаОстатка)
	Перем НайденноеЗначение;
	
	СтруктураПодключений = ПолучитьИзВременногоХранилища(АдресСтруктурыПодключений);
	
	//Подготовка ТЗ
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Инн", Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТЗ.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Число",
	Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗ.Колонки.Добавить("ТипОрганизации", Новый ОписаниеТипов("ПеречислениеСсылка.ТипОрганизации"));
	ТЗ.Колонки.Добавить("Счёт", Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТЗ.Колонки.Добавить("Валюта", Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	
	
	Для каждого Элемент Из СписокБаз Цикл
		
		СтруктураПодключений.Свойство(Элемент.Значение, НайденноеЗначение);
		Если Элемент.Пометка = Ложь ИЛИ НайденноеЗначение = Неопределено Тогда
			продолжить;
		КонецЕсли;	
		
		База = НайденноеЗначение.Подключение;	
		
		Запрос=База.NewObject("Запрос");
		Запрос.УстановитьПараметр("Date",ДатаОстатка);
		
		Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОстатки.Организация.Инн КАК Инн,
		|	ХозрасчетныйОстатки.Счет.Код КАК Счёт,
		|	ХозрасчетныйОстатки.Валюта.Наименование КАК Валюта,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйОстатки.Валюта.Наименование ЕСТЬ NULL
		|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток
		|			ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
		|		КОНЕЦ) КАК Остаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Date, Счет.Код В (""50.01"",""51"", ""52"", ""57.01"", ""57.03""), , ) КАК ХозрасчетныйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Организация.Инн,
		|	ХозрасчетныйОстатки.Счет.Код,
		|	ХозрасчетныйОстатки.Валюта.Наименование";
		
		
		Выборка=Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.Инн = Выборка.Инн;
			НоваяСтрока.Остаток = Выборка.Остаток;
			НоваяСтрока.Счёт = Выборка.Счёт;
			НоваяСтрока.Валюта = Выборка.Валюта;
			НоваяСтрока.ТипОрганизации = НайденноеЗначение.ТипОрганизации;
		КонецЦикла;
		
	КонецЦикла;
	
	//Проверим организации по справочнику
	ОбщийМодульСервер.ПроверкаОрганизацийНаСоотвествие(ТЗ);
	
	//Положим очищенные на организацию данные во временное хранилище
	АдресТЗДанных = ПоместитьВоВременноеХранилище(ТЗ, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры;

	


	


	


