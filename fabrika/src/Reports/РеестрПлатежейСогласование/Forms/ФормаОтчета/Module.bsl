

//////////////////////////////////////ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ//////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//
	Если НЕ Параметры.Свойство("УИД") Тогда
		АдресРеестра = Параметры.АдресРеестра;		
	Иначе
		Модифицировать = Истина;
		//
		Реестр = ПолучитьИзВременногоХранилища(Параметры.АдресРеестра);
		Реестр.ЗаполнитьЗначения(Истина, "Модифицировано");
		//
		РеестрНаСегодня = ОбщийМодульСервер.ПолучитьСложныйОтборТЗ(Реестр, "Дата", ВидСравнения.Равно,, НачалоДня(ТекущаяДата()));
		ИсходнаяСумма = РеестрНаСегодня.Итог("Сумма");
		//
		АдресРеестра = ПоместитьВоВременноеХранилище(Реестр, Параметры.УИД);
	КонецЕсли;
	
	Если Параметры.Свойство("Исполнитель") Тогда 
      Исполнитель = Параметры.Исполнитель;
	  ТекущийПользователь = Параметры.ТекущийПользователь;
    КонецЕсли;
	  
	Если Параметры.Свойство("РольИсполнителя") Тогда 
		РольИсполнителя = Параметры.РольИсполнителя;			
	КонецЕсли;
	
	Если Параметры.Свойство("Глоссаб") Тогда 
		Глоссаб = Параметры.Глоссаб;
	КонецЕсли;
	
	Если Параметры.Свойство("БизнесПроцесс") Тогда 
		ВариантБлокировки = ПолучитьВариантБлокировкиРеестра(Параметры.БизнесПроцесс);
	КонецЕсли;
    //
	
	
	//
	Результат.АвтоМасштаб = Истина;
	УстановитьВидимостьПоРолям();
    
    //
    АдресВыгрузки = ПоместитьВоВременноеХранилище("", УникальныйИдентификатор);
    АдресИсточника = ПоместитьВоВременноеХранилище("", УникальныйИдентификатор);
    
    
    //
    //СкомпоноватьИтоговуюТЗ();
       
		
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Сформировать(Неопределено);
КонецПроцедуры


&НаКлиенте
Процедура ПриПовторномОткрытии()
	Сформировать(Неопределено);	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Модифицированность;
		ТекстПредупреждения = "Есть несохранённые данные...";
		
		
	ИначеЕсли Модифицированность Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьИзменения", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		
		
	ИначеЕсли СтруктураОтвета = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры



&НаКлиенте
Процедура ЗакрытьРеестр(Команда)
	СтруктураОтвета = Новый Структура("ТабличныйДокумент", Результат);
	Закрыть(СтруктураОтвета);
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////



//
&НаКлиенте
Процедура СохранитьИзменения(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		СтруктураОтвета = Новый Структура("ТабличныйДокумент, АдресРеестра, Корректировка", Результат, АдресРеестра, Корректировка);
		Закрыть(СтруктураОтвета);
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		СтруктураОтвета = Новый Структура("ТабличныйДокумент", Результат);
		Закрыть(СтруктураОтвета);
	КонецЕсли;		

КонецПроцедуры



&НаКлиенте
Процедура СвернутьОкно()
	ВладелецФормы.Активизировать();
	ОтключитьОбработчикОжидания("СвернутьОкно");
КонецПроцедуры	
//



//
&НаСервере
Процедура УстановитьВидимостьПоРолям()

	Если РольИсполнителя = ПредопределенноеЗначение("Справочник.РолиИсполнителей.КлиентБанк") Тогда
	//	Элементы.КомандыФормы.Видимость = Ложь;
		Элементы.ГруппаРедактирование.Видимость = Ложь;
		УстановитьТекущийВариант("КлиентБанк");
	ИначеЕсли Глоссаб Тогда
		УстановитьТекущийВариант("Глоссаб");
	Иначе	
		УстановитьТекущийВариант("Основной");
	КонецЕсли;	

	//
	Элементы.ИзменитьСтатьюРасхода.Доступность = НЕ Глоссаб;
	
КонецПроцедуры
//

//
&НаКлиенте
Процедура ВариантГлоссаб(Команда)
	            
	Глоссаб = НЕ Глоссаб;
	ЭтаФорма.Элементы.РезультатКонтекстноеМенюВариантГлоссаб.Пометка = Глоссаб;
	
	Если Глоссаб Тогда
		УстановитьТекущийВариант("Глоссаб");
	Иначе	
		УстановитьТекущийВариант("Основной");
	КонецЕсли;	
	
	//
	СформироватьОтчет();
	
КонецПроцедуры
//


//
&НаКлиенте
Процедура ЗапуститьПроцессСогласования(Команда)
	ПарамФормы = Новый Структура("РеестрТД, ВторойРеестр, АдресДетализации", Результат, ПолучитьПараметрыОбработки().ВторойРеестр, АдресРеестра);
	ОткрытьФорму("БизнесПроцесс.СогласованиеРеестраПлатежей.Форма.ФормаБизнесПроцесса", ПарамФормы); 
КонецПроцедуры
//


//////////////////////////////////////ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ОТЧЕТА//////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура Сформировать(Команда)
	СформироватьОтчет();
	
	////
	//Оповестить("РеестрПлатежей", Результат);
	
КонецПроцедуры


&НаСервере
Процедура СформироватьОтчет(Options = Неопределено)
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	
	//Получим схему компоновки данных
	Схема = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	
	
	//Проверим наличие реестра
	ТЗРеестр = ПолучитьИзВременногоХранилища(АдресРеестра);
	Если ТипЗнч(ТЗРеестр) <> Тип("ТаблицаЗначений") Тогда
		ОбщийМодульСервер.ДобавитьСоообщениеВмассив(, "Не загружен реестр платежей!!!");
		Возврат;
	КонецЕсли;	
	
	
	
	//Добавим колонки, которые появлялись позже основных
	Если ТЗРеестр.Колонки.Найти("Комментарий") = Неопределено Тогда
	  ТЗРеестр.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка", ,
											   Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));  		
	КонецЕсли;										   
		
	Если ТЗРеестр.Колонки.Найти("СтатьяРасходаМод") = Неопределено Тогда
		ТЗРеестр.Колонки.Добавить("СтатьяРасходаМод", Новый ОписаниеТипов("ВнешнийИсточникДанныхТаблицаСсылка.SqlЗатратыНовый.сп_СтатьяРасхода"));
	КонецЕсли;
		
	Если ТЗРеестр.Колонки.Найти("Подразделение") = Неопределено Тогда
      ТЗРеестр.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("Строка", ,
												  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	КонецЕсли;
	
	Если ТЗРеестр.Колонки.Найти("ОтборСуществующихПП") = Неопределено Тогда
		ТЗРеестр.Колонки.Добавить("ОтборСуществующихПП", Новый ОписаниеТипов("Булево"));
	КонецЕсли;										  
	
	Если ТЗРеестр.Колонки.Найти("МодифицированоБУХ") = Неопределено Тогда
		ТЗРеестр.Колонки.Добавить("МодифицированоБУХ", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТЗРеестр.Колонки.Найти("ВторойРеестр") = Неопределено Тогда
		ТЗРеестр.Колонки.Добавить("ВторойРеестр", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТЗРеестр.Колонки.Найти("СтатьяРасходаКод") = Неопределено Тогда
		ТЗРеестр.Колонки.Добавить("СтатьяРасходаКод", Новый ОписаниеТипов("Число",
													  Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Любой)));
	КонецЕсли;

			
	ПоместитьВоВременноеХранилище(ТЗРеестр, АдресРеестра);														  
	//													  
		
	
	//Создадим внешний набор данных
	ВнешнийНаборДанных = Новый Структура("РеестрПлатежей", ТЗРеестр);
	
	
	//Структура настроек
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
    
    
    //Добавим фиксированные настройки
	СписокГлоссаб = Новый СписокЗначений;
	СписокГлоссаб.Добавить(Перечисления.ТипОрганизации.Глоссаб);
	СписокГлоссаб.Добавить(Перечисления.ТипОрганизации.Таможня);
    
    
    //Добавим общий отбор
    ОтборГлоссаб = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборГлоссаб.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация.ТипОрганизации");
    ОтборГлоссаб.ВидСравнения = ?(Глоссаб, ВидСравненияКомпоновкиДанных.ВСписке, ВидСравненияКомпоновкиДанных.НеВСписке);
    ОтборГлоссаб.ПравоеЗначение = СписокГлоссаб;

    //
    //Перейдём к нужной обработке
    Если Options = Неопределено Тогда
        Перейти ~Вывод;
    Иначе
        Перейти ~Выгрузка;
    КонецЕсли;    
    
    
    #Область Вывод
    ~Вывод:
    
    //Передаем в макет компоновки схему, настройки и данные расшифровки
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    НовыеДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
    Макет = КомпоновщикМакета.Выполнить(Схема, Настройки, НовыеДанныеРасшифровки);
    
    
    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(Макет, ВнешнийНаборДанных, НовыеДанныеРасшифровки);
    
    
    //Выведем компоновку с помощью процессора вывода
    Результат.Очистить();	
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(Результат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);
    ДанныеРасшифровки = ПоместитьВоВременноеХранилище(НовыеДанныеРасшифровки, ЭтаФорма.УникальныйИдентификатор);

    
    //Объединим заголовки столбцов
    ОбщийМодульСервер.ОбработатьЗаголовки(Результат);
	
    Возврат;
    
    #КонецОбласти
    
    
    #Область Выгрузка
    ~Выгрузка:    
    
    //Настройки компоновки "Для выгрузки"
    Настройки.Структура.Очистить();
    НоваяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    
    
    МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Options["Поля"], ";", Истина);
    Для Каждого Поле Из МассивПолей Цикл        
        ПараметрыПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поле, ":");
        //
        ВыбранноеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле.Заголовок = ?(ПараметрыПоля.ВГраница() = 0, "", СокрЛП(ПараметрыПоля[1]));
        ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(СокрЛП(ПараметрыПоля[0]));	
    КонецЦикла;    
    
     
    //
    Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет); 
    
    
    //Установим дополнительный отбор
    Если НЕ Options.Получить("Отбор") = Неопределено Тогда
        
        #Область ПользовательскоеПоле  
        ПолеОтбор = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыборКомпоновкиДанных"));
        Вариант = ПолеОтбор.Варианты.Элементы.Добавить();
        Вариант.Значение = Истина;  
        #КонецОбласти  
        
        #Область ШтатныеОтборы  
        Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
            НовыйОтбор = Вариант.Отбор.Элементы.Добавить(ТипЗнч(ЭлементОтбора));
            ЗаполнитьЗначенияСвойств(НовыйОтбор, ЭлементОтбора);
        КонецЦикла;
        Настройки.Отбор.Элементы.Очистить();
        #КонецОбласти  
        
        #Область ИнтерактивныеОтборы  
        ГруппаИли = Вариант.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
        ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
        РекурсивноДобавитьОтборы(ГруппаИли, Options["Отбор"]); 
        #КонецОбласти  

    КонецЕсли;    
    
    
    //Корректировка схемы
    Если НЕ Options.Получить("КорректировкаСхемы") = Неопределено Тогда
        
        //Объединим поля наборов 
        Для Каждого Поле Из Схема.НаборыДанных[1].Поля Цикл
            НовоеПоле = Схема.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
            ЗаполнитьЗначенияСвойств(НовоеПоле, Поле); 
        КонецЦикла;   
        
        //
        Схема.НаборыДанных.Удалить(Схема.НаборыДанных.Получить(1));
        Схема.СвязиНаборовДанных.Очистить();
        
        //
        Схема.ВычисляемыеПоля.Удалить(Схема.ВычисляемыеПоля.Получить(2));        
        Схема.ВычисляемыеПоля.Удалить(Схема.ВычисляемыеПоля.Получить(1));        
        
    КонецЕсли;    
    
    
    //Внешний набор данных
    ВнешнийНаборДанных.РеестрПлатежей = ПолучитьИзВременногоХранилища(Options["Источник"]);
    
    
    //Для выгрузки
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетВыгрузки = КомпоновщикМакета.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    
    //Для выгрузки
    ПроцессорКомпоновкиВыгрузки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиВыгрузки.Инициализировать(МакетВыгрузки, ВнешнийНаборДанных);
    
    
    //Для выгрузки
    ТЗ = Новый ТаблицаЗначений;
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТЗ);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиВыгрузки);
    
    //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=
    //
    //Если ВариантБлокировки = "Снять реестр с редактирования" Тогда
    //    ТЗ.ЗаполнитьЗначения(Ложь, "МодифицированоБУХ");
    //КонецЕсли;	
    //
    
    Options.Вставить("Результат", ТЗ);
    
    
    #КонецОбласти    
    
		
		
КонецПроцедуры	



&НаСервереБезКонтекста
Процедура РекурсивноДобавитьОтборы(НастройкиОтбора, ОтборыСоответствие)
    
    
    Для Каждого Отбор Из ОтборыСоответствие Цикл
        Если ТипЗнч(Отбор.Значение) = Тип("Соответствие") Тогда
            Группа = НастройкиОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
            Группа.ТипГруппы = ?(ТипЗнч(Отбор.Ключ) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных"), ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
            РекурсивноДобавитьОтборы(Группа, Отбор.Значение);
        Иначе
            ЭлементОтбора = НастройкиОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
            ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Отбор.Ключ);
            ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
            ЭлементОтбора.ПравоеЗначение = Отбор.Значение;                     
        КонецЕсли;    
    КонецЦикла;    
         
КонецПроцедуры    


/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////







//////////////////////////////////////ПРОЦЕДУРЫ ЗАПИСИ КОММЕНТАРИЯ И СТАТЬИ РАСХОДА/////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ЗаписатьКомментарий(Команда)
	
	Комментарий = "";
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаписатьДанныеВТаблицуНаКлиенте", ЭтаФорма, ПолучитьПараметрыОбработки());  
	ПоказатьВводСтроки(ОповещениеОЗакрытии, Комментарий, "Введите комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДатуПлатежа(Команда)

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаписатьДанныеВТаблицуНаКлиенте", ЭтаФорма, ПолучитьПараметрыОбработки());  
	ПоказатьВводДаты(ОповещениеОЗакрытии, ДатаПлатежа, "Введите дату платежа", ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатьюРасхода(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаписатьДанныеВТаблицуНаКлиенте", ЭтаФорма, ПолучитьПараметрыОбработки());
	ОткрытьФорму("ВнешнийИсточникДанных.SqlЗатратыНовый.Таблица.сп_СтатьяРасхода.ФормаВыбора",, ЭтаФорма,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры
//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>


&НаКлиенте
Функция ПолучитьПараметрыОбработки()

  //Расшифровка = Элементы.Результат.ТекущаяОбласть.Расшифровка;
  Расшифровка = Новый Массив;
  МассивОбластейЯчеек = ОбщийМодульКлиент.ПолучениеДанныхОбластиТабличногоДокумента(Результат);
  Для Каждого Область Из МассивОбластейЯчеек Цикл
	  Расшифровка.Добавить(Область.Расшифровка);
  КонецЦикла;	  
  
	
  ДополнительныеПараметры = Новый Структура("Расшифровка, ДанныеРасшифровки, ТекущийПользователь, ВторойРеестр",
                                             Расшифровка, ДанныеРасшифровки, ТекущийПользователь, 
											 Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти("ВторойРеестр"));
											   
  Возврат ДополнительныеПараметры;
  
											   
КонецФункции


&НаКлиенте
Процедура ЗаписатьДанныеВТаблицуНаКлиенте(Строка, ДополнительныеПараметры) Экспорт 
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(Строка) = Тип("Дата") Тогда
		Корректировка = ?(Корректировка, Истина, Строка = НачалоДня(ТекущаяДата()));
		ДатаПлатежа = Строка;
	КонецЕсли;	
	
	
	Если ЗаписатьДанныеВТаблицуНаСервере(Строка, 
		                                 ДополнительныеПараметры, 
										 АдресРеестра, 
										 Глоссаб) Тогда
		Сформировать(Неопределено);
		Модифицированность = ?(Модифицировать, Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ЗаписатьДанныеВТаблицуНаСервере(Строка, 
	                                    ДополнительныеПараметры, 
										АдресРеестра, 
										Глоссаб) Экспорт
	Перем ДатаОплаты;
	
	//
	ТЗРеестр = ПолучитьИзВременногоХранилища(АдресРеестра);    
	//
	
    
    ОтборСоответствие = Новый Соответствие;
    Ключ = "Первичный";
    Для Каждого Расшифровка Из ДополнительныеПараметры.Расшифровка Цикл
        
        //
        Если Расшифровка = Неопределено Тогда
            Продолжить;
        КонецЕсли;	
        
        //
        Группа = "";
        СтруктураРасшифровки = ОбщийМодульСервер.ПолучениеРасшифровкиВСтруктуру(                              Расшифровка, 
                                                                                ДополнительныеПараметры.ДанныеРасшифровки, 
                                                                                                       Новый Соответствие, 
                                                                                                                   Группа);
                                                                                                                   
        Если СтрНайти(Группа, Ключ) > 0 И Группа <> Ключ Тогда          
          Продолжить;
        КонецЕсли;  
        
        Ключ = Группа;
                                                                                                                   
        Если НЕ ОтборСоответствие.Получить(Ключ) = Неопределено Тогда
          ОтборСоответствие[Ключ].Вставить(Расшифровка, СтруктураРасшифровки);
        Иначе
          ДетальныеЗаписи = Новый Соответствие;
          ДетальныеЗаписи.Вставить(Расшифровка, СтруктураРасшифровки);
          ОтборСоответствие.Вставить(Ключ, ДетальныеЗаписи);
        КонецЕсли;  
        
    КонецЦикла;
    
    
    //
    Options = Новый Соответствие;
    Options.Вставить("Поля", "СсылкаБухгалтерия;СистемныеПоля.НомерПоПорядку;Сумма;ПользовательскиеПоля.Поле1");
    Options.Вставить("Источник", АдресРеестра);
    Options.Вставить("Отбор", ОтборСоответствие);
    //Options.Вставить("КорректировкаСхемы", Истина);
   
    СформироватьОтчет(Options);
    
    
    //	
    СтрокиДляРедактирования = Options["Результат"].Скопировать(Новый Структура("ПользовательскиеПоляПоле1", Истина));    
    Если НЕ Глоссаб Тогда
        СтрокиДляРедактирования.Свернуть("СсылкаБухгалтерия");
    КонецЕсли;    
    
    
    Если ТипЗнч(Строка) = Тип("Дата") Тогда
        ДатаОплаты = Строка;
        Строка = "Смена даты платежа";
    КонецЕсли;	
    
    ВремяИзменения = ТекущаяДата();
    
    Для Каждого СтрокаРедактирования Из СтрокиДляРедактирования Цикл
        
        НайденныеСтроки = Новый Массив;
        Если Глоссаб Тогда
            НайденныеСтроки.Добавить(ТЗРеестр[СтрокаРедактирования.СистемныеПоляНомерПоПорядку - 1]);
        Иначе    
            НайденныеСтроки = ТЗРеестр.НайтиСтроки(Новый Структура("СсылкаБухгалтерия", СтрокаРедактирования.СсылкаБухгалтерия));
        КонецЕсли;    
            
        Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл  
            
            Если НайденнаяСтрока.Отправлено Тогда
                Продолжить;
            КонецЕсли;	
            
            Если ТипЗнч(Строка) = Тип("Строка") Тогда
                НайденнаяСтрока.Комментарий = НайденнаяСтрока.Комментарий + ФизическиеЛица.ФамилияИнициалыФизЛица(ДополнительныеПараметры.ТекущийПользователь.Наименование)
                + " " + ВремяИзменения + Символы.ПС + Строка + Символы.ПС;
                Если ДатаОплаты <> Неопределено Тогда
                    НайденнаяСтрока.Дата = ДатаОплаты;
                    НайденнаяСтрока.Модифицировано = Истина;
                    НайденнаяСтрока.МодифицированоБУХ = Истина;
                    //
                    НайденнаяСтрока.ВторойРеестр = ?(ДополнительныеПараметры.ВторойРеестр = Неопределено, Ложь, Истина);
                    //
                КонецЕсли;  
                
            Иначе
                НайденнаяСтрока.СтатьяРасходаМод = Строка;
                НайденнаяСтрока.МодифицированоБУХ = ?(НЕ ЗначениеЗаполнено(НайденнаяСтрока.СтатьяРасходаМод), Ложь, Истина);
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЦикла;
    
    
    
    
    //     
    АдресРеестра = ПоместитьВоВременноеХранилище(ТЗРеестр, АдресРеестра);
    СкомпоноватьИтоговуюТЗ();    
    Возврат Истина;
	
			
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////





//////////////////////////////////////ПРОЦЕДУРЫ САМОСТОЯТЕЛЬНОЙ ОБРАБОТКИ РАСШИФРОВКИ///////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Перем ВыбранноеДействие;
	Перем ПараметрыВыбранногоДействия;
	
	СтандартнаяОбработка = Ложь;
	ОбработкаРасшифровки =  Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет));
	
	//
	ДополнительныеКоманды = Новый СписокЗначений;
	//ДополнительныеКоманды.Добавить("ЗаписатьКомментарий", "Записать комментарий",, БиблиотекаКартинок.ЗаписатьИЗакрыть);
	//ДополнительныеКоманды.Добавить("ИзменитьСтатью", "Изменить статью",, БиблиотекаКартинок.Изменить);
	
	ДополнительныеПараметры = Новый Структура("Расшифровка, ДанныеРасшифровки, УникальныйИдентификатор, ТекущийПользователь",
	                                           Расшифровка, ДанныеРасшифровки, ВладелецФормы.УникальныйИдентификатор, ТекущийПользователь);
	
	//
	
	ОбработкаРасшифровки.ВыбратьДействие(Расшифровка, ВыбранноеДействие, ПараметрыВыбранногоДействия,, ДополнительныеКоманды);
	
	Если ВыбранноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
		
		Если ВыбранноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			ОткрытьЗначение(ПараметрыВыбранногоДействия);
			
		ИначеЕсли ВыбранноеДействие = "ЗаписатьКомментарий" Тогда
			Комментарий = "";
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаписатьДанныеВТаблицуНаКлиенте", ЭтаФорма, ДополнительныеПараметры);  
			ПоказатьВводСтроки(ОповещениеОЗакрытии, Комментарий, "Введите комментарий");
			
		ИначеЕсли ВыбранноеДействие = "ИзменитьСтатью"	Тогда
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаписатьДанныеВТаблицуНаКлиенте", ЭтаФорма, ДополнительныеПараметры);
			ОткрытьФорму("ВнешнийИсточникДанных.SqlЗатраты.Таблица.СтатьяРасхода.ФормаВыбора",, ЭтаФорма,,,, ОповещениеОЗакрытии);
			
		Иначе			
			Парам = Новый Структура;
			Парам.Вставить("АдресРеестра", АдресРеестра);
			Парам.Вставить("Исполнитель", Исполнитель);
			Парам.Вставить("ТекущийПользователь", ТекущийПользователь);
			Парам.Вставить("Глоссаб", Глоссаб);
			Парам.Вставить("Расшифровка", Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Расшифровка, ПараметрыВыбранногоДействия));
			ОткрытьФорму("Отчет.РеестрПлатежейСогласование.Форма.ФормаОтчета", Парам,, Истина, ВариантОткрытияОкна.ОтдельноеОкно);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
/////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////







//////////////////////////////////////ЗАПИСЬ ДАННЫХ В БУХГАЛТЕРСКИЕ БАЗЫ//////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ИзменитьВБухгалтерии(Команда)
	
	//ПараметрыОбработки = ОбщийМодульСервер.ПодключитьВнешнююОбработку("Загрузка/Выгрузка платежей в бухгалтерию");
	//
	//ОткрытьФорму("ВнешняяОбработка." + ПараметрыОбработки.ИдентификаторКоманды + ".Форма", ПараметрыОбработки);
	
	Оповестить("КорректировкаСтатей", АдресРеестра);
	
			 	
КонецПроцедуры
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////



#Область ОбработкаРеестра


&НаКлиенте
Процедура ВыбратьВариантОбработкиРеестра(Команда)
	
	ПунктыМеню = Новый СписокЗначений;
	ПунктыМеню.Добавить("Второй реестр");
	ПунктыМеню.Добавить("Заблокировать реестр для выгрузки");
	ПунктыМеню.Добавить("Разблокировать реестр для выгрузки");
	ПунктыМеню.Добавить("Снять реестр с редактирования");
	//
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ВариантОбработкиРеестра", ЭтотОбъект), ПунктыМеню, Элементы.Результат);
    //
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбработкиРеестра(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеЗакрытия = Новый ОписаниеОповещения("ОбработатьРеестр", ЭтаФорма, ВыбранныйЭлемент.Значение);
	ПараметрыОткрытияФормы = Новый Структура("РежимВыбора, МножественныйВыбор", Истина, Истина);
	
	ОткрытьФорму("БизнесПроцесс.СогласованиеРеестраПлатежей.ФормаСписка", ПараметрыОткрытияФормы,,,,, ОписаниеЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРеестр(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	ИначеЕсли ДополнительныеПараметры = "Второй реестр" Тогда	
		УстановитьСоответствиеНаСервере(РезультатЗакрытия, АдресРеестра);	
		//
		УстановитьОтбор();
		СформироватьОтчет();
		//
	Иначе
		Отказ = Ложь;
		ЗаблокироватьРеестрНаСервере(РезультатЗакрытия[0], ДополнительныеПараметры, Отказ);
		//
		Если Не Отказ Тогда
			ПоказатьОповещениеПользователя("Реестр обработан!!!!");
		КонецЕсли;
		//
	КонецЕсли  
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор()
	
	КомпоновщикНастроек =  Отчет.КомпоновщикНастроек; 
	ПользовательскийОтбор = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти("ВторойРеестр");
	
	Если ПользовательскийОтбор = Неопределено Тогда
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВторойРеестр");
		НовыйЭлементОтбора.ПравоеЗначение = Истина;
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ИдентификаторПользовательскойНастройки = "ВторойРеестр";
	КонецЕсли;	
	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура УстановитьСоответствиеНаСервере(МассивБизнесПроцессов, АдресРеестра)
	
	//
	ТекущийРеестр = ПолучитьИзВременногоХранилища(АдресРеестра);
	
	
	//
	ИсходныйРеестр = ТекущийРеестр.СкопироватьКолонки();
    ИсходныйРеестр.Колонки.Добавить("ДатаРеестра", Новый ОписаниеТипов("Дата", , ,

                                                   Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	Для Каждого БизнесПроцесс Из МассивБизнесПроцессов Цикл
        Реестр = БизнесПроцесс.ХранилищеРеестраПлатежей.Получить();
        //
        Реестр.Колонки.Добавить("ДатаРеестра");
        Реестр.ЗаполнитьЗначения(НачалоДня(БизнесПроцесс.Дата), "ДатаРеестра");
        //
        ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Реестр, ИсходныйРеестр);
	КонецЦикла;		
	
	ИсходныйРеестр.ЗаполнитьЗначения(Ложь, "Модифицировано, МодифицированоБУХ, ВторойРеестр"); 
		
    
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
                   |    ИсходнаяТаблица.СсылкаБухгалтерия КАК СсылкаБухгалтерия,
                   |    ИсходнаяТаблица.Сумма КАК Сумма,
                   |    ИсходнаяТаблица.Дата КАК Дата,
                   |    ИсходнаяТаблица.ДатаРеестра КАК ДатаРеестра
                   |ПОМЕСТИТЬ ВТ_ИсходнаяТаблица
                   |ИЗ
                   |    &ИсходнаяТаблица КАК ИсходнаяТаблица
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |    ТекущаяТаблица.СсылкаБухгалтерия КАК СсылкаБухгалтерия,
                   |    ТекущаяТаблица.Сумма КАК Сумма,
                   |    ТекущаяТаблица.Дата КАК Дата
                   |ПОМЕСТИТЬ ВТ_ТекущаяТаблица
                   |ИЗ
                   |    &ТекущаяТаблица КАК ТекущаяТаблица
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |    ВТ_ИсходнаяТаблица.СсылкаБухгалтерия КАК СсылкаБухгалтерия,
                   |    СУММА(ВТ_ИсходнаяТаблица.Сумма) КАК Сумма,
                   |    МАКСИМУМ(ВТ_ИсходнаяТаблица.Дата) КАК Дата,
                   |    МАКСИМУМ(ВТ_ИсходнаяТаблица.ДатаРеестра) КАК ДатаРеестра
                   |ПОМЕСТИТЬ ВТ_ИсходнаяТаблица_Групп
                   |ИЗ
                   |    ВТ_ИсходнаяТаблица КАК ВТ_ИсходнаяТаблица
                   |
                   |СГРУППИРОВАТЬ ПО
                   |    ВТ_ИсходнаяТаблица.СсылкаБухгалтерия
                   |
                   |ИНДЕКСИРОВАТЬ ПО
                   |    СсылкаБухгалтерия
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |    ВТ_ТекущаяТаблица.СсылкаБухгалтерия КАК СсылкаБухгалтерия,
                   |    СУММА(ВТ_ТекущаяТаблица.Сумма) КАК Сумма,
                   |    МАКСИМУМ(ВТ_ТекущаяТаблица.Дата) КАК Дата
                   |ПОМЕСТИТЬ ВТ_ТекущаяТаблица_Групп
                   |ИЗ
                   |    ВТ_ТекущаяТаблица КАК ВТ_ТекущаяТаблица
                   |
                   |СГРУППИРОВАТЬ ПО
                   |    ВТ_ТекущаяТаблица.СсылкаБухгалтерия
                   |
                   |ИНДЕКСИРОВАТЬ ПО
                   |    СсылкаБухгалтерия
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |    ВТ_ИсходнаяТаблица_Групп.СсылкаБухгалтерия КАК СсылкаБухгалтерия_Исходная,
                   |    СУММА(ВТ_ИсходнаяТаблица_Групп.Сумма) КАК Сумма_Исходная,
                   |    МАКСИМУМ(ВТ_ИсходнаяТаблица_Групп.Дата) КАК Дата_Исходная,
                   |    ВТ_ТекущаяТаблица_Групп.СсылкаБухгалтерия КАК СсылкаБухгалтерия_Текущая,
                   |    СУММА(ВТ_ТекущаяТаблица_Групп.Сумма) КАК Сумма_Текущая,
                   |    МАКСИМУМ(ВТ_ТекущаяТаблица_Групп.Дата) КАК Дата_Текущая,
                   |    МАКСИМУМ(ВТ_ИсходнаяТаблица_Групп.ДатаРеестра) КАК ДатаРеестра
                   |ПОМЕСТИТЬ ВТ_Сравнение
                   |ИЗ
                   |    ВТ_ТекущаяТаблица_Групп КАК ВТ_ТекущаяТаблица_Групп
                   |        ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ИсходнаяТаблица_Групп КАК ВТ_ИсходнаяТаблица_Групп
                   |        ПО ВТ_ТекущаяТаблица_Групп.СсылкаБухгалтерия = ВТ_ИсходнаяТаблица_Групп.СсылкаБухгалтерия
                   |
                   |СГРУППИРОВАТЬ ПО
                   |    ВТ_ИсходнаяТаблица_Групп.СсылкаБухгалтерия,
                   |    ВТ_ТекущаяТаблица_Групп.СсылкаБухгалтерия
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |    ВТ_Сравнение.СсылкаБухгалтерия_Текущая КАК СсылкаБухгалтерия_Текущая,
                   |    ""Новые платежи!!!"" КАК Комментарий
                   |ИЗ
                   |    ВТ_Сравнение КАК ВТ_Сравнение
                   |ГДЕ
                   |    ВТ_Сравнение.СсылкаБухгалтерия_Исходная ЕСТЬ NULL
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |    ВТ_Сравнение.СсылкаБухгалтерия_Исходная КАК СсылкаБухгалтерия_Исходная,
                   |    ВТ_ИсходнаяТаблица.Сумма КАК Комментарий
                   |ИЗ
                   |    ВТ_Сравнение КАК ВТ_Сравнение
                   |        ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходнаяТаблица КАК ВТ_ИсходнаяТаблица
                   |        ПО ВТ_Сравнение.СсылкаБухгалтерия_Исходная = ВТ_ИсходнаяТаблица.СсылкаБухгалтерия
                   |ГДЕ
                   |    ВЫБОР
                   |            КОГДА ВТ_Сравнение.СсылкаБухгалтерия_Текущая ЕСТЬ NULL
                   |                    И ВТ_Сравнение.Дата_Исходная = ВТ_Сравнение.ДатаРеестра
                   |                ТОГДА ИСТИНА
                   |            ИНАЧЕ ЛОЖЬ
                   |        КОНЕЦ = ИСТИНА
                   |
                   |УПОРЯДОЧИТЬ ПО
                   |    СсылкаБухгалтерия_Исходная
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |    ВТ_Сравнение.СсылкаБухгалтерия_Исходная КАК СсылкаБухгалтерия_Исходная,
                   |    ВТ_Сравнение.Сумма_Текущая - ВТ_Сравнение.Сумма_Исходная КАК Комментарий
                   |ИЗ
                   |    ВТ_Сравнение КАК ВТ_Сравнение
                   |        ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходнаяТаблица КАК ВТ_ИсходнаяТаблица
                   |        ПО ВТ_Сравнение.СсылкаБухгалтерия_Исходная = ВТ_ИсходнаяТаблица.СсылкаБухгалтерия
                   |ГДЕ
                   |    ВЫБОР
                   |            КОГДА ВТ_Сравнение.СсылкаБухгалтерия_Исходная = ВТ_Сравнение.СсылкаБухгалтерия_Текущая
                   |                    И ВТ_Сравнение.Сумма_Исходная <> ВТ_Сравнение.Сумма_Текущая
                   |                ТОГДА ИСТИНА
                   |            ИНАЧЕ ЛОЖЬ
                   |        КОНЕЦ = ИСТИНА
                   |
                   |УПОРЯДОЧИТЬ ПО
                   |    СсылкаБухгалтерия_Исходная
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |    ВТ_Сравнение.СсылкаБухгалтерия_Исходная КАК СсылкаБухгалтерия_Исходная,
                   |    ""Изменена дата платежа!!!"" КАК Комментарий
                   |ИЗ
                   |    ВТ_Сравнение КАК ВТ_Сравнение
                   |        ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходнаяТаблица КАК ВТ_ИсходнаяТаблица
                   |        ПО ВТ_Сравнение.СсылкаБухгалтерия_Исходная = ВТ_ИсходнаяТаблица.СсылкаБухгалтерия
                   |ГДЕ
                   |    ВЫБОР
                   |            КОГДА ВТ_Сравнение.СсылкаБухгалтерия_Исходная = ВТ_Сравнение.СсылкаБухгалтерия_Текущая
                   |                    И ВТ_Сравнение.Сумма_Исходная = ВТ_Сравнение.Сумма_Текущая
                   |                    И ВТ_Сравнение.Дата_Исходная <> ВТ_Сравнение.Дата_Текущая
                   |                ТОГДА ИСТИНА
                   |            ИНАЧЕ ЛОЖЬ
                   |        КОНЕЦ = ИСТИНА
                   |
                   |УПОРЯДОЧИТЬ ПО
                   |    СсылкаБухгалтерия_Исходная
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |    ВТ_Сравнение.СсылкаБухгалтерия_Исходная КАК СсылкаБухгалтерия_Исходная
                   |ИЗ
                   |    ВТ_Сравнение КАК ВТ_Сравнение
                   |ГДЕ
                   |    (ВТ_Сравнение.СсылкаБухгалтерия_Исходная = ВТ_Сравнение.СсылкаБухгалтерия_Текущая
                   |                И ВТ_Сравнение.Сумма_Текущая = ВТ_Сравнение.Сумма_Исходная
                   |                И ВТ_Сравнение.Дата_Исходная = ВТ_Сравнение.Дата_Текущая
                   |            ИЛИ ВТ_Сравнение.СсылкаБухгалтерия_Текущая ЕСТЬ NULL
                   |                И ВТ_Сравнение.Дата_Исходная <> ВТ_Сравнение.ДатаРеестра)
                   |
                   |УПОРЯДОЧИТЬ ПО
                   |    СсылкаБухгалтерия_Исходная";
    
    Запрос.УстановитьПараметр("ИсходнаяТаблица", ИсходныйРеестр);
    Запрос.УстановитьПараметр("ТекущаяТаблица", ТекущийРеестр);
    РезультатПакет = Запрос.ВыполнитьПакет();
    

    #Область ВторойРеестр
    
    //Новые платежи
	Отбор = Новый СписокЗначений;
	Отбор.ЗагрузитьЗначения(РезультатПакет[5].Выгрузить().ВыгрузитьКолонку("СсылкаБухгалтерия_Текущая"));
    
    НовыеПлатежи = ОбщийМодульСервер.ПолучитьСложныйОтборТЗ(ТекущийРеестр, "СсылкаБухгалтерия", ВидСравнения.ВСписке,, Отбор);
        
    
    //Убранные платежи
    ТаблицаДанных = РезультатПакет[6].Выгрузить();
    Отбор = Новый СписокЗначений;
	Отбор.ЗагрузитьЗначения(ТаблицаДанных.ВыгрузитьКолонку("СсылкаБухгалтерия_Исходная"));
    
    УбранныеПлатежи = ОбщийМодульСервер.ПолучитьСложныйОтборТЗ(ИсходныйРеестр, "СсылкаБухгалтерия", ВидСравнения.ВСписке,, Отбор);
    УбранныеПлатежи.ЗагрузитьКолонку(ТаблицаДанных.ВыгрузитьКолонку("Комментарий"), "Комментарий");
    УбранныеПлатежи.ЗаполнитьЗначения(0, "Сумма");
    
    
    //Изменилась сумма
    ТаблицаДанных = РезультатПакет[7].Выгрузить();
    Отбор = Новый СписокЗначений;
	Отбор.ЗагрузитьЗначения(ТаблицаДанных.ВыгрузитьКолонку("СсылкаБухгалтерия_Исходная"));
    
    ИзменённыеПлатежи = ОбщийМодульСервер.ПолучитьСложныйОтборТЗ(ТекущийРеестр, "СсылкаБухгалтерия", ВидСравнения.ВСписке, НаправлениеСортировки.Возр, Отбор);
    ИзменённыеПлатежи.ЗагрузитьКолонку(ТаблицаДанных.ВыгрузитьКолонку("Комментарий"), "Комментарий");
    
    
    //Не перенесена
    ТаблицаДанных = РезультатПакет[8].Выгрузить();
    Отбор = Новый СписокЗначений;
	Отбор.ЗагрузитьЗначения(ТаблицаДанных.ВыгрузитьКолонку("СсылкаБухгалтерия_Исходная"));
    
    НеПеренесённыеПлатежи = ОбщийМодульСервер.ПолучитьСложныйОтборТЗ(ТекущийРеестр, "СсылкаБухгалтерия", ВидСравнения.ВСписке, НаправлениеСортировки.Возр, Отбор);
    НеПеренесённыеПлатежи.ЗагрузитьКолонку(ТаблицаДанных.ВыгрузитьКолонку("Комментарий"), "Комментарий");
    
    
    //Объединяем реестры
    ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УбранныеПлатежи, НовыеПлатежи);
    ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИзменённыеПлатежи, НовыеПлатежи);
    ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НеПеренесённыеПлатежи, НовыеПлатежи);
    
    НовыеПлатежи.ЗаполнитьЗначения(Истина, "ВторойРеестр");  
        
    #КонецОБласти
    
         
    
    
    #Область ПервыйРеестр
    
    //Первый реестр
    Отбор = Новый СписокЗначений;
    Отбор.ЗагрузитьЗначения(РезультатПакет[9].Выгрузить().ВыгрузитьКолонку("СсылкаБухгалтерия_Исходная"));
    
    ПервыйРеестр = ОбщийМодульСервер.ПолучитьСложныйОтборТЗ(ИсходныйРеестр, "СсылкаБухгалтерия", ВидСравнения.ВСписке,, Отбор);
    ПервыйРеестр.ЗаполнитьЗначения(Истина, "Отправлено");          
    
    #КонецОБласти

    
   

    
	//Соединение реестров
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПервыйРеестр, НовыеПлатежи);
	
	
	//
	ПоместитьВоВременноеХранилище(НовыеПлатежи, АдресРеестра);
	
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаблокироватьРеестрНаСервере(Реестр, ВариантБлокировки, Отказ)
	
	Попытка
		ХранилищеОбщихНастроек.Сохранить("РеестрПлатежейСогласование", "БлокировкаРеестра", Новый Структура("Реестр, ВариантБлокировки", Реестр, ВариантБлокировки));
	Исключение
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВариантБлокировкиРеестра(БизнессПроцесс)
	
	УстановитьПривилегированныйРежим(Истина);
	//
	
	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить("РеестрПлатежейСогласование", "БлокировкаРеестра",, "ЛобовДМ");
	Если ЗначениеНастройки = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли БизнессПроцесс <> ЗначениеНастройки.Реестр Тогда
		Возврат Ложь;
	Иначе
		Возврат ЗначениеНастройки.ВариантБлокировки;
	КонецЕсли;
	
	
	//
	УстановитьПривилегированныйРежим(Ложь);
	
	
КонецФункции

#КонецОбласти



#Область ВспомогательныеОБработчики

&НаСервере
Процедура СкомпоноватьИтоговуюТЗ()
    
    //Получим схему компоновки данных
    ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
    Схема = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");  
    
    
    //Установим поля выгрузки
    Поля = "";
    Для Каждого Набор Из Схема.НаборыДанных Цикл
        //
        Для Каждого Поле Из Набор.Поля Цикл             
              Поля = Поля + ";" + Поле.ПутьКДанным + ":" + Поле.Поле;              
        КонецЦикла;    
        //        
    КонецЦикла;                
    
          
    //Установим параметры выгрузки
    Options = Новый Соответствие;
    Options.Вставить("Поля", Поля);
    Options.Вставить("Источник", АдресРеестра);
    Options.Вставить("Отбор", Новый Соответствие);
    
    
    //Выгрузка и обработка результата
    СформироватьОтчет(Options);
    УстановитьЗаголовкиПолей(Options["Результат"].Колонки);
        
    
    //Поместим во временное хранилище
    ПоместитьВоВременноеХранилище(Options["Результат"], АдресИсточника);
    
    
КонецПроцедуры


&НаСервереБезКонтекста
Функция УстановитьЗаголовкиПолей(Колонки)
    
    СписокКолонок = "";
    
    Для Каждого Колонка Из Колонки Цикл
        НовоеИмя = СтрЗаменить(СтрЗаменить(Колонка.Заголовок, ".", ""), " ", ""); 
        Колонка.Имя = НовоеИмя;
        СписокКолонок = СписокКолонок + "," + НовоеИмя;
    КонецЦикла; 
    
    Возврат СписокКолонок;
    
КонецФункции

 
#КонецОбласти


