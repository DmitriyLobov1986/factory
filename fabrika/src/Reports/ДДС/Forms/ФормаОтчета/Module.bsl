/////////////////ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ ФОРМЫ//////////
//////////////////////////////////////////////////////
Перем НастройкаКомпоновкиДляРасшифровки;
&НаКлиенте
Перем УстанавливаемаяДата;
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////




&НаКлиенте          
Процедура СкомпоноватьОтчёт()
	
	СкомпоноватьРезультат(РежимКомпоновкиРезультата.Фоновый);
	
	Попытка
		ВывестиСообщения();                                      	
	Исключение
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура СформироватьОтчёт(Команда)
	СкомпоноватьОтчёт();
	//
	Элементы.РезультатДляРедактирования_1.Видимость = Ложь;
	Элементы.Результат.Видимость = Истина;
    //
КонецПроцедуры


&НаКлиенте
Процедура ПеречитатьОтчёт(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Если НЕ Перечитывать Тогда
		возврат;	
		
	Иначе Перечитывать = НЕ Перечитывать;
	КонецЕсли; 
	
	СформироватьИзВыделеннойОбласти();
	//
	СвернутьГруппировки(Неопределено);
	//
	
	Если НЕ НастройкаДляРедактирования И НЕ ДетализацияРасходов Тогда
	  ПодключитьОбработчикОжидания("СкомпоноватьОтчёт", 1, Истина);	
	КонецЕсли;  

КонецПроцедуры





#Область СобытияФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдресСхемыКомпоновкиДанных = Новый Структура;
	
	//Получаем схему из макета
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	СхемаДляРедактирования = ОтчетОбъект.ПолучитьМакет("ДляРедактирования");
	СхемаДетализацияРасходов = ОтчетОбъект.ПолучитьМакет("ДетализацияРасходов");
	СхемаОсновная = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	//Сохраняем Url схем во временное хранилище
	АдресСхемыКомпоновкиДанных.Вставить("ДляРедактирования", ПоместитьВоВременноеХранилище(СхемаДляРедактирования, УникальныйИдентификатор));
	АдресСхемыКомпоновкиДанных.Вставить("ДетализацияРасходов", ПоместитьВоВременноеХранилище(СхемаДетализацияРасходов, УникальныйИдентификатор));
	АдресСхемыКомпоновкиДанных.Вставить("Основная", ПоместитьВоВременноеХранилище(СхемаОсновная, УникальныйИдентификатор));
    
   	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.Организации") Тогда	
		РезультатДляРедактированияПриИзмененииСодержимогоОбласти(ТекущийЭлемент, 
		ЭтаФорма[ТекущийЭлемент.Имя].ТекущаяОбласть, ВыбранноеЗначение);	
		
	Иначе СписокОрганизаций.Добавить(ВыбранноеЗначение);
		сообщить(ВыбранноеЗначение);
		
	КонецЕсли;														   
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДетализацияРасходов" Тогда
		АдресДетализации = Параметр;
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Получение всех открытых окон приложения
	ОкнаПриложения = ПолучитьОкна();
    
    
	Для каждого ОкноПриложения Из ОкнаПриложения Цикл
		// Анализ заголовка окна
		Если Найти(ОкноПриложения.Заголовок, "Загрузка платежей") > 0 Тогда
			// Получение формы
			НайденнаяФорма = ОкноПриложения.Содержимое[0];
			Оповестить("ДетализацияРасходов", НайденнаяФорма.АдресДетализации);
		КонецЕсли;
    КонецЦикла;
        
     
    //
    Если СтрНайти(ПредставлениеТекущегоВарианта, "Глоссаб") > 0 Тогда
        Запад = Истина
    КонецЕсли; 
        	

	
КонецПроцедуры


#КонецОбласти





//////////////////////////////////////ПРОЦЕДУРЫ ОБРАБОТКИ ТАБЛИЧНОГО ДОКУМЕНТА РЕЗУЛЬТАТ ДЛЯ РЕДАКТИРОВАНИЯ//////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура РезультатДляРедактированияПриИзмененииСодержимогоОбласти(Элемент, Область, Получатель = Неопределено)
	
	Если Область.Расшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	//
	Текст = ?(Не ЗначениеЗаполнено(Область.Текст), "0", СтрЗаменить(Область.Текст, " ", ""));
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	Сумма = ТипЧисло.ПривестиЗначение(Текст);
	
	ОстатокНаКонец = ПолучитьОстатокНаКонец(Область);
	ПолучитьРасшифровку(Область.Расшифровка, Сумма, ОстатокНаКонец, Получатель);
			
	Если ЗаписатьВРегистр = "Распределить по счетам" Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПеречитатьОтчёт", ЭтотОбъект);
		
		П = Новый Структура("Обработка", Обработка);
		ОткрытьФорму("Обработка.ЗаполнениеРегистраДДС.Форма.Форма", П, ЭтаФорма, , , , Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
	  Перечитывать = Истина;	
	  ПеречитатьОтчёт();	
		
	КонецЕсли;   
	
КонецПроцедуры


&НаКлиенте
Процедура РезультатДляРедактированияОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Перем ВыполненноеДействие;
	Перем ПараметрВыбранногоДействия;
	
	СтандартнаяОбработка = Ложь;     
	
	//
	Если ДетализацияРасходов 
		             И Элемент.Имя <> "РезультатДляРедактирования_1" Тогда
	  Схема = АдресСхемыКомпоновкиДанных.ДетализацияРасходов;
    Иначе
	  Схема = АдресСхемыКомпоновкиДанных.ДляРедактирования;
	КонецЕсли;	
    //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема);
	АдресРасшифровки = ЭтаФорма["ДанныеРасшифровки" + СтрЗаменить(Элемент.Имя, "Результат", "")];
	ОбработкаРасшифровкиКД = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресРасшифровки, ИсточникНастроек);           
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	Если Элемент.Имя <> "РезультатДляРедактирования_1" Тогда
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	КонецЕсли;
	
	ДополнительныеДействия = Новый СписокЗначений ;
	ДополнительныеДействия.Добавить("Выбрать получателя",,, БиблиотекаКартинок.Выбрать);
	ДополнительныеДействия.Добавить("Добавить организации",,, БиблиотекаКартинок.ДобавитьВИзбранное);
	ДополнительныеДействия.Добавить("Отбор организаций",,, БиблиотекаКартинок.ОтборКомпоновкиДанных);
	ДополнительныеДействия.Добавить("ДДС",,, БиблиотекаКартинок.ОстаткиДенег);
		
	Если ДетализацияРасходов И Элемент.Имя <> "РезультатДляРедактирования_1" Тогда
		ДополнительныеДействия.Добавить("Сменить рассчётный счёт",,, БиблиотекаКартинок.ирЗаменитьТаблицу);
		ДополнительныеДействия.Добавить("Сменить дату платежа",,, БиблиотекаКартинок.ирЗаменитьТаблицу);
		ДополнительныеДействия.Добавить("Записать в базу");
		ДополнительныеДействия.Добавить("Детальное редактирование реестра",,, БиблиотекаКартинок.Детализация);
	КонецЕсли;	
	
	ОбработкаРасшифровкиКД.ВыбратьДействие(Расшифровка, ВыполненноеДействие, ПараметрВыбранногоДействия, ДоступныеДействия, ДополнительныеДействия);
	
	
	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		ОткрытьЗначение(ПараметрВыбранногоДействия);
		
	ИначеЕсли ВыполненноеДействие = "Выбрать получателя" Тогда
		//
		РасшифровкаОбласти = Новый Структура("РасшифровкаМассив, ДанныеРасшифровки", ПолучитьРасшифровкиВыделеннойОбласти(ЭтаФорма[Элемент.Имя]), 
		                                                                                                                ДанныеРасшифровкиДляРедактирования);
		ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе, Расшифровка", Истина, РасшифровкаОбласти);
		//
		ОткрытьФорму("РегистрСведений.НастройкаПолейОтправки.ФормаСписка", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		
	ИначеЕсли ВыполненноеДействие = "Добавить организации" Тогда
		//
		РасшифровкаОбласти = Новый Структура("РасшифровкаМассив, ДанныеРасшифровки", ПолучитьРасшифровкиВыделеннойОбласти(РезультатДляРедактирования), 
		                                                                                                                ДанныеРасшифровкиДляРедактирования);
		ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе, Расшифровка, ДобавитьОрганизации", Ложь, РасшифровкаОбласти, Истина);
		//
		ОткрытьФорму("РегистрСведений.НастройкаПолейОтправки.ФормаСписка", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		
		
		
	ИначеЕсли ВыполненноеДействие = "Отбор организаций"	Тогда
		Элементы.ОтборОрганизаций.Видимость = НЕ Элементы.ОтборОрганизаций.Видимость;		
		
		
	ИначеЕсли ВыполненноеДействие = "ДДС" Тогда
		//
		РасшифровкаОбласти = Новый Структура("РасшифровкаМассив, ДанныеРасшифровки", ПолучитьРасшифровкиВыделеннойОбласти(ЭтаФорма[Элемент.Имя]), 
		                                                                                                                ДанныеРасшифровкиДляРедактирования);
		ПараметрыФормы = Новый Структура("Расшифровка, КлючПользовательскихНастроек", РасшифровкаОбласти, "Пустые");
		//
		ОткрытьФорму("РегистрСведений.ДДС.ФормаСписка", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		
		
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>		
		
		
	ИначеЕсли ВыполненноеДействие = "Сменить рассчётный счёт" Тогда
        РедактироватьРеквизиты();
		СформироватьИзВыделеннойОбласти();
		СвернутьГруппировки(Неопределено, "РезультатДляРедактирования");
		
				
	ИначеЕсли ВыполненноеДействие = "Сменить дату платежа" Тогда
		Отказ = Ложь;
		РедактироватьРеквизиты("Дата", Отказ);
		Если НЕ Отказ Тогда
		  СформироватьИзВыделеннойОбласти();
		  СвернутьГруппировки(Неопределено, "РезультатДляРедактирования");
	  КонецЕсли;  
	  
	  
     ИначеЕсли ВыполненноеДействие = "Детальное редактирование реестра" Тогда
	    ОткрытьДетальноеРедактированиеРеестра();         
  
		
	ИначеЕсли ВыполненноеДействие = "Записать в базу" Тогда	
		Оповестить("ЗаписатьДетализациюРасходов", АдресДетализации);
		
		
	ИначеЕсли ТипЗнч(ПараметрВыбранногоДействия) = Тип("НастройкиКомпоновкиДанных") Тогда
		 ОтработатьРасшифровку(Схема, Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(АдресРасшифровки,
		                                                                          Расшифровка,
																				  ПараметрВыбранногоДействия));
		ТД = ПолучитьИзВременногоХранилища(АдресТаблицыРасшифровки);																		  
		ТД.Автомасштаб = Истина;
		ТД.Показать("Расшифровка отчёта");		
		
	ИначеЕсли ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
		Возврат;
		
			
	КонецЕсли;	
		
		
	
КонецПроцедуры


&НаКлиенте
Процедура РезультатДляРедактированияОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	РезультатДляРедактированияПриИзмененииСодержимогоОбласти(Элемент, ЭтаФорма[ТекущийЭлемент.Имя].ТекущаяОбласть);	
		
	
КонецПроцедуры



&НаКлиенте
Процедура ВидДетализацииПриИзменении(Элемент)
	
	ДетализацияРасходов = ?(ВидДетализации = 0, Ложь, Истина);
		
	СформироватьИзВыделеннойОбласти();
	
	СвернутьГруппировки(Неопределено, "РезультатДляРедактирования");	
	
	
КонецПроцедуры


&НаСервере
Процедура ОтработатьРасшифровку(Схема, ОписаниеОбработкиРасшифровки)
	
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема);
	ОбработкаРасшифровкиКД = Новый ОбработкаРасшифровкиКомпоновкиДанных(ОписаниеОбработкиРасшифровки.Данные, ИсточникНастроек);           
	
	НастройкаКомпоновкиДляРасшифровки = ОбработкаРасшифровкиКД.ПрименитьНастройки(ОписаниеОбработкиРасшифровки.Идентификатор, ОписаниеОбработкиРасшифровки.ПрименяемыеНастройки);
	
	//
	СформироватьИзВыделеннойОбласти();
	НастройкаКомпоновкиДляРасшифровки = Неопределено;
	
	
КонецПроцедуры


&НаСервере
Процедура СформироватьИзВыделеннойОбласти(МассивРасшифровок = Неопределено, АдресРасшифровки = "ДанныеРасшифровки")
	
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	Если МассивРасшифровок <> Неопределено Тогда
		
		Если НЕ Элементы.ОтборОрганизаций.Видимость Тогда
			СписокОрганизаций.Очистить();
			СписокПериодов.Очистить();
			//
			Компоновщик = ?(НастройкаДляРедактирования, КомпоновщикНастроекРезервный, Отчет.КомпоновщикНастроек);
			СписокПериодов.Добавить(Компоновщик.ПользовательскиеНастройки.Элементы[0].Значение);
		КонецЕсли;
				
		ЗаписатьВыделеннуюОбластьНаСервере(МассивРасшифровок, ЭтаФорма[АдресРасшифровки], СписокОрганизаций, СписокПериодов);
		
	КонецЕсли;  
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
		
	
	
	Если СписокОрганизаций.Количество() = 0 И ВидДетализации <> 2 Тогда
		РезультатДляРедактирования.Очистить();
		
	ИначеЕсли ВидДетализации = 0 Тогда   
		РедактироватьНаСервере(СписокОрганизаций, СписокПериодов, "ДляРедактирования", Тип("ГенераторМакетаКомпоновкиДанных"));
		//
		Элементы.РезультатДляРедактирования.Редактирование = Истина; 
		//
	Иначе
		//
		Если НастройкаКомпоновкиДляРасшифровки = Неопределено Тогда
			РедактироватьНаСервере(СписокОрганизаций, СписокПериодов, "ДляРедактирования", Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), "ДляДетализацииРасходов");
			РедактироватьНаСервере(СписокОрганизаций, СписокПериодов, "ДетализацияРасходов", Тип("ГенераторМакетаКомпоновкиДанных"));
			//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
			//РедактироватьНаСервере(СписокОрганизаций, СписокПериодов, "ДляРедактирования", Тип("ГенераторМакетаКомпоновкиДанных"),, "РезультатДляРедактирования_1");
		Иначе
			РедактироватьНаСервере(СписокОрганизаций, СписокПериодов, "ДетализацияРасходов", Тип("ГенераторМакетаКомпоновкиДанных"));
		КонецЕсли;	
		//
		Элементы.РезультатДляРедактирования.Редактирование = Ложь; 
		
	КонецЕсли;
	
	
	
КонецПроцедуры


&НаСервере
Процедура РедактироватьНаСервере(Организации, 
	                             Период, 
								 ИмяСхемы,
								 ТипГенератораМакета, 
								 ВариантОтчета = "Основной",
								 ТаблицаВывода = "РезультатДляРедактирования")
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		
	
	//Создадим компоновщик настроек компоновки данных
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	//Создадим внешний набор данных
	ВнешнийНаборДанных = Новый Структура;
	
	//
	ОтборПараметрПериод = Истина;	
	//
	
	
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	
	Если (ИмяСхемы = "ДляРедактирования" Или ИмяСхемы = "ДетализацияРасходов")
		                                  И  ВариантОтчета = "Основной"          Тогда
		
		Схема = ОтчетОбъект.ПолучитьМакет(ИмяСхемы);		
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		
		//Определим настройки компоновки данных
		Если НЕ НастройкаДляРедактирования ИЛИ
			                                  (ИмяСхемы = "ДляРедактирования" И ДетализацияРасходов) Тогда
			
			НастройкиКомпоновки = ХранилищеПользовательскихНастроекОтчетов.Загрузить("ОтчетДДС", ИмяСхемы + ".ОбщиеНастройки");
						
			Если НастройкиКомпоновки = Неопределено Тогда
				НастройкиКомпоновки = Схема.ВариантыНастроек[ВариантОтчета].Настройки;
			КонецЕсли;	
						
		Иначе
			НастройкиКомпоновки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		КонецЕсли;
		//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=
		
		
		//Определим есть ли пользовательская настройка периода и организации
		ОтборПериод = Истина;
		ОтборОрганизация = Истина;
				
		Для Каждого Отбор из НастройкиКомпоновки.Отбор.Элементы Цикл
			
			Если ТипЗнч(Отбор) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			
			Если Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Период") Тогда
				ОтборПериод = НЕ Отбор.Использование;
				
			ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
				
				Если Отбор.Использование И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					Организация = Отбор.ПравоеЗначение;
					Отбор.Использование = ?(Организация.Количество() > 0, Истина, Ложь);
					ОтборОрганизация = Ложь;
					СписокОрганизаций = Организация;
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
		
		
		ПараметрПериод = НастройкиКомпоновки.ПараметрыДанных.Элементы.Найти("Период");
		
		Если ЗначениеЗаполнено(ПараметрПериод.ИдентификаторПользовательскойНастройки) Тогда
			Если ПараметрПериод.Использование Тогда
				ОтборПараметрПериод = Ложь;
			Иначе			
				ПараметрПериод.ИдентификаторПользовательскойНастройки = "";
				ПараметрПериод.Использование = Истина;
			КонецЕсли;
		КонецЕсли;	
		//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
		
		
		//Установим итоговые отборы
		Если ИмяСхемы = "ДляРедактирования" Тогда
			
			//Если передан список периодов установим отбор
			Если Период.Количество() > 1 Тогда
				
				СписокПериодовКопия = Период.Скопировать();
				СписокПериодовКопия.Удалить(0);
				
				Если ОтборПериод Тогда
					ФиксированныйОтбор = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ФиксированныйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Период");
					ФиксированныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
					ФиксированныйОтбор.ПравоеЗначение = СписокПериодовКопия;
				КонецЕсли;
				
			КонецЕсли;		 
			
			
			//Для каждой организации включим свою таблицу
			Для Индекс = 0 По Организации.Количество() - 1 Цикл
				
				Попытка
					Таблица = НастройкиКомпоновки.Структура[Индекс];
					Таблица.Использование = Истина;
					
					//Установка отбора в группировке "Организация"
					Таблица.Строки[0].Структура[0].Отбор.Элементы[0].ПравоеЗначение = Организации[Индекс].Значение;
					
					//Установка отбора в группировке "Тип движения"
					Таблица.Колонки[0].Отбор.Элементы[1].ПравоеЗначение = Организации[Индекс].Значение;
					Таблица.Колонки[1].Отбор.Элементы[1].ПравоеЗначение = Организации[Индекс].Значение;
					Таблица.Колонки[2].Отбор.Элементы[1].ПравоеЗначение = Организации[Индекс].Значение;
					Таблица.Колонки[3].Отбор.Элементы[1].ПравоеЗначение = Организации[Индекс].Значение;
				Исключение
					Прервать;
				КонецПопытки;	
				
			КонецЦикла;		
			
			
			
		ИначеЕсли ИмяСхемы = "ДетализацияРасходов" Тогда
			
			//УстановимОтбор по организации
			Если ОтборОрганизация И ВидДетализации = 1 Тогда
				ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ПолеОтбора = Новый ПолеКомпоновкиДанных("Организация");
				ЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				ЭлементОтбора.ПравоеЗначение = Организации;
			КонецЕсли;
			
			
			
			//Установим отбор на тип организации
			ЗападныеКомпании = Новый СписокЗначений;
			ЗападныеКомпании.Добавить(Перечисления.ТипОрганизации.Таможня);
			ЗападныеКомпании.Добавить(Перечисления.ТипОрганизации.Глоссаб);
			//
			ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора = Новый ПолеКомпоновкиДанных("Организация.ТипОрганизации");
			ЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
			ЭлементОтбора.ВидСравнения = ?(Запад, ВидСравненияКомпоновкиДанных.ВСписке, ВидСравненияКомпоновкиДанных.НеВСписке);
			ЭлементОтбора.ПравоеЗначение = ЗападныеКомпании;
	
			
				
			//Установим внешний набор данных
			Попытка
				РеестрПлатежей = ПолучитьИзВременногоХранилища(АдресДетализации);
				ВнешнийНаборДанных.Вставить("РеестрПлатежей", РеестрПлатежей.Скопировать(Новый Структура("ОтборСуществующихПП", Ложь)));
				//
				ТЗостатков = ПолучитьИзВременногоХранилища(АдресТЗостатков);
				Если ТЗостатков.Колонки.Найти("ОстатокИсходный") = Неопределено Тогда
					ТЗостатков.Колонки.ПользовательскиеПоляПоле1.Имя = "ОстатокИсходный";
				КонецЕсли;
				//
				Если ТЗостатков.Колонки.Найти("Контрагент") = Неопределено Тогда
					ТЗОстатков.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("Строка", ,
														   Новый КвалификаторыСтроки(10, ДопустимаяДлина.Переменная)));
				    ТЗостатков.ЗаполнитьЗначения("Остаток", "Контрагент");					
				КонецЕсли;
			    //
				ВнешнийНаборДанных.Вставить("ОстатокНаСчетах", ТЗостатков);
				//
			Исключение
				ОбщийМодульСервер.ДобавитьСоообщениеВмассив(, "Загрузите платежи с помощью обработки ""Загрузка платежей""");
				РезультатДляРедактирования.Очистить();
				возврат;
			КонецПопытки;	
			
		КонецЕсли;
		//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
		
		
		//Загрузим настройки в компоновщик
		Если НастройкаКомпоновкиДляРасшифровки <> Неопределено Тогда
			НастройкиКомпоновки = НастройкаКомпоновкиДляРасшифровки;
			ТаблицаВыводаРасшифровки = Новый ТабличныйДокумент;
		КонецЕсли;	
			
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
		//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=
				
		
	Иначе
		//Из схемы возьмем настройки по умолчанию
		Схема = ОтчетОбъект.ПолучитьМакет(ИмяСхемы);
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.ВариантыНастроек[ВариантОтчета].Настройки);
		
	КонецЕсли;
	
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	
	
	//Установим значения параметров для макета
	Если ОтборПараметрПериод Тогда
		ПараметрПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
		Если ТипЗнч(Период) = Тип("СписокЗначений") Тогда
			Сегодня = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
			ПараметрПериод.Значение = ?(Период.Количество() > 0, Период[0].Значение, Сегодня); 
		Иначе	
			ПараметрПериод.Значение = Период;
		КонецЕсли;	
	КонецЕсли;
	
	Попытка
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Депозит", Депозит);
	Исключение	
	КонецПопытки;
	//
	
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	НовыеДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(Схема, КомпоновщикНастроек.ПолучитьНастройки(), НовыеДанныеРасшифровки, , ТипГенератораМакета);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, ВнешнийНаборДанных, НовыеДанныеРасшифровки);
	
	//Выводим результат в табличный документ
	Если ТипГенератораМакета = Тип("ГенераторМакетаКомпоновкиДанных") Тогда
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		//
		Если НастройкаКомпоновкиДляРасшифровки = Неопределено Тогда
			ЭтаФорма[ТаблицаВывода].Очистить();
			ПроцессорВывода.УстановитьДокумент(ЭтаФорма[ТаблицаВывода]);
			ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			ЭтаФорма["ДанныеРасшифровки" + СтрЗаменить(ТаблицаВывода, "Результат", "")] = ПоместитьВоВременноеХранилище(НовыеДанныеРасшифровки, ЭтаФорма.УникальныйИдентификатор);
		Иначе
			ПроцессорВывода.УстановитьДокумент(ТаблицаВыводаРасшифровки);
			ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			АдресТаблицыРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаВыводаРасшифровки, УникальныйИдентификатор);
		КонецЕсли;		  
		//
	Иначе
		ТЗ = Новый ТаблицаЗначений;
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ТЗ);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		АдресТЗостатков = ПоместитьВоВременноеХранилище(ТЗ, ЭтаФорма.УникальныйИдентификатор);	
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////ПРОЦЕДУРЫ ОБРАБОТКИ ТАБЛИЧНОГО ДОКУМЕНТА РЕЗУЛЬТАТ//////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОбновитьТаблицу(Команда)
	
	Элементы.МакетРедактирования.Видимость = Истина;
	Элементы.МакетРедактирования.Поведение = ПоведениеОбычнойГруппы.Обычное;
	ВидДетализации = 0;
	ДетализацияРасходов = Ложь;
	
	//
	ТекущаяТаблица = ЭтаФорма[ЭтаФорма.ТекущийЭлемент.Имя];
	АдресРасшифровки = "ДанныеРасшифровки" + СтрЗаменить(ЭтаФорма.ТекущийЭлемент.Имя, "Результат", "");
	//
	
	//
	МассивОбастей = ОбщийМодульКлиент.ПолучениеДанныхОбластиТабличногоДокумента(ТекущаяТаблица);
	СформироватьИзВыделеннойОбласти(ПолучитьРасшифровкиВыделеннойОбласти(МассивОбастей), АдресРасшифровки);
	
	//
	//СвернутьГруппировки(Неопределено);
		
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Расшифровка = Неопределено Тогда
		Элементы.МакетРедактирования.Видимость = НЕ Элементы.МакетРедактирования.Видимость;
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Функция ПолучитьРасшифровкиВыделеннойОбласти(ТабличныйДокумент)
	
	
	МассивРасшифровок = Новый Массив;	
	
	Если ТипЗнч(ТабличныйДокумент) = Тип("Массив") Тогда
		ОбластьАнализа = ТабличныйДокумент;
	Иначе	
		ОбластьАнализа = ТабличныйДокумент.ВыделенныеОбласти; 
	КонецЕсли;	
	
		
	Для Каждого область из ОбластьАнализа Цикл
		
		Если Область.Расшифровка <> Неопределено Тогда
			МассивРасшифровок.Добавить(Область.Расшифровка);
		КонецЕсли;
		
	КонецЦикла;	
	
	
	возврат МассивРасшифровок;
	
КонецФункции


&НаКлиенте
Процедура ДДС(Команда)
	
	//
	РасшифровкаОбласти = Новый Структура("РасшифровкаМассив, ДанныеРасшифровки", ПолучитьРасшифровкиВыделеннойОбласти(Результат), 
	                                                                                                                         ДанныеРасшифровки);
	ПараметрыФормы = Новый Структура("Расшифровка, КлючПользовательскихНастроек", РасшифровкаОбласти, "Пустые");
	//
	ОткрытьФорму("РегистрСведений.ДДС.ФормаСписка", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ЗаписатьВыделеннуюОбластьНаСервере(МассивРасшифровок, ДанныеРасшифровки, СписокОрганизаций, СписокПериодов)
	
	//Получим структуры с расшифроками
	РасшифровкаВыделеннойОбласти = Новый Массив;		
	
	Для Каждого Идентификатор из МассивРасшифровок Цикл
		РасшифровкаВыделеннойОбласти.Добавить(ОбщийМодульСервер.ПолучениеРасшифровкиВСтруктуру(Идентификатор, ДанныеРасшифровки, Новый Структура));
	КонецЦикла;
		
	
	//Выберем организации и периоды
	Для Каждого ДанныеОбласти из РасшифровкаВыделеннойОбласти Цикл 
		
		Если ДанныеОбласти.Свойство("Организация") Тогда
			Если СписокОрганизаций.НайтиПоЗначению(ДанныеОбласти.Организация) = Неопределено Тогда
			  СписокОрганизаций.Добавить(ДанныеОбласти.Организация);	
			КонецЕсли;  
		КонецЕсли;
		
		Если ДанныеОбласти.Свойство("Период") Тогда
			Если СписокПериодов.НайтиПоЗначению(ДанныеОбласти.Период) = Неопределено Тогда
			  СписокПериодов.Добавить(ДанныеОбласти.Период);	
			КонецЕсли;  
    	КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




//////////////////////////////////////ОБРАБОТКА РЕГИСТРА СВЕДЕНИЙ ДДС/////////////////
//////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПолучитьРасшифровку(Расшифровка, Сумма, ОстатокНаКонец, Получатель)
	
	
	СтруктураРасшифровки = ОбщийМодульСервер.ПолучениеРасшифровкиВСтруктуру(Расшифровка, 
	                                                                        ЭтаФорма["ДанныеРасшифровки" + СтрЗаменить(ТекущийЭлемент.Имя, "Результат", "")], 
																			Новый Структура);
																			
    																			
																			
	////Дима 22.09.2017 17:32:37////Допишем в расшифровку сумму
	СтруктураРасшифровки.Вставить("Сумма", Сумма);
	//конец Дима																			
	
	
	
	//Допишем в расшифровку получателя (если задан)
	Если НЕ Получатель = Неопределено Тогда
		СтруктураРасшифровки.Вставить("Получатель", Получатель);
		
	ИначеЕсли НЕ СтруктураРасшифровки.Свойство("Получатель") Тогда
		  СтруктураРасшифровки.Вставить("Получатель", Неопределено);
	КонецЕсли;
	
	
	////Дима 22.09.2017 16:25:49////Допишем в расшифровку тип движения и сумму для детальных расходов
	Если ДетализацияРасходов И ТекущийЭлемент.Имя = "РезультатДляРедактирования" Тогда
		СтруктураРасшифровки.Вставить("ТипДвижения", Перечисления.ТипДвиженияДДС.Списание);
	КонецЕсли;
	//конец Дима
	
	
	//Допишем в расшифровку конечный остаток по редактируемому счету
	СтруктураРасшифровки.Вставить("ОстатокНаКонец", ОстатокНаКонец);
	
	
	
	////////////////////////////////////////////////////////////////////////////	
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	ОбработкаДДС = РеквизитФормыВЗначение("Обработка");
	ОбработкаДДС.Расшифровка = СтруктураРасшифровки;
	ЗначениеВРеквизитФормы(ОбработкаДДС, "Обработка");
	
	
	//Проверим по регистру ДДС
	СделатьЗаписьВРегистр(Получатель);
	
КонецПроцедуры

&НаСервере
Процедура СделатьЗаписьВРегистр(Получатель)
	
	
	ОбработкаДДС = РеквизитФормыВЗначение("Обработка");
	
	ЗаписатьВРегистр = "";
	
	ОбработкаДДС.СообщенияПользователю = Новый Массив;
	
	Если Не ОбработкаДДС.ПроверитьНаСоответствиеРегиструНастройкаПолей() Тогда
		ЗаписатьВРегистр = "Ошибка";
		
	ИначеЕсли ТипЗнч(ОбработкаДДС.Расшифровка.Получатель) = Тип("СправочникСсылка.Контрагенты") Тогда
		ЗаписатьВРегистр = "Распределить по счетам";
		
	ИначеЕсли ОбработкаДДС.Расшифровка.Получатель = Справочники.ПолучателиДДС.Перевод Тогда
		ЗаписатьВРегистр = "Распределить по счетам";
		
	ИначеЕсли ОбработкаДДС.Расшифровка.Получатель = Справочники.ПолучателиДДС.Конвертация Тогда
		ЗаписатьВРегистр = "Распределить по счетам";
		
	ИначеЕсли ОбработкаДДС.Расшифровка.Получатель = Справочники.ПолучателиДДС.Депозит Тогда
		ЗаписатьВРегистр = "Распределить по счетам";
		
	ИначеЕсли Получатель <> Неопределено Тогда
		ЗаписатьВРегистр = "Распределить по счетам";
		
	Иначе ОбработкаДДС.ПроверитьНаСоответствиеРегиструДДС(); 
		  ОбработкаДДС.ЗаписатьВРегистр();
		  ЗаписатьВРегистр = "Записано";
	КонецЕсли;	
	
	ЗначениеВРеквизитФормы(ОбработкаДДС, "Обработка");
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщения()
	
	Для каждого сообщение из Обработка.СообщенияПользователю Цикл
		Сообщить(Сообщение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОстатокНаКонец(Область)
	Перем Текст;

	КолонкаПоиска = ?(НЕ ДетализацияРасходов, "Конец", "Остаток на конец");
	
	Колонка = ЭтаФорма[ТекущийЭлемент.Имя].НайтиТекст(КолонкаПоиска, Область,,,, Ложь);
		
	Выход = ?(Колонка = Неопределено, Истина, Ложь);
	
	y = 0;
	Текст = 0;
	Пока Выход = Ложь Цикл
		Адрес = "R" + Формат(Область.Верх - y, "ЧГ=0") + "C" + Формат(Колонка.Лево, "ЧГ=0");
		Текст = ЭтаФорма[ТекущийЭлемент.Имя].Область(Адрес).Текст;
		//
		Выход = НЕ ДетализацияРасходов ИЛИ СтрНайти(Текст, "ost") ИЛИ СтрНайти(Текст, "Остаток на конец") > 0; 
		y = y + 1;
	КонецЦикла;	  
	
	
	Попытка
		Возврат Число(СтрЗаменить(Текст, "ost", ""));
	Исключение	
		возврат 0;
	КонецПопытки;	
	
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////



#Область КомандыФормы

&НаКлиенте
Процедура СвернутьГруппировки(Команда, ТаблицыДляОбработки = "")
	
	
	//
	ДоступныеТаблицы = Новый Массив;
	ДоступныеТаблицы.Добавить(Новый Структура("Имя, Уровень", "Результат", 1));
	//
	Уровень = ?(ДетализацияРасходов, УровеньГруппировкиДетализации, 3);
	ДоступныеТаблицы.Добавить(Новый Структура("Имя, Уровень", "РезультатДляРедактирования", Уровень));
	//
	
	Для Каждого Таблица Из ДоступныеТаблицы Цикл
		
		КоличествоТаблиц = 1;
		Если Не ПустаяСтрока(ТаблицыДляОбработки) Тогда
			КоличествоТаблиц = СтрНайти(Таблица.Имя, ТаблицыДляОбработки);
		КонецЕсли;		
		
		КоличествоУровней = ЭтаФорма[Таблица.Имя].КоличествоУровнейГруппировокСтрок();
		//
		Если КоличествоУровней = 0 ИЛИ КоличествоТаблиц = 0 Тогда
			Продолжить;
		КонецЕсли;	
		//		
		Для Уровень = 1 По КоличествоУровней - Мин(КоличествоУровней - 1, Таблица.Уровень - 1)  Цикл
			ЭтаФорма[Таблица.Имя].ПоказатьУровеньГруппировокСтрок(КоличествоУровней - Уровень);
		КонецЦикла;
		
	КонецЦикла;
	
	
	//
	РезультатДляРедактирования.ФиксацияСлева = 2;
		
	
		
КонецПроцедуры

////Дима 26.02.2015 10:09:40////Получение суммы выдленных ячеек табличных документов
&НаКлиенте
Процедура ПоказатьСумму(Команда)
	
	ДанныеВыделения = ОбщийМодульКлиент.ПолучениеДанныхОбластиТабличногоДокумента(РезультатДляРедактирования);
	ДанныеВыделения2 = ОбщийМодульКлиент.ПолучениеДанныхОбластиТабличногоДокумента(Результат);
	
	Сумма = 0;
	
	Для Каждого значение из ДанныеВыделения Цикл
		
		Попытка
			Сумма = Сумма + число(значение.Текст);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	Для Каждого значение из ДанныеВыделения2 Цикл
		
		Попытка
			Сумма = Сумма + число(значение.Текст);
		Исключение
		КонецПопытки;
		
	КонецЦикла;	
	
	ОчиститьСообщения();
	Сообщить("Сумма = " + Сумма);	
	
КонецПроцедуры
//конец Дима

////Дима 26.02.2015 10:19:11////Создаёт остатки на начало нужного периода на основе остатков на конец
&НаКлиенте
Процедура ЗаписатьОстатокНаКонец(Команда)
	
	ВвестиДату(ДатаОстаткаНаНачало, "На какой день остатки?")
				
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОстатокНаКонецНаСервере()
	
	//Получим таблицу конечных остатков
	Период = Новый СтандартныйПериод;
	Период.ДатаНачала = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.ДатаНачала;
	Период.ДатаОкончания = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.ДатаНачала;
	
	РедактироватьНаСервере( , Период, "ДляТаблицыЗначений", Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресТЗостатков);
	
	ТЗ.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число",
	Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	
	ТЗ.ЗаполнитьЗначения(Перечисления.ТипДвиженияДДС.ОстатокНаНачало, "ТипДвижения");
	ТЗ.ЗаполнитьЗначения(ДатаОстаткаНаНачало, "Период");
	
		
	
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	ОбработкаДДС = РеквизитФормыВЗначение("Обработка");
	
	ОбработкаДДС.СообщенияПользователю = Новый Массив;
	ОбработкаДДС.Расшифровка = Новый Структура;
	ОбработкаДДС.Расшифровка.Вставить("Организация");
	ОбработкаДДС.Расшифровка.Вставить("Получатель");
	ОбработкаДДС.Расшифровка.Вставить("ТипДвижения");
	
	ПоляУдаления = Новый Массив;
	ПоляУдаления.Добавить("Период");
	ПоляУдаления.Добавить("Организация");
	ПоляУдаления.Добавить("ТипДвижения");
	
	ОбработкаДДС.ЗаполнитьНаборДвижений(ТЗ, ПоляУдаления);
	
	ЗначениеВРеквизитФормы(ОбработкаДДС, "Обработка");
	
		
КонецПроцедуры
//конец Дима


////Дима 04.03.2015 10:03:52////Вычисляет выражение, заданное в строке формул
&НаКлиенте
Процедура ВычислитьВыражение(Команда)
	
	Ответ = Вычислить(СтрокаФормул);
	Сообщить(Ответ);
	
КонецПроцедуры
//конец Дима


////Дима 28.05.2015 10:11:21////Открывает внешнюю обработку "Загрузка платежей"
&НаКлиенте
Процедура ВыгрузкаЗагрузкаПлатежей(Команда)
	
  ПараметрыОбработки = ПодключитьОбработкуНаСервере("Загрузка/Выгрузка платежей в бухгалтерию");
  
  //ПараметрыОбработки.Вставить("НавигационнаяСсылкаВладельца", ЭтаФорма.Окно.ПолучитьНавигационнуюСсылку());
  
  ОткрытьФорму("ВнешняяОбработка." + ПараметрыОбработки.ИдентификаторКоманды + ".Форма", ПараметрыОбработки);
	
КонецПроцедуры


Функция ПодключитьОбработкуНаСервере(НаименованиеОбработки)
	
	
	ПараметрыОбработки = Новый Структура("ИдентификаторКоманды, ДополнительнаяОбработкаСсылка, ИмяФормы, КлючСессии");
	
	//
	Ссылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(НаименованиеОбработки);
	
	ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(Ссылка);
	//
	
	ПараметрыОбработки.Вставить("ИдентификаторКоманды", ИмяОбработки);
	ПараметрыОбработки.Вставить("ДополнительнаяОбработкаСсылка", Ссылка);
	ПараметрыОбработки.Вставить("КлючСессии", Ссылка.УникальныйИдентификатор());
		
	
	возврат ПараметрыОбработки;	
	
КонецФункции
//конец Дима


////Дима 23.09.2015 12:37:06////Скрывает/Показывает таблицу "Результат"
&НаКлиенте
Процедура ВидимостьРезультат(Команда)
	
	//Если НЕ ДетализацияРасходов Тогда
	Элементы.Результат.Видимость = НЕ Элементы.Результат.Видимость;
	//Иначе
	//	Элементы.Результат.Видимость = Ложь;
		//Элементы.РезультатДляРедактирования_1.Видимость = НЕ Элементы.РезультатДляРедактирования_1.Видимость;
	//КонецЕсли;  
	  
	
КонецПроцедуры
//конец Дима



////Дима 27.04.2017 16:05:55////Установим уровень группировки детальных расходов
&НаКлиенте
Процедура УровеньДетализации(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьУровеньДетализации", ЭтаФорма);
	ПоказатьВводЧисла(ОписаниеОповещения, УровеньГруппировкиДетализации);
КонецПроцедуры

Процедура УстановитьУровеньДетализации(Число, ДополнительныеПараметры) Экспорт 
  УровеньГруппировкиДетализации = Число;
КонецПроцедуры
//конец Дима
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////

#КонецОбласти





//////////////////////////////////////ОБРАБОТКА ДЕТАЛИЗАЦИИ РАСХОДОВ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////


&НаКлиенте
Процедура РедактироватьРеквизиты(Реквизит = Неопределено, Отказ = Ложь)
  	Перем ЗначениеУстановки;	
	
	Если Реквизит = "Дата" Тогда
		
		Если НЕ ВвестиДату(УстанавливаемаяДата, "Введите новую дату!!!") Тогда
			Отказ = Истина;
			возврат;
		КонецЕсли;
		
		ЗначениеУстановки = УстанавливаемаяДата;
		
	КонецЕсли;  	
		
		
	ВыделенныеСтроки = ОбщийМодульКлиент.ПолучениеДанныхОбластиТабличногоДокумента(РезультатДляРедактирования);
	
	МассивРасшифровок = Новый Массив;
	Для Каждого Область из ВыделенныеСтроки Цикл
		МассивРасшифровок.Добавить(Область.Расшифровка);
	КонецЦикла;
	
	ПолучитьРасшифрокуВМассивНаСервере(МассивРасшифровок, ДанныеРасшифровкиДляРедактирования, АдресДетализации, ЗначениеУстановки);
	
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ПолучитьРасшифрокуВМассивНаСервере(МассивРасшифровок, ДанныеРасшифровкиДляРедактирования, АдресДетализации, ЗначениеУстановки = Неопределено)

    Перем Ошибки;
    
    
	//
	ТЗдетализация = ПолучитьИзВременногоХранилища(АдресДетализации);
	Если ТЗдетализация.Колонки.Найти("ИзменитьРеквизиты") = Неопределено Тогда
		ТЗдетализация.Колонки.Добавить("ИзменитьРеквизиты", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	ТЗдетализация.ЗаполнитьЗначения(Ложь, "ИзменитьРеквизиты"); 
	//
	
		
	Для Счётчик = 0 По МассивРасшифровок.ВГраница() Цикл
		
		Расшифровка = МассивРасшифровок[Счётчик];
		
		Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
				
		СтруктураРасшифровки = ОбщийМодульСервер.ПолучениеРасшифровкиВСтруктуру(Расшифровка, ДанныеРасшифровкиДляРедактирования, Новый Структура);
		
		Если Счётчик = 0 
			         И ЗначениеУстановки = Неопределено Тогда 
					 
			ЗначениеУстановки = СтруктураРасшифровки;		 
					
		Иначе
			//
			УстановитьСтруктуруОтбора(СтруктураРасшифровки, ТЗдетализация);
			//
			
			НайденныеЗаписи = ТЗдетализация.НайтиСтроки(СтруктураРасшифровки);
			
			//
			Для Каждого Запись Из НайденныеЗаписи Цикл
				
				Если ТипЗнч(ЗначениеУстановки) = Тип("Структура") Тогда
					
					Если Запись.Отправлено Тогда
						ВызватьИсключение "Платёж нельзя перенести!!!";
						Продолжить;
					КонецЕсли;
					
                    Если Запись.Организация <> ЗначениеУстановки.СчетОрганизации.Владелец Тогда
                        ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "РезультатДляРедактирования", "Счёт принадлежит другой организации!!!");
                        //ВызватьИсключение "Счёт принадлежит другой организации!!!";
					КонецЕсли;
					
					Если Запись.СчетОрганизации.Валюта <> ЗначениеУстановки.СчетОрганизации.Валюта
						И НЕ Запись.СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
						ВызватьИсключение "Разные валюты счетов";
					КонецЕсли;
					
					Если НЕ ДДС_Сервер.ПроверитьСчётНаПолучателя(ЗначениеУстановки.СчетОрганизации, Запись.СтранаПолучателя) Тогда
						ВызватьИсключение "Выбранный счёт не подходит для оплаты контрагенту!!!" + Символы.ПС + Запись.СсылкаБухгалтерия;
					КонецЕсли;	
					
					//
                    Запись.Дата = ?(ЗначениеУстановки.Свойство("Период"), ЗначениеУстановки.Период, НачалоДня(ТекущаяДата()));
					//
					Запись.СчетОрганизации = ЗначениеУстановки.СчетОрганизации;
                    Запись.НомерСчета = ЗначениеУстановки.СчетОрганизации.НомерСчета;
                    Запись.Организация = Запись.СчетОрганизации.Владелец;
				Иначе
					Запись.Дата = ЗначениеУстановки;
				КонецЕсли;	
				
				Запись.ИзменитьРеквизиты = Истина;
				Запись.Модифицировано = Истина;
				Запись.МодифицированоБУХ = Истина;
				
				
			КонецЦикла;
			//

		КонецЕсли;
		
		
		
	КонецЦикла;
	
	
	//
	ТЗдетализация.Колонки.Удалить("ИзменитьРеквизиты");
	ПоместитьВоВременноеХранилище(ТЗдетализация, АдресДетализации);
    
    
    //
     ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
     
	
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура УстановитьСтруктуруОтбора(СтруктураРасшифровки, Знач ТЗдетализация)
	
	Перем Элемент;
	
	//
	СтруктураРасшифровки.Вставить("ИзменитьРеквизиты", Ложь);
	Для Каждого Элемент Из СтруктураРасшифровки Цикл
		
		Если Элемент.Ключ = "Период" Тогда
			СтруктураРасшифровки.Вставить("Дата", Элемент.Значение);
		КонецЕсли;	  
		
		Если ТЗдетализация.Колонки.Найти(Элемент.Ключ) = Неопределено
			                                          Или Элемент.Значение = Null Тогда  
			СтруктураРасшифровки.Удалить(Элемент.Ключ);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура ОткрытьДетальноеРедактированиеРеестра()

	ОткрытыеОкна = ПолучитьОкна();
	Для Каждого ОткрытоеОкно Из ОткрытыеОкна Цикл
		//
		Если ОткрытоеОкно.Заголовок = "Редактирование произвольной таблицы" Тогда
			Оповестить("ОбновитьТаблицуДляРедактирования", АдресДетализации);
			ОткрытоеОкно.Активизировать();
			Возврат;
		КонецЕсли;	
		//
	КонецЦикла;	
	
	
	ПараметрыФормыРедактирования = Новый Структура("АдресТаблицыВХ", АдресДетализации);
	ОткрытьФорму("ОбщаяФорма.Расш1_РедактированиеТаблицВХ", ПараметрыФормыРедактирования); 
	

КонецПроцедуры


&НаКлиенте
Процедура ОбновитьДетализацию(Команда)
	СформироватьИзВыделеннойОбласти();
	//
	СвернутьГруппировки(Неопределено, "РезультатДляРедактирования");
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////






//////////////////////////////////////БЛОК РЕДАКТИРОВАНИЯ НАСТРОЕК/////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

////Дима 26.02.2015 10:20:35////Настройка отборов табличного документа Результат для редактирования
&НаКлиенте
Процедура НастройкаОтборов(Команда)
	
	ИнициализироватьНастройкуДляРедактирования();	
	
КонецПроцедуры
//конец Дима


////Дима 02.12.2015 10:15:09////Инициализировать настройку таблицы для редактирования
&НаСервере
Процедура ИнициализироватьНастройкуДляРедактирования()
	
	
	ИмяСхемы = ?(НЕ ДетализацияРасходов, "ДляРедактирования", "ДетализацияРасходов"); 
	
	
	Если НЕ НастройкаДляРедактирования Тогда
		
		//Запомним настройки основного отчёта
		КомпоновщикНастроекРезервный = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроекРезервный.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных.Основная));
		КомпоновщикНастроекРезервный.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек.Настройки);
		КомпоновщикНастроекРезервный.ЗагрузитьПользовательскиеНастройки(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
		
		
		//Загрузим в компоновщик настройки "Для редактирования"
		Отчет.КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных[ИмяСхемы]));
				
		
		НастройкиКомпоновки = ХранилищеПользовательскихНастроекОтчетов.Загрузить("ОтчетДДС", ИмяСхемы + ".Настройки");
		ПользовательскиеНастройки = ХранилищеПользовательскихНастроекОтчетов.Загрузить("ОтчетДДС", ИмяСхемы + ".ПользовательскиеНастройки");
		
		Если НастройкиКомпоновки = Неопределено Тогда
			НастройкиКомпоновки = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных[ИмяСхемы]).ВариантыНастроек["Основной"].Настройки;
		КонецЕсли;
		  
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
		
		Если ПользовательскиеНастройки <> Неопределено Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		КонецЕсли;	
		
		Отчет.КомпоновщикНастроек.Восстановить();
		//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>==>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
				
		Элементы.ФормаНастройкаОтборов.Картинка = БиблиотекаКартинок.РедактироватьМакет;
		Элементы.ФормаЗаписьНастроек.Доступность = Истина;
		Элементы.ФормаСформироватьОтчёт.Доступность = Ложь;
		Элементы.ВидДетализации.Доступность = Ложь;
		
		
	Иначе
		//Восстановим настройки основного отчёта
		Отчет.КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных.Основная));
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(КомпоновщикНастроекРезервный.Настройки);
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(КомпоновщикНастроекРезервный.ПользовательскиеНастройки);
		Отчет.КомпоновщикНастроек.Восстановить();
		
		
		Элементы.ФормаНастройкаОтборов.Картинка = Новый Картинка;
		Элементы.ФормаЗаписьНастроек.Доступность = Ложь;
		Элементы.ФормаСформироватьОтчёт.Доступность = Истина;
		Элементы.ВидДетализации.Доступность = Истина;
		
	КонецЕсли;
	

	НастройкаДляРедактирования = НЕ НастройкаДляРедактирования;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаписьНастроек(Команда)
	ЗаписьНастроекНаСервере();
КонецПроцедуры


&НаСервере
Процедура ЗаписьНастроекНаСервере()
	
	ИмяСхемы = ?(НЕ ДетализацияРасходов, "ДляРедактирования", "ДетализацияРасходов");
	
	Попытка
		ХранилищеПользовательскихНастроекОтчетов.Сохранить("ОтчетДДС", ИмяСхемы + ".Настройки", Отчет.КомпоновщикНастроек.Настройки);
		ХранилищеПользовательскихНастроекОтчетов.Сохранить("ОтчетДДС", ИмяСхемы + ".ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
		ХранилищеПользовательскихНастроекОтчетов.Сохранить("ОтчетДДС", ИмяСхемы + ".ОбщиеНастройки", Отчет.КомпоновщикНастроек.ПолучитьНастройки());
		ИнициализироватьНастройкуДляРедактирования();
		ОбщийМодульСервер.ДобавитьСоообщениеВмассив(, "Настройки сохранены!!!");
		
	Исключение
		ОбщийМодульСервер.ДобавитьСоообщениеВмассив(, ОписаниеОшибки());
	КонецПопытки; 
	  
	
КонецПроцедуры


&НаКлиенте
Процедура СменитьВидМакетаРедактирования(Команда)
	
	Если Элементы.МакетРедактирования.Поведение = ПоведениеОбычнойГруппы.Обычное Тогда
		Элементы.МакетРедактирования.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
        ПодключитьОбработчикОжидания("РазвернутьГруппу", 0.1, Истина)        
	Иначе
		Элементы.МакетРедактирования.Поведение = ПоведениеОбычнойГруппы.Обычное;
	КонецЕсли;	
		
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьГруппу()                
	Элементы.МакетРедактирования.Показать();
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////









