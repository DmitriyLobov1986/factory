//////////////////////////////////////////////////////////////////////////////////////////////

////Дима 10.07.2014 11:58:52////Загрузить данные из бухгалтерии
&НаКлиенте
Процедура ЗагрузитьДанныеЗаПериод(Команда)
	
	//Очистим данные
	Объект.ПополнениеКарт.Очистить();
	Объект.ТаможняРассчёты.Очистить();
	Объект.ПлатежиИзБухгалтерии.Очистить();
	Объект.ПлатежиВбухгалтерию.Очистить();
		
	//Очистим все отборы
	Элементы.ПополнениеКарт1.ОтборСтрок = Неопределено;
	Элементы.ТаможняРассчёты1.ОтборСтрок = Неопределено;
			
	//Выбор периода для загрузки
	//ГраницаЗагрузки = ОбщийМодульСервер.ГраницаПериодаЗагрузки();
	//ГраницаЗагрузки = ?(ГраницаЗагрузки = ДАТА(1,1,1), НачалоДня(ТекущаяДата()), ГраницаЗагрузки);
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.Вариант = ВариантСтандартногоПериода.Сегодня;
	
	Если Диалог.Редактировать() Тогда 
		ПериодЗагрузки.ДатаНачала = Диалог.Период.ДатаНачала;
		ПериодЗагрузки.ДатаОкончания = ?(Диалог.Период.ДатаОкончания=ДАТА(1,1,1),ДАТА(3999,12,31,23,59,59),Диалог.Период.ДатаОкончания);
	Иначе
		возврат;
	КонецЕсли;
	
	//Выбор действия в зависимости от страницы
	Если Элементы.Закладки.ТекущаяСтраница.Имя = "ПополнениеКарт" Тогда
		ПополнениеКарт();
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница.Имя = "ТаможняРассчёты" Тогда 
		ТаможняРассчёты();
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница.Имя = "ПлатежиИзБухгалтерии" Тогда 	
		ПлатежиИзБухгалтерии();
	Иначе	
		ПлатежиВбухгалтерию();
	КонецЕсли;  
	
		
КонецПроцедуры
///////////////////////////////////////////////////////////////

////Дима 11.07.2014 13:34:12////Создать документы оплат в базе
&НаКлиенте
Процедура СоздатьДокументыВБазе(Команда)
	
	Если НЕ ПроверкаЗаполненияТабличныхЧастей(Элементы.Закладки.ТекущаяСтраница.Имя) Тогда
		возврат;
	КонецЕсли;	
	
	Если Элементы.Закладки.ТекущаяСтраница.Имя = "ПополнениеКарт" Тогда
		ИмяДокумента = "ПополнениеКарт";
		СоздатьДокументыПополнения(ИмяДокумента);
		
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница.Имя = "ТаможняРассчёты" Тогда
		ИмяДокумента = "ТаможняРассчёты";
		СоздатьДокументыПополнения(ИмяДокумента);
		
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница.Имя = "ПлатежиИзБухгалтерии" Тогда
			ЗаполнитьРегистрДДС();
			возврат;
	Иначе
		//СоздатьППвБухгалтерии();
		СоздатьВалютныеППвБазе();
		возврат;
	КонецЕсли;  
	
	//Оставим в ТЧ только созданные документы
	Элементы[ИмяДокумента+"1"].ОтборСтрок = Новый ФиксированнаяСтруктура("ДокументСоздан", Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаЗаполненияТабличныхЧастей(Имя)
	
	Если Имя <> "ПлатежиВбухгалтерию" Тогда
		
		Если Объект[Имя].Количество() > 0 Тогда
			возврат Истина;
		Иначе
			Сообщить("Нечего создавать.");
			возврат Ложь;                                         		
		КонецЕсли;	
		
	Иначе
		Сч = 0;
		Для Каждого строка из Объект[Имя] Цикл
			Если строка.Контрагент.ВалютныйРассчёт Тогда
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если Сч <> 0 Тогда
			возврат Истина;
		Иначе
			сообщить("Нет валютных платежей.");
			возврат Ложь;
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////ПОПОЛНЕНИЕ КАРТ//////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ПополнениеКарт()

  //Поместим во временное хранилище структуру подключений
	Если АдресСтруктурыПодключений = "" Тогда 
		СтруктураПодключений = Новый Структура;
		АдресСтруктурыПодключений = ПоместитьВоВременноеХранилище(СтруктураПодключений,ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	//Проверим подключения к внешним ИБ
	Отказ = Ложь;
	ПроверкаПодключения(Отказ);
	
	ОчиститьСообщения();
	Если Отказ Тогда
		Сообщить("Подключение не выполнено.");
		возврат;
	Иначе
		Сообщить("Подключение выполнено.");
	КонецЕсли;
	
	//Загрузим данные
	ЗагрузкаПополненияКарт();
	Сообщить("Данные загружены.");
	

КонецПроцедуры

&НаСервере
Процедура ЗагрузкаПополненияКарт()
	
	Обработка = РеквизитФормыВЗначение("Объект");	
	Обработка.ЗагрузкаПополненияКарт(АдресСтруктурыПодключений, ПериодЗагрузки);
	ЗначениеВРеквизитФормы(Обработка,"Объект");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыПополнения(ИмяДокумента)

  Обработка = РеквизитФормыВЗначение("Объект");
  Обработка.СоздатьДокументыПополнения(ПериодЗагрузки, ИмяДокумента);
  ЗначениеВРеквизитФормы(Обработка, "Объект");
  
КонецПроцедуры

&НаСервере
Процедура ПроверкаПодключения(Отказ)
	
	ПодключениеКВнешнимИБ.ПроверкаПодключения(Объект.ТипОрганизации, АдресСтруктурыПодключений, Отказ);
			
КонецПроцедуры
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////ТАМОЖНЯ РАССЧЁТЫ//////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ТаможняРассчёты()
	
	ОчиститьСообщения();
	//Загрузим данные
	ЗагрузкаРассчётовПоТаможне();
	Сообщить("Данные загружены.");
	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаРассчётовПоТаможне()
	
	Обработка = РеквизитФормыВЗначение("Объект");	
	Обработка.ЗагрузкаРассчётовПоТаможне(ПериодЗагрузки);
	ЗначениеВРеквизитФормы(Обработка,"Объект");
	
	
КонецПроцедуры
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////ДЕНЕЖНЫЕ СРЕДСТВА//////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ПлатежиИзБухгалтерии()
	
	//Поместим во временное хранилище структуру подключений
	Если АдресСтруктурыПодключений = "" Тогда 
		СтруктураПодключений = Новый Структура;
		АдресСтруктурыПодключений = ПоместитьВоВременноеХранилище(СтруктураПодключений, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	//Проверим подключения к внешним ИБ
	Если СписокБаз.Количество() = 0 Тогда
	  СписокБаз = ПолучитьСписокДоступныхБаз();
	КонецЕсли;  
	
	Если СписокБаз.ОтметитьЭлементы("Выберите базы для загрузки...") Тогда
		ПодключитьБазы();
		ПодключитьОбработчикОжидания("Обработчик", 100);
	Иначе
		возврат;
	КонецЕсли;	
	
	//Загрузим данные
	Список = Новый СписокЗначений;
	Список.Добавить("Остатки");
	Список.Добавить("Реестр");
	
	Ответ = Вопрос("Что загружать?", Список, , Список[1].Значение, "Выбор варианта загрузки");
	
	Если Ответ = "Реестр" Тогда
		ЗагрузкаПлатежейИзБухгалтерии();
	Иначе
		ЗагрузкаОстатковИзБухгалтерии();
	КонецЕсли; 
	
		
КонецПроцедуры

&НаСервере
Процедура ПодключитьБазы()
	
	Для Каждого база из СписокБаз Цикл
		
		Если Не база.Пометка Тогда
			продолжить;
		КонецЕсли;	
		
		Отказ = Ложь;	
		ПодключениеКВнешнимИБ.ПроверкаПодключения(база.Значение, АдресСтруктурыПодключений, Отказ);
		
		Если Отказ Тогда
			ОбщийМодульСервер.ДобавитьСоообщениеВмассив(, строка(база.Значение) + " не подключено", ЭтаФорма.УникальныйИдентификатор);
		Иначе	  
			ОбщийМодульСервер.ДобавитьСоообщениеВмассив(, строка(база.Значение) + " подключено", ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;	  
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокДоступныхБаз()
	
	СписокБаз = Новый СписокЗначений;
	
	Для Каждого база из Перечисления.ТипОрганизации Цикл
		СписокБаз.Добавить(база, , , БиблиотекаКартинок.Папка);
	КонецЦикла;
	
	возврат СписокБаз;
	
КонецФункции

&НаСервере
Процедура ЗагрузкаПлатежейИзБухгалтерии()
	
	Обработка = РеквизитФормыВЗначение("Объект");	
	Обработка.ЗагрузкаПлатежейИзБухгалтерии(АдресСтруктурыПодключений, ПериодЗагрузки, СписокБаз);
	ЗначениеВРеквизитФормы(Обработка,"Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаОстатковИзБухгалтерии()
	
	Обработка = РеквизитФормыВЗначение("Объект");	
	Обработка.ЗагрузкаОстатковИзБухгалтерии(АдресСтруктурыПодключений, ПериодЗагрузки, СписокБаз);
	ЗначениеВРеквизитФормы(Обработка,"Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегистрДДС()
	
	ОбработкаДДС = Обработки.ЗаполнениеРегистраДДС.Создать();
	
	ОбработкаДДС.СообщенияПользователю = Новый Массив;
	ОбработкаДДС.Расшифровка = Новый Структура;
	ОбработкаДДС.Расшифровка.Вставить("Организация");
	ОбработкаДДС.Расшифровка.Вставить("Получатель");
	ОбработкаДДС.Расшифровка.Вставить("ТипДвижения");
	
	ОбработкаДДС.ЗаполнитьНаборДвижений(Объект);
	
КонецПроцедуры

////Дима 05.03.2015 15:44:46////Обработчик проверяет активность COM соединений
&НаКлиенте
Процедура Обработчик()
	
	Если НЕ АктивизироватьПодключенныеБазы() Тогда
		ОтключитьОбработчикОжидания("Обработчик");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция АктивизироватьПодключенныеБазы()

	СтруктураПодключений = ПолучитьИзВременногоХранилища(АдресСтруктурыПодключений);
	Подключено = Истина;

	Для Каждого база из СтруктураПодключений Цикл
		Попытка
			Запрос = база.значение.Подключение.NewObject("Запрос");
		Исключение
			ОбщийМодульСервер.ДобавитьСоообщениеВмассив(, строка(база.значение.ТипОрганизации) + " отключилась!!!");
			Подключено = Ложь;
		КонецПопытки;
	КонецЦикла;
	
	возврат Подключено;

КонецФункции
//конец Дима

//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>

&НаСервере
Процедура ПлатежиВбухгалтерию()
	
  	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДДС.Период КАК Дата,
	               |	ДДС.Организация,
	               |	ДДС.Получатель КАК Контрагент,
	               |	ДДС.СчетОрганизации,
	               |	ДДС.СчетКонтрагента,
	               |	ДДС.ДоговорыКонтрагентов,
	               |	ДДС.Сумма,
	               |	ДДС.Организация.ТипОрганизации КАК ТипОрганизации
	               |ИЗ
	               |	РегистрСведений.ДДС КАК ДДС
	               |ГДЕ
	               |	ДДС.Период МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И ДДС.ТипДвижения = ЗНАЧЕНИЕ(Перечисление.ТипДвиженияДДС.Списание)
	               |	И (ТИПЗНАЧЕНИЯ(ДДС.Получатель) = ТИП(Справочник.Контрагенты)
	               |			ИЛИ ДДС.Получатель = ""Перевод"")";
				   
	Запрос.УстановитьПараметр("НачалоПериода", ПериодЗагрузки.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ПериодЗагрузки.ДатаОкончания);
				   
	Результат = Запрос.Выполнить().Выгрузить();
   
   ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
   ОбработкаОбъект.ПлатежиВБухгалтерию.Загрузить(Результат);
   ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
      	
КонецПроцедуры

&НаСервере
Процедура СоздатьППвБухгалтерии()

	//Получим список баз для подключения
	МассивСтрок = Объект.ПлатежиВбухгалтерию.НайтиСтроки(Новый Структура("Пометка", Истина)); 
	ТЗ = Объект.ПлатежиВбухгалтерию.Выгрузить(МассивСтрок);
	ТЗ.Свернуть("ТипОрганизации");
	
	МассивБаз = ТЗ.ВыгрузитьКолонку("ТипОрганизации");
	СписокБаз = Новый СписокЗначений;
	СписокБаз.ЗагрузитьЗначения(МассивБаз);
	СписокБаз.ЗаполнитьПометки(Истина);
	
	//Проверим подключения к внешним ИБ
	Если АдресСтруктурыПодключений = "" Тогда 
		СтруктураПодключений = Новый Структура;
		АдресСтруктурыПодключений = ПоместитьВоВременноеХранилище(СтруктураПодключений, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	ПодключитьБазы();
	
	//Создадим документы оплат в Бухгалтерии
	Обработка = РеквизитФормыВЗначение("Объект");	
	Обработка.СоздатьППвБухгалтерии(АдресСтруктурыПодключений, МассивСтрок, СписокБаз);
	
КонецПроцедуры

////Дима 13.03.2015 10:58:14////Создание валютных платежей в базе
&НаСервере
Процедура СоздатьВалютныеППвБазе()

  	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.СоздатьВалютныеППвБазе();

КонецПроцедуры
//конец Дима

////Дима 26.02.2015 11:11:55////Выгрузка данных в txt для загрузки в бухгалтерию
&НаКлиенте
Процедура ВыгрузитьВtxt(Команда)
	
	ВыгруженоКоличество = 0;
	ВыгруженоСумма = 0;
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	
	Для Каждого строка из Объект.ПлатежиВбухгалтерию Цикл
		
		Попытка
			Если строка.Контрагент.ВалютныйРассчёт Тогда
				продолжить;
			КонецЕсли;
			
			КонтрагентИНН = строка.Контрагент.ИНН; 
			
		Исключение	
			КонтрагентИНН = "";
			
		КонецПопытки;	
		
		Если НЕ строка.Пометка 
			Или НЕ Элементы.ПлатежиВбухгалтерию1.ПроверитьСтроку(строка.ПолучитьИдентификатор()) Тогда
			продолжить;
		КонецЕсли;	
		
		СтрокаФайла = строка(строка.Организация)+";"+строка.Организация.ИНН+";"+строка(строка.Контрагент)+";"+КонтрагентИНН+";"+строка.СчетОрганизации.Банк.Код+";"
		+строка.СчетОрганизации.НомерСчета+";"+строка.СчетКонтрагента.Банк.Код+";"+строка.СчетКонтрагента.НомерСчета+";"+строка.ДоговорыКонтрагентов.Номер+";"
		+строка(строка.Сумма);
		
		ФайлВыгрузки.ДобавитьСтроку(СтрокаФайла);
		
		ВыгруженоКоличество = ВыгруженоКоличество + 1;
		ВыгруженоСумма = ВыгруженоСумма + строка.Сумма; 
		
	КонецЦикла;
	
	ФайлВыгрузки.Записать("\\lena\common\Лобов\Фабрика\РеестрПП.txt");
	
	Сообщить("Выгружено платежей: " + ВыгруженоКоличество + символы.ПС + "Сумма: " + ВыгруженоСумма);
	
КонецПроцедуры
//конец Дима

////Дима 26.02.2015 14:04:06////Пометить все выделенные строки
&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	Для Каждого строка из Элементы.ПлатежиВбухгалтерию1.ВыделенныеСтроки Цикл
		запись = Объект.ПлатежиВбухгалтерию.НайтиПоИдентификатору(строка);
		запись.Пометка = НЕ запись.Пометка;
	КонецЦикла;	
			
КонецПроцедуры


//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>

////Дима 25.03.2015 16:46:23////Откроем общую форму выбора получателей
&НаКлиенте
Процедура ПлатежиИзБухгалтерии1КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбора = Новый Структура("Организация,ТипДвижения", Элементы.ПлатежиИзБухгалтерии1.ТекущиеДанные.Организация,
	                                                                         Элементы.ПлатежиИзБухгалтерии1.ТекущиеДанные.ТипДвижения);
																		
  	ОткрытьФорму("ОбщаяФорма.ФормаВыбораПолучателя", ПараметрыВыбора, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
КонецПроцедуры
//конец Дима

////Дима 26.03.2015 11:05:50////Установим выбранное значение
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Элементы.ПлатежиИзБухгалтерии1.ТекущиеДанные.Контрагент = ВыбранноеЗначение;	
	
КонецПроцедуры

//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>


//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////




