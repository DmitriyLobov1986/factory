#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    Если Не Параметры.Свойство("АдресТаблицыВХ") Тогда

        Отказ = Истина;

    КонецЕсли;

    Если Не ЭтоАдресВременногоХранилища(Параметры.АдресТаблицыВХ) Тогда

        Отказ = Истина;

    КонецЕсли;

    ТаблицаДанных = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыВХ);

    Если ТипЗнч(ТаблицаДанных) <> Тип("ТаблицаЗначений") Тогда

        Отказ = Истина;

    КонецЕсли;

    АдресТаблицыВоВременномХранилище = Параметры.АдресТаблицыВХ;
    
    
	
	//  

    СоздатьСхемуСкдНаОсновеДанных(ТаблицаДанных); 		
	
	
	//

    ДобавитьДополнительныеКолонки(ТаблицаДанных, КолонкиИсходнойТЗ);
		
	
	//

    ОтобразитьТаблицуЗначенийНаФорме(ТаблицаДанных);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

    Если ИмяСобытия = "ОбновитьТаблицуДляРедактирования" И ЭтоАдресВременногоХранилища(Параметр) Тогда

        АдресТаблицыВоВременномХранилище = Параметр;

        ОтобразитьТаблицуЗначенийНаФорме();

    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере(Данные, АдресТаблицыВоВременномХранилище, Колонки)

    ДеревоДанных = ДанныеФормыВЗначение(Данные, Тип("ДеревоЗначений"));

    НоваяТаблица = ПолучитьИзВременногоХранилища(АдресТаблицыВоВременномХранилище).СкопироватьКолонки(Колонки);

    ПреобразоватьДеревоВТЗРекурсия(ДеревоДанных, НоваяТаблица);
    //

    ПоместитьВоВременноеХранилище(НоваяТаблица, АдресТаблицыВоВременномХранилище);	
    //

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

    перем_ТаблицаДанных = ЭтаФорма["ТаблицаДанных"];

    ПриЗакрытииНаСервере(перем_ТаблицаДанных, АдресТаблицыВоВременномХранилище, КолонкиИсходнойТЗ);

КонецПроцедуры

#КонецОбласти

#Область ПрограмноеОтображениеТаблицыНаФорме

&НаСервере
// Аргументы:
//		ТаблицаЗначений - ТаблицаЗначений - таблица для отображения,
//		Форма - УправляемаяФорма
//		РеквизитТаблицаИмя - Строка - Имя таблицы - реквизита формы. Если не указано, будет создан новый реквизит
//	    ТаблицаФормы - ТаблицаФормы - элемент формы, связанный с реквизитом таблицы формы. Если не указано, будет создан новый элемент формы
//		ЭлементРодитель -  ГруппаФормы; ТаблицаФормы; УправляемаяФорма - элемент-родитель для создаваемой таблицы формы.
//
Функция ОтобразитьТаблицуЗначенийНаФорме(Знач ТаблицаЗначений = Неопределено) Экспорт
										 
										 
	//Инициализируем таблицу значений

    ТаблицаЗначений = ?(ТаблицаЗначений = Неопределено, ПолучитьИзВременногоХранилища(АдресТаблицыВоВременномХранилище), ТаблицаЗначений);
	//
	//									 
	////Раздел иницилизации переменных										 
	//СтруктураРезультат = Новый Структура("РеквизитТаблица, ТаблицаФормы");

    ИмяРеквизитаТаблицыПоУмолчанию = "ТаблицаДанных";

    ВсеРеквизитыТаблицы = Неопределено;

    МассивРеквизитовДобавить = Новый Массив;

    МассивРеквизитовУдалить = Новый Массив;
		
	
	
	// создадим реквизит формы - таблицу (если не существует)

    Если Не ЕстьРеквизитФормы(ИмяРеквизитаТаблицыПоУмолчанию) Тогда

        МассивРеквизитовДобавить.Добавить(Новый РеквизитФормы(ИмяРеквизитаТаблицыПоУмолчанию, Новый ОписаниеТипов("ДеревоЗначений")));

        ИзменитьРеквизиты(МассивРеквизитовДобавить);

    КонецЕсли;  
	
	
		
	// создадим таблицу формы - отображение реквизита таблицы (если не существует)

    ТаблицаФормы = Элементы.Найти(ИмяРеквизитаТаблицыПоУмолчанию);

    Если Не ТаблицаФормы = Неопределено Тогда

        Элементы.Удалить(ТаблицаФормы);

    КонецЕсли;	
	//

    ТаблицаФормы = Элементы.Вставить(ИмяРеквизитаТаблицыПоУмолчанию, Тип("ТаблицаФормы"), Элементы["ТаблицыРедактирования"],
        Элементы["ДанныеСтроки"]);

    ТаблицаФормы.ПутьКДанным = ИмяРеквизитаТаблицыПоУмолчанию;

    ТаблицаФормы.Отображение = ОтображениеТаблицы.Дерево;
	
	
	
	// создадим реквизиты-колонки (если не существуют)

    МассивРеквизитовДобавить.Очистить();

    Для Каждого ТекКолонка Из ТаблицаЗначений.Колонки Цикл

        ИмяСоздаваемойКолонкиРеквизита = ТекКолонка.Имя;

        Отбор = ИмяСоздаваемойКолонкиРеквизита;
		//
		// проверим существование такого реквизита формы

        Если ЕстьРеквизитФормы(ИмяСоздаваемойКолонкиРеквизита, ИмяРеквизитаТаблицыПоУмолчанию) Тогда

            Продолжить;

        КонецЕсли;	
		//

        НовоеОписаниеТипов = Новый ОписаниеТипов(ТекКолонка.ТипЗначения, , "Null");

        МассивРеквизитовДобавить.Добавить(Новый РеквизитФормы(ИмяСоздаваемойКолонкиРеквизита, НовоеОписаниеТипов,
            ИмяРеквизитаТаблицыПоУмолчанию));

    КонецЦикла;
	
	//удалим ненужные реквизиты - колонки

    КолонкиТаблицы = ТаблицаЗначений.СкопироватьКолонки().Колонки;

    ВсеРеквизитыТаблицы = ПолучитьРеквизиты(ИмяРеквизитаТаблицыПоУмолчанию);
	//

    Для Каждого РеквизитКолонка Из ВсеРеквизитыТаблицы Цикл

        Если КолонкиТаблицы.Найти(РеквизитКолонка.Имя) = Неопределено Тогда

            МассивРеквизитовУдалить.Добавить(РеквизитКолонка.Путь + "." + РеквизитКолонка.Имя);

        КонецЕсли;

    КонецЦикла;

    Если МассивРеквизитовДобавить.Количество() > 0 Или МассивРеквизитовУдалить.Количество() > 0 Тогда

        ИзменитьРеквизиты(МассивРеквизитовДобавить, МассивРеквизитовУдалить);

    КонецЕсли;  
	
	
	
	// теперь создаём элементы формы - колонки таблицы формы 

    Для Каждого ТекКолонка Из ТаблицаЗначений.Колонки Цикл

        ИмяКолонкиРеквизита = ТекКолонка.Имя;

        ИмяСоздаваемогоПоляФормы = ИмяРеквизитаТаблицыПоУмолчанию + ИмяКолонкиРеквизита;
		//	

        НоваяКолонка = Элементы.Добавить(ИмяСоздаваемогоПоляФормы, Тип("ПолеФормы"), ТаблицаФормы);

        НоваяКолонка.ПутьКДанным = ИмяРеквизитаТаблицыПоУмолчанию + "." + ИмяКолонкиРеквизита;

        НоваяКолонка.Заголовок = ТекКолонка.Заголовок;

        НоваяКолонка.Видимость = Истина;

        НоваяКолонка.ШрифтЗаголовка = Новый Шрифт(, 11, Истина);

        Если ТекКолонка.ТипЗначения.СодержитТип(Тип("Булево")) Тогда

            НоваяКолонка.Вид = ВидПоляФормы.ПолеФлажка;

        Иначе

            НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;

        КонецЕсли;

    КонецЦикла;
	
	
	
	//Установим условное оформление

    УстановитьУсловноеОформление();
	
	
	//Установим отбор таблицы
    //Элементы["ТаблицаДанных"].ОтборСтрок = Новый ФиксированнаяСтруктура("ОтборСтрок", Истина);	
	
	//

    Элементы[ИмяРеквизитаТаблицыПоУмолчанию].НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
	//Положим Таблицу в реквизит формы

    ДеревоЗначений = ПреобразоватьТЗвДерево(ТаблицаЗначений);

    ЗначениеВДанныеФормы(ДеревоЗначений, ЭтаФорма[ИмяРеквизитаТаблицыПоУмолчанию]);

    ТаблицаЗначений = Неопределено;
	
	
	
	//Установим действие При активации строки

    Элементы[ИмяРеквизитаТаблицыПоУмолчанию].УстановитьДействие("ПриАктивизацииСтроки", "ТаблицаДанныхПриАктивацииСтроки");

    Элементы[ИмяРеквизитаТаблицыПоУмолчанию].УстановитьДействие("ПередНачаломИзменения", "ТаблицаДанныхПередНачаломИзменения");

    Элементы[ИмяРеквизитаТаблицыПоУмолчанию].УстановитьДействие("ПослеУдаления", "ТаблицаДанныхПослеУдаления"); 
	
	
	//Добавим связи параметров выбора для таблицы Данные строки

    Попытка

        НовыйМассив = Новый Массив;

        НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.ТаблицаДанных.ТекущиеДанные.Организация"));

        НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);

        Элементы.ДанныеСтрокиЗначение.СвязиПараметровВыбора = НовыеСвязи;

    Исключение

    КонецПопытки;

КонецФункции

&НаКлиенте
Процедура Команда1(Команда)

    ТД = Новый ТекстовыйДокумент;

    ТД.Показать();

КонецПроцедуры




// Аргументы:
//		Имя реквизита - Строка - искомый реквизит
//		Источник - Произвольный - область поиска реквизитов

&НаСервере
Функция ЕстьРеквизитФормы(ИмяРеквизита, Источник = "")

    МассивРеквизитов = ПолучитьРеквизиты(Источник);

    ЕстьРеквизит = Ложь;

    Для Каждого Реквизит Из МассивРеквизитов Цикл

        Если ИмяРеквизита = Реквизит.Имя Тогда

            ЕстьРеквизит = Истина;

            Прервать;

        КонецЕсли;

    КонецЦикла;

    Возврат ЕстьРеквизит;

КонецФункции



//Установим условное оформление

&НаСервере
Процедура УстановитьУсловноеОформление()

#Область ОбщееОформление

    ЭлементОформления = УсловноеОформление.Элементы.Добавить();
    
    
    //Отборы

    ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДанных.ОтборСтрок");

    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

    ЭлементОтбора.ПравоеЗначение = Истина;
    //

    ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДанных.Род");

    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

    ЭлементОтбора.ПравоеЗначение = Ложь;
    //
    
    
    //Цвета

    ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Древесный);
    
    
    //Шрифты

    ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, 11, Истина, ));

    ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Черный);
    
    
    //Поля

    Поле = ЭлементОформления.Поля.Элементы.Добавить();

    Поле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДанных");

#КонецОбласти

#Область Родитель

    ЭлементОформления = УсловноеОформление.Элементы.Добавить();
    
    
    //Отборы

    ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДанных.Род");

    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

    ЭлементОтбора.ПравоеЗначение = Истина;
    //
    
    
    //Шрифты

    ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, 11, Истина, Истина));

    ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СероСиний);
    
    
    //Горизонтальное положение

    ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
    
    
    //Поля

    Поле = ЭлементОформления.Поля.Элементы.Добавить();

    Поле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДанных");

#КонецОбласти

#Область Видимость

    ЭлементОформления = УсловноеОформление.Элементы.Добавить();
    
    
    //Отборы

    ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДанных.ОтборСтрок");

    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

    ЭлементОтбора.ПравоеЗначение = Ложь;
    //
    
    
    //Цвета

    ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
        
    
    //Поля

    ПоляТаблицы = Элементы["ТаблицаДанных"].ПодчиненныеЭлементы;

    Для Каждого ПолеТаблицы Из ПоляТаблицы Цикл

        ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();

        ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеТаблицы.Имя);

    КонецЦикла;

#КонецОбласти

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьДополнительныеКолонки(ТаблицаДанных, КолонкиИсходнойТЗ)

    //Список оригинальных олонок

    Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл

        КолонкиИсходнойТЗ = КолонкиИсходнойТЗ + ?(ПустаяСтрока(КолонкиИсходнойТЗ), "", ",") + Колонка.Имя;

    КонецЦикла; 
    
    
	//Проверяем наличие идентификатора

    Если ТаблицаДанных.Колонки.Найти("ОтборСтрок") = Неопределено Тогда

        ТаблицаДанных.Колонки.Добавить("ОтборСтрок", Новый ОписаниеТипов("Булево"));

        ТаблицаДанных.ЗаполнитьЗначения(Истина, "ОтборСтрок");

    КонецЕсли;

    Если ТаблицаДанных.Колонки.Найти("Род") = Неопределено Тогда

        ТаблицаДанных.Колонки.Добавить("Род", Новый ОписаниеТипов("Булево"));

        ТаблицаДанных.ЗаполнитьЗначения(Ложь, "Род");

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработкаТаблицРедактирования

&НаКлиенте
Процедура ТаблицаДанныхПриАктивацииСтроки()

    ЗаполнитьТаблицуДанныеСтроки();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхПередНачаломИзменения(Элемент, Отказ)

    Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхПослеУдаления(Элемент, Отказ)

    СкомпоноватьТаблицуПоОтбору();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуДанныеСтроки()

    МассивКолонок = Элементы["ТаблицаДанных"].ПодчиненныеЭлементы;

    ТекущиеДанные = Элементы["ТаблицаДанных"].ТекущиеДанные;

    ДанныеСтроки.Очистить();

    Если ТекущиеДанные = Неопределено Тогда

        Возврат;

    КонецЕсли;

    Для Каждого Свойство Из МассивКолонок Цикл

        НовоеСвойство = ДанныеСтроки.Добавить();

        НовоеСвойство.Свойство = СтрЗаменить(Свойство.Имя, "ТаблицаДанных", "");

        НовоеСвойство.Значение = ТекущиеДанные[НовоеСвойство.Свойство];
		//

        Если ТипЗнч(НовоеСвойство.Значение) = Тип("Булево") Тогда

            НовоеСвойство.Булево = Истина;

            НовоеСвойство.Галка = НовоеСвойство.Значение;

        КонецЕсли;  
		//

    КонецЦикла;	

    //

    ДанныеСтроки.Сортировать("Свойство");

КонецПроцедуры

&НаКлиенте
Процедура ДанныеСтрокиПриИзменении(Элемент)

    Для Каждого СтрокаТаблицыДанных Из Элементы["ТаблицаДанных"].ВыделенныеСтроки Цикл

        ТекущиеДанныеСтроки = Элементы["ДанныеСтроки"].ТекущиеДанные;

        ТекущиеДанные = ЭтаФорма["ТаблицаДанных"].НайтиПоИдентификатору(СтрокаТаблицыДанных);

        ЗаполнитьДетальныеЗаписи(ТекущиеДанные, ТекущиеДанныеСтроки.Свойство, ТекущиеДанныеСтроки.Значение);

    КонецЦикла;
	
    
    //

    ТаблицаДанныхПриАктивацииСтроки();

КонецПроцедуры

&НаКлиенте
Процедура ДанныеСтрокиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

    ТекущиеДанные = ЭтаФорма.ДанныеСтроки.НайтиПоИдентификатору(ВыбраннаяСтрока);

    Если Поле.Имя = "ДанныеСтрокиСвойство" И ТекущиеДанные.Свойство = "Комментарий" Тогда

        ОповещениеВводаСтроки = Новый ОписаниеОповещения("ВводКомментария", ЭтаФорма, ТекущиеДанные);

        ПоказатьВводСтроки(ОповещениеВводаСтроки, ТекущиеДанные.Значение, "Редактирование комментария", , Истина);

    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВводКомментария(Строка, ДополнительныеПараметры) Экспорт

    Если Строка = Неопределено Тогда

        Возврат;

    КонецЕсли;

    ДополнительныеПараметры.Значение = Строка;
    
    //

    ДанныеСтрокиПриИзменении(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеСтрокиГалкаПриИзменении(Элемент)

    Элементы["ДанныеСтроки"].ТекущиеДанные.Значение = Элементы["ДанныеСтроки"].ТекущиеДанные.Галка;

КонецПроцедуры

&НаКлиенте
Процедура Свойства(Команда)

    Элементы.ДанныеСтроки.Видимость = Не Элементы.ДанныеСтроки.Видимость;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеВоВременномХранилище(Команда)

    перем_ТаблицаДанных = ЭтаФорма["ТаблицаДанных"];

    ПриЗакрытииНаСервере(перем_ТаблицаДанных, АдресТаблицыВоВременномХранилище, КолонкиИсходнойТЗ);

    ПоказатьОповещениеПользователя("Обновлено!!!", , , , СтатусОповещенияПользователя.Важное);

КонецПроцедуры

#КонецОбласти

#Область ОтборСкдТаблицРедактирования

&НаСервере
Процедура СоздатьСхемуСкдНаОсновеДанных(ТаблицаДанных)

    НовыйСКД = Новый СхемаКомпоновкиДанных;
	  
	  
	  //Добавим источник данных

    Источник = НовыйСКД.ИсточникиДанных.Добавить();

    Источник.Имя = "ИсточникДанных";

    Источник.СтрокаСоединения = "";

    Источник.ТипИсточникаДанных = "Local";
		  
	  
	  //Добавим внешний объект

    НаборДанныхОбъект = НовыйСКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));

    НаборДанныхОбъект.Имя = "ВнешнаяТЗ";

    НаборДанныхОбъект.ИмяОбъекта = "ТЗданные";

    НаборДанныхОбъект.ИсточникДанных = "ИсточникДанных";
	  
	  
	  //Добавим поля внешнего объекта

    Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл

        ДобавленноеПоле = НаборДанныхОбъект.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));

        ДобавленноеПоле.Заголовок = Колонка.Имя;

        ДобавленноеПоле.ПутьКДанным = Колонка.Имя;

        ДобавленноеПоле.Поле = Колонка.Имя;

        ДобавленноеПоле.ТипЗначения = Новый ОписаниеТипов(Колонка.ТипЗначения, , "NULL");

    КонецЦикла;
	  
	  
	  //Положим схему во временное хранилище

    АдресСхемыСкдДляОтбора = ПоместитьВоВременноеХранилище(НовыйСКД, УникальныйИдентификатор);
	  	  
	  
	  //Проинициализируем компоновщик настроек

    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыСкдДляОтбора));

КонецПроцедуры

&НаСервере
Процедура СкомпоноватьТаблицуПоОтбору()
	  
	  //Получим схему компоновки данных

    СКД = ПолучитьИзВременногоХранилища(АдресСхемыСкдДляОтбора);
	  
	  
	  //Получим внешний набор данных

    ДеревоДанных = ДанныеФормыВЗначение(ЭтаФорма["ТаблицаДанных"], Тип("ДеревоЗначений"));

    НоваяТаблица = ПолучитьИзВременногоХранилища(АдресТаблицыВоВременномХранилище).СкопироватьКолонки();

    ПреобразоватьДеревоВТЗРекурсия(ДеревоДанных, НоваяТаблица);

    ВнешнийНаборДанных = Новый Структура("ТЗданные", НоваяТаблица);
	  
	  
	  //Добавим детальные записи

    Настройки = КомпоновщикНастроек.ПолучитьНастройки();

    ДетальныеЗаписи  = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));

    ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));

    новоеПоле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));

    новоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПользовательскиеПоля.Поле1");
	  
	  
	  //Добавим выбранные поля

    Для Каждого Колонка Из ВнешнийНаборДанных.ТЗданные.Колонки Цикл

        ВыбранноеПоле = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));

        ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(Колонка.Имя);

    КонецЦикла;
	  
	  
	  //Добавим пользовательское поле

    ПолеОтбор = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыборКомпоновкиДанных"));

    ВариантОтбора = ПолеОтбор.Варианты.Элементы.Добавить();

    ВариантОтбора.Значение = Истина;
	  //

    ВыбранноеПоле = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));

    ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеОтбор.ПутьКДанным);
	  
	  
	  //Добавим пользовательский отбор

    Для Каждого элементОтбора Из Настройки.Отбор.Элементы Цикл

        ЗаполнитьЗначенияСвойств(ВариантОтбора.Отбор.Элементы.Добавить(ТипЗнч(элементОтбора)), элементОтбора);

    КонецЦикла;

    Настройки.Отбор.Элементы.Очистить();
	  
	  
	  
	  //Получим макет компоновки    

    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")); 
	  
	  
	  //Через процессор компоновки получим результат

    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;

    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешнийНаборДанных);

    ТаблицаРезультат = Новый ТаблицаЗначений;

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

    ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
	  
	  
	  //Выведем таблицу с отбором на форму

    ТаблицаРезультат.Колонки.ПользовательскиеПоляПоле1.Имя = "ОтборСтрок";
      
      
      //Преобразуем ТаблицуЗначений в ДеревоЗначений

    ЗначениеВДанныеФормы(ПреобразоватьТЗвДерево(ТаблицаРезультат), ЭтаФорма["ТаблицаДанных"]);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображение(Команда)

    СкомпоноватьТаблицуПоОтбору();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтбор(Структура)

    НастройкаОтбора = КомпоновщикНастроек.Настройки.Отбор;

    Для Каждого Отбор Из Структура Цикл

        ТипОтбора = "Равно";

        Значение = Отбор.Значение;

        Если ТипЗнч(Значение) = Тип("Массив") Тогда

            ТипОтбора = "ВСписке";

            Значение = Новый СписокЗначений;

            Значение.ЗагрузитьЗначения(Отбор.Значение);

        КонецЕсли;

        ЭлементОтбора = НастройкаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

        ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Отбор.Ключ);

        ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[ТипОтбора];

        ЭлементОтбора.ПравоеЗначение = Значение;

    КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИфункции

&НаСервере
Функция ПреобразоватьТЗвДерево(ТЗ)

    ПоляГруппировки = КомпоновщикНастроек.Настройки.Порядок.Элементы;

    Если ПоляГруппировки.Количество() > 0 Тогда

        ТекстИтоги = "ИТОГИ
                     |    МИНИМУМ(ОтборСтрок),
                     |    ИСТИНА КАК Род";

        ТекстГруппировки = "ПО ОтборСтрок";

        Порядок = 0;

        Для Каждого ПолеГруппировки Из ПоляГруппировки Цикл
            
            //

            ОписаниеТипаКолонки = ТЗ.Колонки[Строка(ПолеГруппировки.Поле)].ТипЗначения;

            Если ОписаниеТипаКолонки.СодержитТип(Тип("Число")) И Не ПолеГруппировки.Использование Тогда

                ТекстИтоги = ТекстИтоги + "," + Символы.ПС + "Сумма(" + ПолеГруппировки.Поле + ")";

            Иначе

                ТекстГруппировки = ТекстГруппировки + "," + Символы.ПС + ПолеГруппировки.Поле;

            КонецЕсли;  
            
            //

            ПолеФормы = Элементы["ТаблицаДанных" + ПолеГруппировки.Поле];

            МестоРасположения = Элементы["ТаблицаДанных"].ПодчиненныеЭлементы[Порядок];
            //     

            Если ПолеФормы <> МестоРасположения Тогда

                Элементы.Переместить(ПолеФормы, ПолеФормы.Родитель, МестоРасположения);

            КонецЕсли;

            Порядок = Порядок + 1;

        КонецЦикла;

        ТекстЗапроса = ТекстИтоги + Символы.ПС + ТекстГруппировки;

    Иначе

        ТекстЗапроса = "";

    КонецЕсли;    
        
        
    
    //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>

    Запрос = Новый Запрос;

    Запрос.Текст = "ВЫБРАТЬ
                   |    *  ,
                   |   Ложь КАК Род
                   |ПОМЕСТИТЬ ВТ_Данные
                   |ИЗ
                   |    &ТаблицаЗначений КАК ТаблицаЗначений
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |    *
                   |ИЗ
                   |    ВТ_Данные КАК ВТ_Данные" + Символы.ПС + ТекстЗапроса;

    Запрос.УстановитьПараметр("ТаблицаЗначений", ТЗ);

    Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

    Возврат Дерево;

КонецФункции

&НаСервереБезКонтекста
Процедура ПреобразоватьДеревоВТЗРекурсия(тДерево, тТаблица)

    Для Каждого тСтр Из тДерево.Строки Цикл

        Если тСтр.Строки.Количество() > 0 Тогда

            ПреобразоватьДеревоВТЗРекурсия(тСтр, тТаблица);

        ИначеЕсли Не тСтр.Род Тогда

            нСтр = тТаблица.Добавить();

            ЗаполнитьЗначенияСвойств(нСтр, тСтр);

        КонецЕсли;

    КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДетальныеЗаписи(СтрокаДерева, Колонка, Значение)

    Если СтрокаДерева.ОтборСтрок Тогда

        СтрокаДерева[Колонка] = Значение;

    КонецЕсли;  
    //

    Если СтрокаДерева.Свойство("Модифицировано") И Не Колонка = "Модифицировано" Тогда

        СтрокаДерева.Модифицировано = Истина;

    КонецЕсли;    
    //

    ПодчинённыеСтроки = СтрокаДерева.ПолучитьЭлементы();

    Для Каждого ПодчинённаяСтрока Из ПодчинённыеСтроки Цикл

        ЗаполнитьДетальныеЗаписи(ПодчинённаяСтрока, Колонка, Значение);

    КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Exchange(Команда)

    ПослеВвода = Новый ОписаниеОповещения("ПослеВводаСтроки", ЭтотОбъект);

    Строка = "";

    ПоказатьВводСтроки(ПослеВвода, Строка, "Текст JSON", , Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтроки(Строка, Параметры) Экспорт

    Если Строка = Неопределено Тогда

        Возврат;

    КонецЕсли;

#Если Не ВебКлиент Тогда

    ЧтениеJSON = Новый ЧтениеJSON;

    ЧтениеJSON.УстановитьСтроку(Строка);

    Попытка

        Структура = ПрочитатьJson(ЧтениеJSON);

        ДобавитьОтбор(Структура);

    Исключение

        ТекстОшибки = "Неверный формат JSON" + Символы.ПС + "Ожидается Структура, где ключ - имя колонки отбора";

        ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неверный формат Json");

    КонецПопытки;

#КонецЕсли

КонецПроцедуры

#КонецОбласти