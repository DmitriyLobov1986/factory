//////////////////////////////////////ПРОЦЕДУРЫ, КОМАНДЫ И СОБЫТИЯ ФОРМЫ//////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПериодИсточника.Вариант = ВариантСтандартногоПериода.Сегодня;
	
	Задолженности = ПолучитьЗадолженности();
	ПолучитьДоступныеСредства(Задолженности.ВыгрузитьКолонку("Организация"));
		
	ЗаполнитьЛимитыЦентров(Задолженности);
			
КонецПроцедуры


&НаКлиенте
Процедура РаспределитьДС(Команда)
	
	
	Результат = Новый ТабличныйДокумент;
	ЗаполнитьРезультатНаСервере(Результат);
	
	Результат.ПоказатьУровеньГруппировокСтрок(0);
	Результат.Показать("Распределение ДС");
	
	//
	Оповестить("Задолженности", ПолучитьЗадолженности());
				
КонецПроцедуры


&НаКлиенте
Процедура СделатьПлатежиВБазе(Команда)
	
	
	Если ЗначениеЗаполнено(АдресТЗРезультат) Тогда
	  ДополнитьРезультат(АдресТЗРезультат, ПериодИсточника.ДатаНачала);
	  Оповестить("РаспределениеДС", АдресТЗРезультат);	
	КонецЕсли;  

		
КонецПроцедуры


&НаКлиенте
Процедура НеобходимоПополнить(Команда)
	
	Результат = Новый ТабличныйДокумент;
	НеобходимоПополнитьНаСервере(Результат);
	
	Результат.ПоказатьУровеньГруппировокСтрок(0);
	Результат.Показать("Требуется пополнить");
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьСчетаЦентров(Команда)
	
	Сообщить("Проверка рассчетных счетов центров!!!");
	
	ТаблицаСчетов = ПолучитьТаблицуНаСервере();
	                        		
	ЗагрузитьТаблицуСчетов(ТаблицаСчетов);
	
	
	Для Каждого строка из ЦентрыЛимиты Цикл 
		
		Отбор = Новый Структура("ОргИНН, НомерСчета, Статус", строка.Центр.ИНН, строка.РассчётныйСчёт.НомерСчета, "Работает");
		строка.Работает = ?(ТаблицаСчетов.НайтиСтроки(Отбор).Количество() = 0, Ложь, Истина);
		
	КонецЦикла;	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЦентрыЛимитыМожетПринятьПриИзменении(Элемент)
	
	ЦентрыИтог = ЦентрыЛимиты.Итог("МожетПринять");
	
КонецПроцедуры


//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
&НаКлиенте
Процедура ОткрытьИсториюПоступлений()
	
	Элементы["ТаблицаПоступлений"].Видимость = НЕ Элементы["ТаблицаПоступлений"].Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИсториюПоступлений()
	
	Если НЕ Элементы["ТаблицаПоступлений"].Видимость Тогда
		Возврат;
	КонецЕсли;	
	
	
	ПараметрыФормы = Новый Структура("КлючВарианта",  "c18965a3-6eae-4873-8338-5bf2eb0cb299");
	ФормаОтчета = ПолучитьФорму("Отчет.ДДС.Форма.ФормаОтчета", ПараметрыФормы, ЭтаФорма, "ИсторияПоступлений");
	
	ФиксированныеОтборы = ФормаОтчета.Отчет.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы;
	ФиксированныеОтборы.Очистить();
	
	НовыйОтбор = ФиксированныеОтборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетОрганизации");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = Элементы.Доступно.ТекущиеДанные.СчетОрганизации;  
	
	//ФормаОтчета.Открыть();
	ФормаОтчета.СкомпоноватьРезультат();
	//ФормаОтчета.Открыть();
	
	ЭтаФорма["ТаблицаПоступлений"] = ФормаОтчета.Результат;
	
	
КонецПроцедуры





//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////






//=>=>=>=>=>=>=>=>=>=>=>
&НаСервере
Функция СформироватьОтчетНаСервере(Организация = Неопределено, Период, ИмяСхемы, ТипГенератораМакета, ВариантОтчета = "Основной", 
	                                                                     ВнешнийИсточник = Неопределено, Результат = Неопределено)
	
	//Создадим компоновщик настроек компоновки данных
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	//Создадим внешний набор данных
	ВнешнийНаборДанных = ?(ВнешнийИсточник = Неопределено, Новый Структура, ВнешнийИсточник);
	
	
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	
	
	Если ИмяСхемы = "ДляРедактирования" Тогда
		Схема = Отчеты.ДДС.ПолучитьМакет(ИмяСхемы);
		
		
		
	ИначеЕсли ИмяСхемы = "ОсновнаяСхемаКомпоновкиДанных" Тогда
		Схема = Отчеты.ЗадолженностиПоТовару.ПолучитьМакет(ИмяСхемы);
		
	Иначе
		Обработка = РеквизитФормыВЗначение("Объект");
		Схема = Обработка.ПолучитьМакет(ИмяСхемы);
	КонецЕсли;	
	
	//Загрузим настройки в компоновщик
	НастройкиКомпоновки = Схема.ВариантыНастроек[ВариантОтчета].Настройки;
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
	
	
	//Установим фиксированные отборы и порядок данных
	Если ИмяСхемы = "ДляРедактирования" Тогда
		
		 Схема.НаборыДанных.Запрос.Запрос = Схема.НаборыДанных.Запрос.Запрос + Символы.ПС +
		 "{ХАРАКТЕРИСТИКИ
	     |ТИП(Справочник.Организации, Справочник.БанковскиеСчета)
	     |ВИДЫХАРАКТЕРИСТИК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения
	     |ПОЛЕКЛЮЧА Ссылка
	     |ПОЛЕИМЕНИ Представление
	     |ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
	     |ЗНАЧЕНИЯХАРАКТЕРИСТИК РегистрСведений.ДополнительныеСведения
	     |ПОЛЕОБЪЕКТА Объект
	     |ПОЛЕВИДА Свойство
	     |ПОЛЕЗНАЧЕНИЯ Значение }";
		
		
		Порядок = КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		Порядок.Поле = Новый ПолеКомпоновкиДанных("Организация.[Порядок закрытия (Общие)]");
		Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
		
		Отбор = КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Отбор.ПравоеЗначение = Организация;
		
		Отбор = КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетОрганизации.НеИспользуется");
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ПравоеЗначение = Ложь;
		
		КомпоновщикНастроек.Настройки.Структура[0].Отбор.Элементы[0].Использование = ЛОЖЬ;
		Поступление = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		Поступление.Поле = Новый ПолеКомпоновкиДанных("Поступление");
		//
		ОстатокНаКонец = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ОстатокНаКонец.Поле = Новый ПолеКомпоновкиДанных("ОстатокНаКонец");
		//
		ПолеПорядокЗакрытия = Схема.ВычисляемыеПоля.Добавить();
		ПолеПорядокЗакрытия.Выражение = "Организация.[Порядок закрытия (Общие)]";
		ПолеПорядокЗакрытия.ПутьКДанным = "Организация.ПорядокЗакрытия";
		ПорядокЗакрытия = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПорядокЗакрытия.Поле = Новый ПолеКомпоновкиДанных("Организация.ПорядокЗакрытия");
		ПорядокЗакрытия.Заголовок = "ПорядокЗакрытия";
		//
		ПолеЛимитОстатка = Схема.ВычисляемыеПоля.Добавить();
		ПолеЛимитОстатка.Выражение = "СчетОрганизации.[Лимит остатка (Банковские счета)]";
		ПолеЛимитОстатка.ПутьКДанным = "СчетОрганизации.ЛимитОстатка";
		ЛимитОстатка = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ЛимитОстатка.Поле = Новый ПолеКомпоновкиДанных("СчетОрганизации.ЛимитОстатка");
		ЛимитОстатка.Заголовок = "ЛимитОстатка";

				
		
	ИначеЕсли ИмяСхемы = "ОсновнаяСхемаКомпоновкиДанных" Тогда
		
		Отбор = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация.Порядок закрытия (Общие)");
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
	КонецЕсли;	
		
		
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	
	
	//Установим значения параметров для макета
	ПараметрПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	Если ТипЗнч(Период) = Тип("СписокЗначений") Тогда
		ПараметрПериод.Значение = Период[0].Значение;
	Иначе	
		ПараметрПериод.Значение = Период;
	КонецЕсли;	
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	НовыеДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(Схема, КомпоновщикНастроек.ПолучитьНастройки(), НовыеДанныеРасшифровки, , ТипГенератораМакета);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, ВнешнийНаборДанных, НовыеДанныеРасшифровки);
	
	//Выводим результат в табличный документ
	Если ТипГенератораМакета = Тип("ГенераторМакетаКомпоновкиДанных") Тогда
		
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		//ДанныеРасшифровкиДляРедактирования = ПоместитьВоВременноеХранилище(НовыеДанныеРасшифровки, ЭтаФорма.УникальныйИдентификатор);
	Иначе
		ТЗ = Новый ТаблицаЗначений;
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ТЗ);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Возврат ТЗ;
		
	КонецЕсли;
	
КонецФункции
//=>=>=>=>=>=>=>=>=>=>=>





//////////////////////////////////////ПОЛУЧЕНИЕ ВХОДНЫХ ДАННЫХ ДЛЯ ОБРАБОТКИ//////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////


&НаСервере
Процедура ЗаполнитьРезультатНаСервере(Результат)

	
	ТЗзадолженности = ПолучитьЗадолженности();
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	
	
	
	ТЗДоступно = ПолучитьДоступныеСредства(ТЗзадолженности.ВыгрузитьКолонку("Организация"));
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	
		
	ТЗЛимиты = ЦентрыЛимиты.Выгрузить();
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	
	
	ТЗрезультат = РаспределитьОплатыПоЦентрам(ТЗдоступно, ТЗЛимиты, ТЗзадолженности);
	
	АдресТЗРезультат = ПоместитьВоВременноеХранилище(ТЗрезультат, УникальныйИдентификатор);	
	
	
	ВнешнийИсточник = Новый Структура("Результат, Доступно", ТЗрезультат, ТЗдоступно);
	Результат = Новый ТабличныйДокумент;
	
	СформироватьОтчетНаСервере(, ПериодИсточника, "Результат", Тип("ГенераторМакетаКомпоновкиДанных"),, ВнешнийИсточник, Результат);
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	
	
КонецПроцедуры

//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>



Функция ПолучитьДоступныеСредства(СписокОрганизация)

	Попытка
		ДоступноСредств = ЭтотОбъект["Доступно"];
		Если ДоступноСредств.Количество() = 0 Тогда
			ДоступноСредств.Загрузить(ОпределитьДоступныеСредства(ОстаткиНаСчетах(СписокОрганизация)));
		КонецЕсли;
		
	Исключение
		ПоместитьДоступноНаФорму(ОпределитьДоступныеСредства(ОстаткиНаСчетах(СписокОрганизация)));
	КонецПопытки;
	
	возврат ЭтотОбъект["Доступно"].Выгрузить();	
	
	
КонецФункции


//
Функция ОстаткиНаСчетах(СписокОрганизация)
	
	Возврат СформироватьОтчетНаСервере(СписокОрганизация, ПериодИсточника, "ДляРедактирования", Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), "ДляТаблицыЗначений");
	
КонецФункции	

Функция ОпределитьДоступныеСредства(ТЗостатки)

	ТЗостатки.Свернуть("Организация, СчетОрганизации, ОрганизацияПорядокЗакрытия, СчетОрганизацииЛимитОстатка", "Поступление, ОстатокНаКонец");
	ТЗостатки.Колонки.ОстатокНаКонец.Имя = "СуммаПлан";

	
	
	ТЗостатки.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",
										Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	
	
	ТЗостатки.Колонки.Добавить("ДоступноСредств", Новый ОписаниеТипов("Число",
												  Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
												  
	ТЗостатки.Колонки.Добавить("ДоступноСредствПлан", Новый ОписаниеТипов("Число",
													  Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));											  
												  
													  
	Для Каждого строка из ТЗостатки Цикл 
		
		ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел;
		
		МинимальныйОстаток = ?(ЗначениеЗаполнено(строка.СчетОрганизацииЛимитОстатка), строка.СчетОрганизацииЛимитОстатка, 5000000);
		НеобходимыйОстаток = МинимальныйОстаток + ДеньНедели(ПериодИсточника.ДатаНачала) * ГенераторСлучайныхЧисел.СлучайноеЧисло(100155, 110588);
		
		
		строка.Сумма = Строка.СуммаПлан - строка.Поступление;
		
		
		строка.ДоступноСредств = ?(строка.Сумма <= НеобходимыйОстаток, 0, ОКР(строка.Сумма - НеобходимыйОстаток, -4,
                                                                                                       РежимОкругления.Окр15как10));
																									   
		строка.ДоступноСредствПлан = ?(строка.СуммаПлан <= НеобходимыйОстаток, 0, ОКР(строка.СуммаПлан - НеобходимыйОстаток, -4,
                                                                                                       РежимОкругления.Окр15как10));
																									   
																					   
	КонецЦикла;

	
	Возврат ТЗостатки;
	

КонецФункции
//


Процедура ПоместитьДоступноНаФорму(ТЗ_Доступно)

  ДобавляемыеРеквизиты = Новый Массив;
  
  ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Доступно", Новый ОписаниеТипов("ТаблицаЗначений"),, "Доступно"));
  ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТаблицаПоступлений", Новый ОписаниеТипов("ТабличныйДокумент"),, "ТаблицаПоступлений"));
  ИзменитьРеквизиты(ДобавляемыеРеквизиты);  
  
  
  //Добавим реквизит формы
  ДобавляемыеРеквизиты.Очистить();
  Для Каждого Колонка из ТЗ_Доступно.Колонки Цикл
	  НовыйРеквизит = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "Доступно", Колонка.Имя);   
	  ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
  КонецЦикла;
  ИзменитьРеквизиты(ДобавляемыеРеквизиты);
  
  
  //Добавим поле формы
  ТаблицаДоступно = Элементы.Добавить("Доступно", Тип("ТаблицаФормы"), Элементы.Группа5);
  ТаблицаДоступно.ПутьКДанным = "Доступно";
  Для Каждого Колонка из ТЗ_Доступно.Колонки Цикл
	  НовыйЭлемент = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), ТаблицаДоступно);
	  НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	  НовыйЭлемент.ПутьКДанным = "Доступно." + Колонка.Имя;
  КонецЦикла;
  
  ТаблицаПоступлений = Элементы.Добавить("ТаблицаПоступлений", Тип("ПолеФормы"), Элементы.Группа5);
  ТаблицаПоступлений.ПутьКДанным = "ТаблицаПоступлений";
  ТаблицаПоступлений.Видимость = Ложь;
  
  ЭтотОбъект["Доступно"].Загрузить(ТЗ_Доступно);
  
  
  //Добавим команду формы
  НоваяКоманда = ЭтаФорма.Команды.Добавить("ИсторияПоступлений");
  НоваяКоманда.Заголовок = "История поступлений";
  НоваяКоманда.Действие = "ОткрытьИсториюПоступлений";
  //
  НовыйЭлемент = Элементы.Добавить("ИсторияПоступлений", Тип("КнопкаФормы"), ТаблицаДоступно.КоманднаяПанель);
  НовыйЭлемент.ИмяКоманды = "ИсторияПоступлений";
  
  //Установим своё действие
  ТаблицаДоступно.УстановитьДействие("ПриАктивизацииСтроки", "СформироватьИсториюПоступлений");
 
 
КонецПроцедуры

//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>


Функция ПолучитьЗадолженности()
	
	//Получим задолженности
	Задолженности = СформироватьОтчетНаСервере(, ПериодИсточника, "ОсновнаяСхемаКомпоновкиДанных", Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), "ДляРаспЗадолженностей");
	
	//Переименуем колонку с остатком
	Задолженности.Колонки.ПользовательскиеПоляПоле2.Имя = "Остаток";
	
	Возврат Задолженности;

	
КонецФункции



Процедура ЗаполнитьЛимитыЦентров(Задолженности)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задолженности.Контрагент КАК Центр,
	               |	Задолженности.Остаток КАК Сумма
	               |ПОМЕСТИТЬ ВТ_Задолженности
	               |ИЗ
	               |	&Задолженности КАК Задолженности
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Задолженности.Центр,
	               |	СУММА(ВТ_Задолженности.Сумма) КАК Сумма
	               |ПОМЕСТИТЬ ВТ_ЗадолженностиЦентр
	               |ИЗ
	               |	ВТ_Задолженности КАК ВТ_Задолженности
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Задолженности.Центр
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ЗадолженностиЦентр.Центр,
	               |	БанковскиеСчета.Ссылка КАК РассчётныйСчёт
	               |ИЗ
	               |	ВТ_ЗадолженностиЦентр КАК ВТ_ЗадолженностиЦентр
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	               |		ПО ВТ_ЗадолженностиЦентр.Центр = БанковскиеСчета.Владелец
	               |ГДЕ
	               |	БанковскиеСчета.ПометкаУдаления = ЛОЖЬ
	               |	И БанковскиеСчета.НеИспользуется = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТ_ЗадолженностиЦентр.Сумма УБЫВ";
				   
				   
		Запрос.УстановитьПараметр("Задолженности", Задолженности);
				   
				   
		ЦентрыЛимиты.Загрузить(Запрос.Выполнить().Выгрузить());				   
				   

КонецПроцедуры


&НаКлиенте
Процедура ЦентрыЛимитыИспользоватьПриИзменении(Элемент)
	
	Использовать = Элементы.ЦентрыЛимиты.ТекущиеДанные.Использовать;
	Работает = Элементы.ЦентрыЛимиты.ТекущиеДанные.Работает;
	
	Если Использовать Тогда
		
		Если НЕ Работает Тогда
			Использовать = НЕ Использовать;
			Сообщить("Требуется проверить актуальность рассчетного счета!!!");
		КонецЕсли;
		
	КонецЕсли;	
	
	Элементы.ЦентрыЛимиты.ТекущиеДанные.Использовать = Использовать;
	Работает = Элементы.ЦентрыЛимиты.ТекущиеДанные.Работает = Работает;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////





////////////////////////////////////////РАСПРЕДЕЛИТЬ ЗАДОЛЖЕННОСТИ//////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
&НаСервереБезКонтекста
Функция РаспределитьОплатыПоЦентрам(Доступно, Центры, Задолженности)

	
	//Таблица результата
	РезультатРасп = Доступно.СкопироватьКолонки("Организация");
	
	РезультатРасп.Колонки.Добавить("СчетОрганизации", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	
	РезультатРасп.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",
															Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
															
	РезультатРасп.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));								
	
	РезультатРасп.Колонки.Добавить("СчетКонтрагента", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
	
	
	ДоступноИтог = Доступно.Скопировать();
	ДоступноИтог.Свернуть("Организация", "ДоступноСредств");	
	
	
	Для Каждого Организация из ДоступноИтог Цикл                                    
		
		Для Каждого Центр из Центры Цикл
			
			
			Задолженность = ПолучитьЗадолженность(Организация.Организация, Центр.Центр, Задолженности);
			
			
			Если Организация.ДоступноСредств = 0 Тогда
				Продолжить;
				
			ИначеЕсли Задолженность = Неопределено Тогда 
				Продолжить;
				
			ИначеЕсли Задолженность.Остаток = 0 Тогда 
				Продолжить;
			КонецЕсли;	
			
			ТребуетсяРаспределить = ?(Задолженность.Остаток < Организация.ДоступноСредств, Задолженность.Остаток, Организация.ДоступноСредств);
			
			//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
			
			
			Если Центр.МожетПринять = 0 Тогда
				Продолжить;
				
			ИначеЕсли НЕ Центр.Использовать Тогда
				Продолжить;
			КонецЕсли;
			
			МожетПринять = Центр.МожетПринять;
			
			//=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
			
			
			Если МожетПринять <= ТребуетсяРаспределить Тогда
				
				РазбитьПоСчетам(Организация, Центр, МожетПринять, Доступно, РезультатРасп);
				//
				Центр.Можетпринять = Центр.МожетПринять - МожетПринять;
				Организация.ДоступноСредств = Организация.ДоступноСредств - МожетПринять;
				Задолженность.Остаток = Задолженность.Остаток - МожетПринять;
				//
				
			Иначе
				
				РазбитьПоСчетам(Организация, Центр, ТребуетсяРаспределить, Доступно, РезультатРасп);
				//
				Организация.ДоступноСредств = Организация.ДоступноСредств - ТребуетсяРаспределить;
				Центр.МожетПринять = Центр.МожетПринять - ТребуетсяРаспределить;
				Задолженность.Остаток = Задолженность.Остаток - ТребуетсяРаспределить;
				//
												
			КонецЕсли;	
			
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	Возврат РезультатРасп;
			
КонецФункции	


&НаСервереБезКонтекста
Функция ПолучитьЗадолженность(Организация, Контрагент, Задолженности)

	
	ОтборОрганизация = Задолженности.НайтиСтроки(Новый Структура("Организация, Контрагент", Организация, Контрагент));
				
	Возврат ?(ОтборОрганизация.Количество() = 0, Неопределено, ОтборОрганизация[0]);
	
	   
КонецФункции


&НаСервереБезКонтекста
Процедура РазбитьПоСчетам(Организация, Контрагент, Сумма, Доступно, Результат)

	
	СчетаОрганизации = Доступно.Скопировать(Новый Структура("Организация", Организация.Организация));
	Итог = СчетаОрганизации.Итог("ДоступноСредств");
	
	ГСЛ = Новый ГенераторСлучайныхЧисел;
	СуммаПогрешности = 0;
	
	Для Каждого Счет из СчетаОрганизации Цикл 
		
		запись = Результат.Добавить();
		запись.Организация = Счет.Организация;
		запись.СчетОрганизации = Счет.СчетОрганизации;
		запись.Контрагент = Контрагент.Центр;
		запись.СчетКонтрагента = Контрагент.РассчётныйСчёт;
		
		
		Погрешность = ГСЛ.СлучайноеЧисло(876.15, 3055.77);
		СуммаОтправки = ОКР(Счет.ДоступноСредств / Итог * Сумма, 2);
				
		Если СуммаОтправки <= Погрешность Тогда
			запись.Сумма = СуммаОтправки;
		Иначе
			запись.Сумма = СуммаОтправки - Погрешность;
			СуммаПогрешности = СуммаПогрешности + Погрешность;
		КонецЕсли;
		
		
	КонецЦикла;
	
	запись.Сумма = запись.Сумма + СуммаПогрешности;
	
	
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ДополнитьРезультат(АдресТЗРезультат, Дата)
	
  Запрос = Новый Запрос;
  Запрос.Текст = "ВЫБРАТЬ
                 |	Результат.Организация,
                 |	Результат.СчетОрганизации,
                 |	Результат.Контрагент,
                 |	Результат.Сумма,
                 |	Результат.СчетКонтрагента
                 |ПОМЕСТИТЬ ВТ_Результат
                 |ИЗ
                 |	&Результат КАК Результат
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |	МАКСИМУМ(ДДССрезПоследних.СчетКонтрагента) КАК СчетКонтрагента,
                 |	МАКСИМУМ(ДДССрезПоследних.ДоговорыКонтрагентов) КАК ДоговорыКонтрагентов,
                 |	ДДССрезПоследних.Организация,
                 |	ДДССрезПоследних.Получатель
                 |ПОМЕСТИТЬ ВТ_Дополнение
                 |ИЗ
                 |	РегистрСведений.ДДС.СрезПоследних(, Получатель.Родитель.Наименование = ""Центры"") КАК ДДССрезПоследних
                 |
                 |СГРУППИРОВАТЬ ПО
                 |	ДДССрезПоследних.Организация,
                 |	ДДССрезПоследних.Получатель
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |	&Дата,
                 |	ЗНАЧЕНИЕ(Перечисление.ТипДвиженияДДС.Списание) КАК ТипДвижения,
                 |	ВТ_Результат.Организация,
                 |	ВТ_Результат.СчетОрганизации,
                 |	ВТ_Результат.Контрагент,
                 |	ВТ_Результат.СчетКонтрагента,
                 |	ВТ_Дополнение.ДоговорыКонтрагентов,
                 |	ВТ_Результат.Сумма
                 |ИЗ
                 |	ВТ_Результат КАК ВТ_Результат
                 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Дополнение КАК ВТ_Дополнение
                 |		ПО ВТ_Результат.Организация = ВТ_Дополнение.Организация
                 |			И ВТ_Результат.Контрагент = ВТ_Дополнение.Получатель
                 |ГДЕ
                 |	ВТ_Результат.Сумма > 0";
				 
				 
	Запрос.УстановитьПараметр("Результат", ПолучитьИзВременногоХранилища(АдресТЗРезультат));
	Запрос.УстановитьПараметр("Дата", Дата);
	                                          
	Результат = Запрос.Выполнить().Выгрузить();
	ПоместитьВоВременноеХранилище(Результат, АдресТЗРезультат);
	                                       	
	
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////





//////////////////////////////////////ДОПОЛНИТЕЛЬНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура НеобходимоПополнитьНаСервере(Результат)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Доступно.Организация,
	               |	Доступно.СчетОрганизации,
	               |	Доступно.ДоступноСредствПлан,
	               |	Доступно.СуммаПлан,
	               |	Доступно.ОрганизацияПорядокЗакрытия
	               |ПОМЕСТИТЬ ВТ_Доступно
	               |ИЗ
	               |	&Доступно КАК Доступно
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Родитель.Организация КАК Родитель,
	               |	ВТ_Доступно.Организация,
	               |	ВТ_Доступно.СчетОрганизации,
	               |	ВЫБОР
	               |		КОГДА ВТ_Доступно.ДоступноСредствПлан >= 5000000
	               |			ТОГДА 0
	               |		ИНАЧЕ 5000000 - ВТ_Доступно.ДоступноСредствПлан
	               |	КОНЕЦ КАК ТребуетсяПополнить,
	               |	ВТ_Доступно.СуммаПлан КАК ПлановыйОстаток,
	               |	ВТ_Доступно.ДоступноСредствПлан,
	               |	ВТ_Доступно.ОрганизацияПорядокЗакрытия КАК ПорядокЗакрытия
	               |ИЗ
	               |	ВТ_Доступно КАК ВТ_Доступно
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			НастройкаПолейОтправки.Получатель КАК Получатель,
	               |			МАКСИМУМ(НастройкаПолейОтправки.Организация) КАК Организация
	               |		ИЗ
	               |			РегистрСведений.НастройкаПолейОтправки КАК НастройкаПолейОтправки
	               |		ГДЕ
	               |			НастройкаПолейОтправки.Получатель.Родитель.Наименование = ""Звено""
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			НастройкаПолейОтправки.Получатель) КАК Родитель
	               |		ПО (ВЫРАЗИТЬ(ВТ_Доступно.Организация КАК Справочник.Организации).ИНН = ВЫРАЗИТЬ(Родитель.Получатель КАК Справочник.Контрагенты).ИНН)";
				   
				   
	 Запрос.УстановитьПараметр("Доступно", ЭтотОбъект["Доступно"].Выгрузить());
	 
	 ТЗРезультат = Запрос.Выполнить().Выгрузить();
	 ТЗЗадолженности = ПолучитьЗадолженности();
	 
	 ВнешнийИсточник = Новый Структура("ТребуетсяПополнить, Задолженности", ТЗРезультат, ТЗЗадолженности);
	 СформироватьОтчетНаСервере(, ПериодИсточника, "ТребуетсяПополнить", Тип("ГенераторМакетаКомпоновкиДанных"),, ВнешнийИсточник, Результат);
	 	

 КонецПроцедуры
 
 
 
 
 &НаСервереБезКонтекста
 Функция ПолучитьТаблицуНаСервере()
	 
	 
	ТаблицаСчетов = Новый ТаблицаЗначений;
	
	
	ТаблицаСчетов.Колонки.Добавить("ОргИНН", Новый ОписаниеТипов("Строка", ,
											 Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
											 
	ТаблицаСчетов.Колонки.Добавить("НомерСчета", Новый ОписаниеТипов("Строка", ,
												 Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
												 
	ТаблицаСчетов.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка", ,
											 Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
											 
											 
    Возврат ТаблицаСчетов;
	
											 
 КонецФункции


&НаКлиенте
Процедура ЗагрузитьТаблицуСчетов(ТаблицаСчетов)
	
	
	ИмяФайла = "\\main-fs01\Folders\G040\Условия работы 2015\Банки.xlsx";
			
	
	//Пытаемся подключиться к Excel
	Попытка
		Excel = новый COMОбъект("Excel.Application");
	Исключение
		ОбщийМодульСервер.ДобавитьСоообщениеВмассив(, "Excel не установлен!!!");
		Возврат;
	КонецПопытки;

	
	//Открываем файл
	Попытка
		Excel.Workbooks.Open(ИмяФайла,,True,);
	Исключение
		ОбщийМодульСервер.ДобавитьСоообщениеВмассив(, ОписаниеОшибки());
	КонецПопытки;  
	
	
	
	//Получим количество строк и колонок.
	//В разных версиях Excel получаются по-разному, поэтому сначала определим версию Excel
	Версия = Лев(Excel.Version,Найти(Excel.Version,".")-1);
	Если Версия = "8" тогда
		ФайлСтрок   = Excel.Cells.CurrentRegion.Rows.Count;
		ФайлКолонок = Макс(Excel.Cells.CurrentRegion.Columns.Count, 13);
	Иначе
		ФайлСтрок   = Excel.Cells(1,1).SpecialCells(11).Row;
		ФайлКолонок = Excel.Cells(1,1).SpecialCells(11).Column;   
	Конецесли;
	
	
	// Выбираем данные из файла
	Для y = 2 по ФайлСтрок Цикл
		
		//Получим данные из соответсвующих ячеек
		Инн = Строка(Формат(EXCEL.Cells(y, 3).Value, "ЧДЦ=; ЧГ="));
		
		Если НЕ ЗначениеЗаполнено(Инн) Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ТаблицаСчетов.Добавить();		
		НоваяСтрока.ОргИНН = Инн;
		НоваяСтрока.НомерСчета = СокрЛП(строка(EXCEL.Cells(y, 6).Value));
		НоваяСтрока.Статус = строка(EXCEL.Cells(y, 7).Value);
		//
		
	Конеццикла;
	
	
	
	//Закрываем Excel
	Excel.quit();   
	Excel = Неопределено;
	
		
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////


















  